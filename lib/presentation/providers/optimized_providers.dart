// ============================================================================
// presentation/providers/optimized_providers.dart - PROVIDERS OPTIMIZADOS
// ============================================================================

import 'package:flutter/material.dart';
import 'package:logger/logger.dart';

import '../../data/services/optimized_database_service.dart';
import '../../data/models/optimized_models.dart';

// ============================================================================
// AUTH PROVIDER OPTIMIZADO
// ============================================================================

class OptimizedAuthProvider with ChangeNotifier {
  final OptimizedDatabaseService _databaseService;
  final Logger _logger = Logger();

  OptimizedUserModel? _currentUser;
  bool _isLoading = false;
  String? _errorMessage;
  bool _isInitialized = false;

  OptimizedAuthProvider(this._databaseService);

  // Getters
  OptimizedUserModel? get currentUser => _currentUser;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;
  bool get isLoggedIn => _currentUser != null;
  bool get isInitialized => _isInitialized;

  /// Inicializar provider
  Future<void> initialize() async {
    if (_isInitialized) return;

    _logger.i('üîë Inicializando AuthProvider optimizado');
    _setLoading(true);

    try {
      // Verificar sesi√≥n guardada aqu√≠ si implementas SessionService
      // final hasSession = await _sessionService.hasActiveSession();
      // if (hasSession) { ... }

      _isInitialized = true;
      _logger.i('‚úÖ AuthProvider inicializado');
    } catch (e) {
      _logger.e('‚ùå Error inicializando AuthProvider: $e');
      _setError('Error de inicializaci√≥n');
    } finally {
      _setLoading(false);
    }
  }// ... dentro de la clase OptimizedAuthProvider

  /// ‚úÖ NUEVO: Iniciar sesi√≥n como desarrollador
  Future<bool> loginAsDeveloper() async {
    _logger.i('üöÄ Iniciando sesi√≥n como desarrollador...');
    _setLoading(true);
    _clearError();

    try {
      final devUser = await _databaseService.createDeveloperAccount();

      if (devUser != null) {
        _currentUser = devUser;
        _logger.i('‚úÖ Sesi√≥n iniciada como desarrollador: ${devUser.name}');
        notifyListeners();
        return true;
      } else {
        _setError('No se pudo crear o iniciar sesi√≥n como desarrollador');
        return false;
      }
    } catch (e) {
      _logger.e('‚ùå Error en login de desarrollador: $e');
      _setError('Error fatal en el modo desarrollador');
      return false;
    } finally {
      _setLoading(false);
    }
  }

  /// Registrar nuevo usuario
  Future<bool> register({
    required String email,
    required String password,
    required String name,
    String avatarEmoji = 'üßò‚Äç‚ôÄÔ∏è',
    String bio = '',
  }) async {
    _logger.i('üìù Registrando usuario: $email');
    _setLoading(true);
    _clearError();

    try {
      final user = await _databaseService.createUser(
        email: email,
        password: password,
        name: name,
        avatarEmoji: avatarEmoji,
        bio: bio,
      );

      if (user != null) {
        _currentUser = user;
        _logger.i('‚úÖ Usuario registrado exitosamente: ${user.name}');
        notifyListeners();
        return true;
      } else {
        _setError('No se pudo crear el usuario');
        return false;
      }
    } catch (e) {
      _logger.e('‚ùå Error en registro: $e');
      _setError('Error durante el registro');
      return false;
    } finally {
      _setLoading(false);
    }
  }

  /// Iniciar sesi√≥n
  Future<bool> login(String email, String password) async {
    _logger.i('üîê Iniciando sesi√≥n: $email');
    _setLoading(true);
    _clearError();

    try {
      final user = await _databaseService.authenticateUser(email, password);

      if (user != null) {
        _currentUser = user;
        _logger.i('‚úÖ Sesi√≥n iniciada: ${user.name}');
        notifyListeners();
        return true;
      } else {
        _setError('Credenciales incorrectas');
        return false;
      }
    } catch (e) {
      _logger.e('‚ùå Error en login: $e');
      _setError('Error durante el login');
      return false;
    } finally {
      _setLoading(false);
    }
  }

  /// Cerrar sesi√≥n
  Future<void> logout() async {
    _logger.i('üö™ Cerrando sesi√≥n');
    _currentUser = null;
    _clearError();
    notifyListeners();
  }

  /// Actualizar perfil de usuario
  Future<bool> updateProfile({
    String? name,
    String? bio,
    String? avatarEmoji,
  }) async {
    if (_currentUser == null) return false;

    _setLoading(true);
    try {
      final updatedUser = _currentUser!.copyWith(
        name: name,
        bio: bio,
        avatarEmoji: avatarEmoji,
      );

      // Aqu√≠ implementar√≠as el m√©todo updateUser en el database service
      // final success = await _databaseService.updateUser(updatedUser);

      _currentUser = updatedUser;
      notifyListeners();
      return true;
    } catch (e) {
      _logger.e('‚ùå Error actualizando perfil: $e');
      return false;
    } finally {
      _setLoading(false);
    }
  }

  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setError(String error) {
    _errorMessage = error;
    notifyListeners();
  }

  void _clearError() {
    _errorMessage = null;
    notifyListeners();
  }
}

// ============================================================================
// DAILY ENTRIES PROVIDER OPTIMIZADO
// ============================================================================

class OptimizedDailyEntriesProvider with ChangeNotifier {
  final OptimizedDatabaseService _databaseService;
  final Logger _logger = Logger();

  List<OptimizedDailyEntryModel> _entries = [];
  OptimizedDailyEntryModel? _todayEntry;
  bool _isLoading = false;
  String? _errorMessage;

  OptimizedDailyEntriesProvider(this._databaseService);

  // Getters
  List<OptimizedDailyEntryModel> get entries => List.unmodifiable(_entries);
  OptimizedDailyEntryModel? get todayEntry => _todayEntry;
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;

  // Analytics getters
  double get averageWellbeingScore => _entries.averageWellbeingScore;
  List<OptimizedDailyEntryModel> get recentEntries => _entries.recentEntries;
  Map<String, int> get wellbeingDistribution => _entries.wellbeingLevelDistribution;

  /// Cargar entradas del usuario
  Future<void> loadEntries(int userId, {int? limitDays}) async {
    _logger.d('üìö Cargando entradas para usuario: $userId');
    _setLoading(true);
    _clearError();

    try {
      final endDate = DateTime.now();
      final startDate = limitDays != null
          ? endDate.subtract(Duration(days: limitDays))
          : null;

      _entries = await _databaseService.getDailyEntries(
        userId: userId,
        startDate: startDate,
        endDate: endDate,
      );

      // Buscar entrada de hoy
      final today = DateTime.now();
      final todayStr = DateTime(today.year, today.month, today.day);

      // *** FIX: Use try-catch to avoid error when no entry is found ***
      try {
        _todayEntry = _entries.firstWhere(
              (entry) => entry.entryDate.isAtSameMomentAs(todayStr),
        );
      } catch (e) {
        _todayEntry = null;
      }


      _logger.i('‚úÖ Cargadas ${_entries.length} entradas');
    } catch (e) {
      _logger.e('‚ùå Error cargando entradas: $e');
      _setError('Error cargando entradas');
    } finally {
      _setLoading(false);
    }
  }

  /// Guardar entrada diaria
  Future<bool> saveDailyEntry({
    required int userId,
    required String freeReflection,
    List<String> positiveTags = const [],
    List<String> negativeTags = const [],
    bool? worthIt,
    int? moodScore,

    // Analytics
    int? energyLevel,
    int? stressLevel,
    int? sleepQuality,
    int? anxietyLevel,
    int? motivationLevel,
    int? socialInteraction,
    int? physicalActivity,
    int? workProductivity,
    double? sleepHours,
    int? waterIntake,
    int? meditationMinutes,
    int? exerciseMinutes,
    double? screenTimeHours,
    String? gratitudeItems,
    int? weatherMoodImpact,
    int? socialBattery,
    int? creativeEnergy,
    int? emotionalStability,
    int? focusLevel,
    int? lifeSatisfaction,
  }) async {
    _logger.i('üíæ Guardando entrada diaria');
    _setLoading(true);
    _clearError();

    try {
      final entry = OptimizedDailyEntryModel.create(
        userId: userId,
        freeReflection: freeReflection,
        positiveTags: positiveTags,
        negativeTags: negativeTags,
        worthIt: worthIt,
        moodScore: moodScore,
        energyLevel: energyLevel,
        stressLevel: stressLevel,
        sleepQuality: sleepQuality,
        anxietyLevel: anxietyLevel,
        motivationLevel: motivationLevel,
        socialInteraction: socialInteraction,
        physicalActivity: physicalActivity,
        workProductivity: workProductivity,
        sleepHours: sleepHours,
        waterIntake: waterIntake,
        meditationMinutes: meditationMinutes,
        exerciseMinutes: exerciseMinutes,
        screenTimeHours: screenTimeHours,
        gratitudeItems: gratitudeItems,
        weatherMoodImpact: weatherMoodImpact,
        socialBattery: socialBattery,
        creativeEnergy: creativeEnergy,
        emotionalStability: emotionalStability,
        focusLevel: focusLevel,
        lifeSatisfaction: lifeSatisfaction,
      );

      final entryId = await _databaseService.saveDailyEntry(entry);

      if (entryId != null) {
        _todayEntry = entry.copyWith(id: entryId);
        await loadEntries(userId); // Recargar para mantener sincron√≠a
        _logger.i('‚úÖ Entrada guardada exitosamente');
        return true;
      } else {
        _setError('No se pudo guardar la entrada');
        return false;
      }
    } catch (e) {
      _logger.e('‚ùå Error guardando entrada: $e');
      _setError('Error guardando entrada');
      return false;
    } finally {
      _setLoading(false);
    }
  }

  /// Obtener entrada de una fecha espec√≠fica
  OptimizedDailyEntryModel? getEntryByDate(DateTime date) {
    final targetDate = DateTime(date.year, date.month, date.day);
    try {
      return _entries.firstWhere(
            (entry) => entry.entryDate.isAtSameMomentAs(targetDate),
      );
    } catch (e) {
      return null;
    }
  }

  /// Obtener estad√≠sticas del per√≠odo
  Map<String, dynamic> getPeriodStats({int days = 30}) {
    final recentEntries = this.recentEntries;

    if (recentEntries.isEmpty) {
      return {
        'total_entries': 0,
        'avg_wellbeing': 0.0,
        'consistency_rate': 0.0,
        'mood_trend': 'stable',
      };
    }

    final avgWellbeing = recentEntries.averageWellbeingScore;
    final consistencyRate = recentEntries.length / days;

    // Calcular tendencia de mood
    final sortedEntries = recentEntries..sort((a, b) => a.entryDate.compareTo(b.entryDate));
    final firstHalf = sortedEntries.take(sortedEntries.length ~/ 2).toList();
    final secondHalf = sortedEntries.skip(sortedEntries.length ~/ 2).toList();

    final firstHalfAvg = firstHalf.averageWellbeingScore;
    final secondHalfAvg = secondHalf.averageWellbeingScore;

    String moodTrend = 'stable';
    if (secondHalfAvg > firstHalfAvg + 0.5) {
      moodTrend = 'improving';
    } else if (secondHalfAvg < firstHalfAvg - 0.5) {
      moodTrend = 'declining';
    }

    return {
      'total_entries': recentEntries.length,
      'avg_wellbeing': avgWellbeing,
      'consistency_rate': consistencyRate,
      'mood_trend': moodTrend,
      'wellbeing_distribution': wellbeingDistribution,
    };
  }

  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setError(String error) {
    _errorMessage = error;
    notifyListeners();
  }

  void _clearError() {
    _errorMessage = null;
    notifyListeners();
  }
}

// ============================================================================
// INTERACTIVE MOMENTS PROVIDER OPTIMIZADO
// ============================================================================

class OptimizedMomentsProvider with ChangeNotifier {
  final OptimizedDatabaseService _databaseService;
  final Logger _logger = Logger();

  List<OptimizedInteractiveMomentModel> _moments = [];
  List<OptimizedInteractiveMomentModel> _todayMoments = [];
  bool _isLoading = false;
  String? _errorMessage;

  OptimizedMomentsProvider(this._databaseService);

  // Getters
  List<OptimizedInteractiveMomentModel> get moments => List.unmodifiable(_moments);
  List<OptimizedInteractiveMomentModel> get todayMoments => List.unmodifiable(_todayMoments);
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;

  // Analytics getters
  int get totalCount => _moments.length;
  int get todayCount => _todayMoments.length;
  int get positiveCount => _moments.where((m) => m.type == 'positive').length;
  int get negativeCount => _moments.where((m) => m.type == 'negative').length;

  List<OptimizedInteractiveMomentModel> get positiveMoments => _moments.positivesMoments;
  List<OptimizedInteractiveMomentModel> get negativeMoments => _moments.negativeMoments;
  Map<String, double> get intensityByCategory => _moments.averageIntensityByCategory;

  /// Cargar momentos del usuario
  Future<void> loadMoments(int userId, {DateTime? date, int? limitDays}) async {
    _logger.d('üìö Cargando momentos para usuario: $userId');
    _setLoading(true);
    _clearError();

    try {
      if (date != null) {
        // Cargar momentos de un d√≠a espec√≠fico
        _moments = await _databaseService.getInteractiveMoments(
          userId: userId,
          date: date,
        );
      } else {
        // Cargar momentos recientes
        _moments = await _databaseService.getInteractiveMoments(
          userId: userId,
          limit: limitDays != null ? limitDays * 10 : 100, // Estimaci√≥n
        );
      }

      // Actualizar momentos de hoy
      _todayMoments = _moments.todayMoments;

      _logger.i('‚úÖ Cargados ${_moments.length} momentos (${_todayMoments.length} de hoy)');
    } catch (e) {
      _logger.e('‚ùå Error cargando momentos: $e');
      _setError('Error cargando momentos');
    } finally {
      _setLoading(false);
    }
  }

  /// Cargar solo momentos de hoy
  Future<void> loadTodayMoments(int userId) async {
    final today = DateTime.now();
    await loadMoments(userId, date: today);
  }

  /// A√±adir nuevo momento
  Future<bool> addMoment({
    required int userId,
    required String emoji,
    required String text,
    required String type,
    int intensity = 5,
    String category = 'general',
    String? contextLocation,
    String? contextWeather,
    String? contextSocial,
    int? energyBefore,
    int? energyAfter,
    int? moodBefore,
    int? moodAfter,
  }) async {
    _logger.i('‚ú® A√±adiendo momento: $emoji $text');
    _setLoading(true);
    _clearError();

    try {
      final moment = OptimizedInteractiveMomentModel.create(
        userId: userId,
        emoji: emoji,
        text: text,
        type: type,
        intensity: intensity,
        category: category,
        contextLocation: contextLocation,
        contextWeather: contextWeather,
        contextSocial: contextSocial,
        energyBefore: energyBefore,
        energyAfter: energyAfter,
        moodBefore: moodBefore,
        moodAfter: moodAfter,
      );

      final momentId = await _databaseService.saveInteractiveMoment(userId, moment);

      if (momentId != null) {
        final savedMoment = moment.copyWith(id: momentId);
        _moments.insert(0, savedMoment); // A√±adir al principio
        _todayMoments = _moments.todayMoments; // Actualizar lista de hoy

        _logger.i('‚úÖ Momento a√±adido exitosamente');
        notifyListeners();
        return true;
      } else {
        _setError('No se pudo guardar el momento');
        return false;
      }
    } catch (e) {
      _logger.e('‚ùå Error a√±adiendo momento: $e');
      _setError('Error a√±adiendo momento');
      return false;
    } finally {
      _setLoading(false);
    }
  }

  /// Filtrar momentos por tipo
  List<OptimizedInteractiveMomentModel> getMomentsByType(String type) {
    return _moments.where((m) => m.type == type).toList();
  }

  /// Filtrar momentos por categor√≠a
  List<OptimizedInteractiveMomentModel> getMomentsByCategory(String category) {
    return _moments.where((m) => m.category == category).toList();
  }

  /// Obtener estad√≠sticas de momentos
  Map<String, dynamic> getMomentsStats() {
    if (_moments.isEmpty) {
      return {
        'total': 0,
        'today': 0,
        'positive_ratio': 0.0,
        'avg_intensity': 0.0,
        'categories': <String, int>{},
      };
    }

    final positiveRatio = positiveCount / totalCount;
    final avgIntensity = OptimizedInteractiveMomentModel.calculateAverageIntensity(_moments);

    // Estad√≠sticas por categor√≠a
    final categoryStats = <String, int>{};
    for (final moment in _moments) {
      categoryStats[moment.category] = (categoryStats[moment.category] ?? 0) + 1;
    }

    return {
      'total': totalCount,
      'today': todayCount,
      'positive_ratio': positiveRatio,
      'negative_ratio': 1.0 - positiveRatio,
      'avg_intensity': avgIntensity,
      'categories': categoryStats,
      'intensity_by_category': intensityByCategory,
    };
  }

  /// Obtener tendencias horarias de hoy
  Map<int, List<OptimizedInteractiveMomentModel>> getTodayHourlyBreakdown() {
    final hourlyBreakdown = <int, List<OptimizedInteractiveMomentModel>>{};

    for (final moment in _todayMoments) {
      final hour = moment.timestamp.hour;
      hourlyBreakdown.putIfAbsent(hour, () => []).add(moment);
    }

    return hourlyBreakdown;
  }

  /// Limpiar momentos de hoy
  Future<bool> clearTodayMoments(int userId) async {
    _logger.i('üóëÔ∏è Limpiando momentos de hoy');
    try {
      // Aqu√≠ implementar√≠as el m√©todo clearTodayMoments en el database service
      _todayMoments.clear();
      _moments.removeWhere((m) => m.entryDate.isAtSameMomentAs(DateTime.now()));
      notifyListeners();
      return true;
    } catch (e) {
      _logger.e('‚ùå Error limpiando momentos: $e');
      return false;
    }
  }

  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setError(String error) {
    _errorMessage = error;
    notifyListeners();
  }

  void _clearError() {
    _errorMessage = null;
    notifyListeners();
  }
}

// ============================================================================
// ANALYTICS PROVIDER OPTIMIZADO
// ============================================================================

class OptimizedAnalyticsProvider with ChangeNotifier {
  final OptimizedDatabaseService _databaseService;
  final Logger _logger = Logger();

  Map<String, dynamic> _analytics = {};
  bool _isLoading = false;
  String? _errorMessage;

  OptimizedAnalyticsProvider(this._databaseService);

  // Getters
  Map<String, dynamic> get analytics => Map.unmodifiable(_analytics);
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;

  // Getters espec√≠ficos para compatibilidad
  int get wellbeingScore => (_analytics['basic_stats']?['avg_wellbeing'] as double?)?.round() ?? 0;
  String get wellbeingLevel {
    final score = wellbeingScore;
    if (score >= 8) return 'Excelente';
    if (score >= 6) return 'Bueno';
    if (score >= 4) return 'Regular';
    return 'Necesita Atenci√≥n';
  }

  /// Cargar analytics completos del usuario
  Future<void> loadCompleteAnalytics(int userId, {int days = 30}) async {
    _logger.d('üìä Cargando analytics para usuario: $userId');
    _setLoading(true);
    _clearError();

    try {
      _analytics = await _databaseService.getUserAnalytics(userId, days: days);
      _logger.i('‚úÖ Analytics cargados para $days d√≠as');
    } catch (e) {
      _logger.e('‚ùå Error cargando analytics: $e');
      _setError('Error cargando estad√≠sticas');
    } finally {
      _setLoading(false);
    }
  }

  /// Obtener insights basados en los datos
  List<Map<String, String>> getInsights() {
    final insights = <Map<String, String>>[];

    if (_analytics.isEmpty) return insights;

    final basicStats = _analytics['basic_stats'] as Map<String, dynamic>?;
    final streakData = _analytics['streak_data'] as Map<String, dynamic>?;

    if (basicStats != null) {
      final avgWellbeing = basicStats['avg_wellbeing'] as double? ?? 0.0;
      final consistencyRate = basicStats['consistency_rate'] as double? ?? 0.0;

      // Insight sobre bienestar
      if (avgWellbeing >= 7.0) {
        insights.add({
          'icon': 'üåü',
          'title': 'Excelente Bienestar',
          'description': 'Tu puntuaci√≥n de bienestar promedio es alta'
        });
      } else if (avgWellbeing < 4.0) {
        insights.add({
          'icon': 'üí™',
          'title': 'Oportunidad de Mejora',
          'description': 'Considera practicar m√°s autocuidado'
        });
      }

      // Insight sobre consistencia
      if (consistencyRate >= 0.8) {
        insights.add({
          'icon': 'üéØ',
          'title': 'Muy Consistente',
          'description': 'Mantienes un registro muy regular'
        });
      }
    }

    // Insight sobre racha
    if (streakData != null) {
      final currentStreak = streakData['current_streak'] as int? ?? 0;
      if (currentStreak >= 7) {
        insights.add({
          'icon': 'ÔøΩ',
          'title': 'Racha Impresionante',
          'description': '$currentStreak d√≠as consecutivos registrando'
        });
      }
    }

    return insights;
  }
  // ============================================================================
// M√âTODOS QUE TRABAJAN CON LOS DATOS QUE S√ç EXISTEN
// ============================================================================

// A√±adir estos m√©todos al OptimizedAnalyticsProvider

// Getter corregido para wellbeingScore


  /// Obtener insights destacados (basado en datos reales)
  List<Map<String, String>> getHighlightedInsights() {
    final insights = <Map<String, String>>[];
    if (_analytics.isEmpty) return insights;

    final basicStats = _analytics['basic_stats'] as Map<String, dynamic>?;
    final streakData = _analytics['streak_data'] as Map<String, dynamic>?;

    if (basicStats != null) {
      final avgMood = basicStats['avg_mood'] as double? ?? 5.0;
      final totalEntries = basicStats['total_entries'] as int? ?? 0;
      final avgEnergy = basicStats['avg_energy'] as double? ?? 5.0;
      final avgStress = basicStats['avg_stress'] as double? ?? 5.0;

      // Insight sobre mood
      if (avgMood >= 7.0) {
        insights.add({
          'emoji': 'üòä',
          'type': 'mood',
          'title': 'Excelente Estado de √Ånimo',
          'description': 'Tu mood promedio es ${avgMood.toStringAsFixed(1)}/10'
        });
      } else if (avgMood < 4.0) {
        insights.add({
          'emoji': 'üí™',
          'type': 'improvement',
          'title': 'Espacio para Crecer',
          'description': 'Tu mood puede mejorar con peque√±os cambios'
        });
      }

      // Insight sobre energ√≠a
      if (avgEnergy >= 7.0) {
        insights.add({
          'emoji': '‚ö°',
          'type': 'energy',
          'title': 'Energ√≠a Alta',
          'description': 'Mantienes buenos niveles de energ√≠a'
        });
      }

      // Insight sobre estr√©s
      if (avgStress <= 3.0) {
        insights.add({
          'emoji': 'üßò',
          'type': 'stress',
          'title': 'Estr√©s Bajo',
          'description': 'Manejas bien el estr√©s diario'
        });
      } else if (avgStress >= 7.0) {
        insights.add({
          'emoji': '‚ö†Ô∏è',
          'type': 'stress',
          'title': 'Estr√©s Alto',
          'description': 'Considera t√©cnicas de relajaci√≥n'
        });
      }

      // Insight sobre actividad
      if (totalEntries >= 20) {
        insights.add({
          'emoji': 'üìä',
          'type': 'activity',
          'title': 'Muy Activo',
          'description': 'Has registrado $totalEntries entradas'
        });
      }
    }

    // Insight sobre racha
    if (streakData != null) {
      final currentStreak = streakData['current_streak'] as int? ?? 0;
      if (currentStreak >= 7) {
        insights.add({
          'emoji': 'üî•',
          'type': 'streak',
          'title': 'Racha Impresionante',
          'description': '$currentStreak d√≠as consecutivos'
        });
      }
    }

    return insights;
  }
  // ============================================================================
// presentation/providers/analytics_extensions.dart - NUEVAS FUNCIONALIDADES
// ============================================================================

// M√©todos adicionales para el OptimizedAnalyticsProvider
// Agregar estos m√©todos al provider existente

  /// Predicci√≥n de bienestar para los pr√≥ximos d√≠as basada en patrones
  Map<String, dynamic> getWellbeingPrediction() {
    final basicStats = _analytics['basic_stats'] as Map<String, dynamic>?;
    final moodTrends = _analytics['mood_trends'] as List? ?? [];

    if (basicStats == null || moodTrends.isEmpty) {
      return {
        'prediction': 'neutral',
        'confidence': 0.0,
        'trend': 'stable',
        'recommendation': 'Registra m√°s d√≠as para obtener predicciones',
        'predicted_score': 5.0,
      };
    }

    final avgMood = basicStats['avg_mood'] as double? ?? 5.0;
    final avgEnergy = basicStats['avg_energy'] as double? ?? 5.0;
    final avgStress = basicStats['avg_stress'] as double? ?? 5.0;

    // An√°lisis de tendencia de los √∫ltimos 7 d√≠as
    final recentTrends = moodTrends.take(7).toList();
    double trendDirection = 0.0;

    if (recentTrends.length >= 3) {
      final recent = recentTrends.take(3).map((t) => t['mood_score'] as double? ?? 5.0).toList();
      final older = recentTrends.skip(3).map((t) => t['mood_score'] as double? ?? 5.0).toList();

      if (older.isNotEmpty) {
        final recentAvg = recent.reduce((a, b) => a + b) / recent.length;
        final olderAvg = older.reduce((a, b) => a + b) / older.length;
        trendDirection = recentAvg - olderAvg;
      }
    }

    // Predicci√≥n basada en patrones
    final predictedScore = (avgMood + (trendDirection * 0.5)).clamp(1.0, 10.0);
    final confidence = (recentTrends.length / 7.0).clamp(0.0, 1.0);

    String prediction, trend, recommendation;

    if (trendDirection > 0.5) {
      prediction = 'improving';
      trend = 'ascending';
      recommendation = 'Contin√∫a con tus h√°bitos actuales';
    } else if (trendDirection < -0.5) {
      prediction = 'declining';
      trend = 'descending';
      recommendation = 'Considera dedicar tiempo al autocuidado';
    } else {
      prediction = 'stable';
      trend = 'stable';
      recommendation = 'Mant√©n el equilibrio actual';
    }

    return {
      'prediction': prediction,
      'confidence': confidence,
      'trend': trend,
      'recommendation': recommendation,
      'predicted_score': predictedScore,
      'current_score': avgMood,
    };
  }

  /// An√°lisis de h√°bitos saludables basado en registros
  Map<String, dynamic> getHealthyHabitsAnalysis() {
    final basicStats = _analytics['basic_stats'] as Map<String, dynamic>?;

    if (basicStats == null) {
      return {
        'sleep_score': 0.0,
        'exercise_score': 0.0,
        'meditation_score': 0.0,
        'social_score': 0.0,
        'overall_score': 0.0,
        'recommendations': ['Registra m√°s d√≠as para an√°lisis de h√°bitos'],
      };
    }

    final avgSleep = basicStats['avg_sleep_quality'] as double? ?? 5.0;
    final avgPhysical = basicStats['avg_physical_activity'] as double? ?? 5.0;
    final avgMeditation = basicStats['avg_meditation_minutes'] as double? ?? 0.0;
    final avgSocial = basicStats['avg_social_interaction'] as double? ?? 5.0;

    // Normalizar puntuaciones a 0-1
    final sleepScore = (avgSleep / 10.0).clamp(0.0, 1.0);
    final exerciseScore = (avgPhysical / 10.0).clamp(0.0, 1.0);
    final meditationScore = (avgMeditation / 30.0).clamp(0.0, 1.0); // 30 min = m√°ximo
    final socialScore = (avgSocial / 10.0).clamp(0.0, 1.0);

    final overallScore = (sleepScore + exerciseScore + meditationScore + socialScore) / 4.0;

    final recommendations = <String>[];

    if (sleepScore < 0.6) recommendations.add('Mejora tu calidad de sue√±o');
    if (exerciseScore < 0.6) recommendations.add('Incrementa tu actividad f√≠sica');
    if (meditationScore < 0.3) recommendations.add('Prueba la meditaci√≥n diaria');
    if (socialScore < 0.6) recommendations.add('Conecta m√°s con otros');

    if (recommendations.isEmpty) {
      recommendations.add('¬°Excelente! Mant√©n tus h√°bitos saludables');
    }

    return {
      'sleep_score': sleepScore,
      'exercise_score': exerciseScore,
      'meditation_score': meditationScore,
      'social_score': socialScore,
      'overall_score': overallScore,
      'recommendations': recommendations,
    };
  }

  /// Comparaci√≥n con semanas anteriores
  Map<String, dynamic> getWeeklyComparison() {
    final moodTrends = _analytics['mood_trends'] as List? ?? [];

    if (moodTrends.length < 14) {
      return {
        'has_data': false,
        'message': 'Necesitas al menos 2 semanas de datos',
        'mood_change': 0.0,
        'energy_change': 0.0,
        'stress_change': 0.0,
      };
    }

    // √öltima semana vs anterior
    final thisWeek = moodTrends.take(7).toList();
    final lastWeek = moodTrends.skip(7).take(7).toList();

    final thisWeekMood = thisWeek.map((t) => t['mood_score'] as double? ?? 5.0)
        .reduce((a, b) => a + b) / thisWeek.length;
    final lastWeekMood = lastWeek.map((t) => t['mood_score'] as double? ?? 5.0)
        .reduce((a, b) => a + b) / lastWeek.length;

    final thisWeekEnergy = thisWeek.map((t) => t['energy_level'] as double? ?? 5.0)
        .reduce((a, b) => a + b) / thisWeek.length;
    final lastWeekEnergy = lastWeek.map((t) => t['energy_level'] as double? ?? 5.0)
        .reduce((a, b) => a + b) / lastWeek.length;

    final thisWeekStress = thisWeek.map((t) => t['stress_level'] as double? ?? 5.0)
        .reduce((a, b) => a + b) / thisWeek.length;
    final lastWeekStress = lastWeek.map((t) => t['stress_level'] as double? ?? 5.0)
        .reduce((a, b) => a + b) / lastWeek.length;

    return {
      'has_data': true,
      'mood_change': thisWeekMood - lastWeekMood,
      'energy_change': thisWeekEnergy - lastWeekEnergy,
      'stress_change': thisWeekStress - lastWeekStress,
      'current_week': {
        'mood': thisWeekMood,
        'energy': thisWeekEnergy,
        'stress': thisWeekStress,
      },
      'previous_week': {
        'mood': lastWeekMood,
        'energy': lastWeekEnergy,
        'stress': lastWeekStress,
      },
    };
  }

  /// Recomendaciones personalizadas basadas en IA
  List<Map<String, dynamic>> getPersonalizedRecommendations() {
    final recommendations = <Map<String, dynamic>>[];

    final wellbeingStatus = getWellbeingStatus();
    final habitsAnalysis = getHealthyHabitsAnalysis();
    final stressAlerts = getStressAlerts();
    final prediction = getWellbeingPrediction();

    final currentScore = wellbeingStatus['score'] as int? ?? 5;
    final stressLevel = stressAlerts['level'] as String? ?? 'sin datos';
    final trend = prediction['trend'] as String? ?? 'stable';

    // Recomendaciones basadas en estr√©s
    if (stressLevel == 'alto') {
      recommendations.add({
        'icon': 'üßò‚Äç‚ôÄÔ∏è',
        'title': 'Sesi√≥n de Mindfulness',
        'description': 'Dedica 10 minutos a la meditaci√≥n',
        'type': 'stress_relief',
        'priority': 'high',
        'action': 'meditate',
        'estimated_time': '10 min',
      });
    }

    // Recomendaciones basadas en h√°bitos
    final sleepScore = habitsAnalysis['sleep_score'] as double? ?? 0.5;
    if (sleepScore < 0.6) {
      recommendations.add({
        'icon': 'üò¥',
        'title': 'Rutina de Sue√±o',
        'description': 'Establece una hora fija para dormir',
        'type': 'sleep',
        'priority': 'medium',
        'action': 'plan_sleep',
        'estimated_time': '5 min',
      });
    }

    // Recomendaciones basadas en tendencia
    if (trend == 'descending') {
      recommendations.add({
        'icon': 'üå±',
        'title': 'Momento de Gratitud',
        'description': 'Escribe 3 cosas por las que est√°s agradecido',
        'type': 'mood_boost',
        'priority': 'medium',
        'action': 'gratitude',
        'estimated_time': '5 min',
      });
    }

    // Recomendaci√≥n de ejercicio
    final exerciseScore = habitsAnalysis['exercise_score'] as double? ?? 0.5;
    if (exerciseScore < 0.6) {
      recommendations.add({
        'icon': 'üèÉ‚Äç‚ôÄÔ∏è',
        'title': 'Actividad F√≠sica',
        'description': 'Una caminata corta puede mejorar tu energ√≠a',
        'type': 'exercise',
        'priority': 'low',
        'action': 'walk',
        'estimated_time': '15 min',
      });
    }

    // Recomendaci√≥n social
    final socialScore = habitsAnalysis['social_score'] as double? ?? 0.5;
    if (socialScore < 0.5) {
      recommendations.add({
        'icon': 'üë•',
        'title': 'Conexi√≥n Social',
        'description': 'Llama a un amigo o familiar',
        'type': 'social',
        'priority': 'low',
        'action': 'connect',
        'estimated_time': '10 min',
      });
    }

    // Ordenar por prioridad
    recommendations.sort((a, b) {
      final priorityOrder = {'high': 0, 'medium': 1, 'low': 2};
      return priorityOrder[a['priority']]!.compareTo(priorityOrder[b['priority']]!);
    });

    return recommendations.take(3).toList(); // M√°ximo 3 recomendaciones
  }

  /// Calendario de estados de √°nimo para los √∫ltimos d√≠as
  List<Map<String, dynamic>> getMoodCalendarData() {
    final moodTrends = _analytics['mood_trends'] as List? ?? [];

    return moodTrends.take(30).map((trend) {
      final mood = trend['mood_score'] as double? ?? 5.0;
      final energy = trend['energy_level'] as double? ?? 5.0;
      final stress = trend['stress_level'] as double? ?? 5.0;
      final date = DateTime.tryParse(trend['entry_date'] as String? ?? '') ?? DateTime.now();

      String emoji;
      Color color;

      final avgScore = (mood + energy + (10 - stress)) / 3;

      if (avgScore >= 7) {
        emoji = 'üòä';
        color = Colors.green;
      } else if (avgScore >= 5) {
        emoji = 'üòê';
        color = Colors.blue;
      } else {
        emoji = 'üòî';
        color = Colors.orange;
      }

      return {
        'date': date,
        'mood': mood,
        'energy': energy,
        'stress': stress,
        'avg_score': avgScore,
        'emoji': emoji,
        'color': color,
      };
    }).toList();
  }

  /// Challenges personalizados basados en datos del usuario
  List<Map<String, dynamic>> getPersonalizedChallenges() {
    final challenges = <Map<String, dynamic>>[];

    final streakData = getStreakData();
    final habitsAnalysis = getHealthyHabitsAnalysis();
    final currentStreak = streakData['current'] as int? ?? 0;

    // Challenge de racha
    if (currentStreak < 7) {
      challenges.add({
        'id': 'weekly_streak',
        'title': 'Racha Semanal',
        'description': 'Completa 7 d√≠as seguidos de registro',
        'icon': 'üî•',
        'progress': currentStreak / 7.0,
        'target': 7,
        'current': currentStreak,
        'type': 'streak',
        'reward': '¬°Insignia de Constancia!',
      });
    }

    // Challenge de meditaci√≥n
    final meditationScore = habitsAnalysis['meditation_score'] as double? ?? 0.0;
    if (meditationScore < 0.5) {
      challenges.add({
        'id': 'meditation_week',
        'title': 'Semana Mindful',
        'description': 'Medita 5 minutos por 5 d√≠as',
        'icon': 'üßò‚Äç‚ôÄÔ∏è',
        'progress': meditationScore * 2, // Convertir a progreso del challenge
        'target': 5,
        'current': (meditationScore * 5).round(),
        'type': 'meditation',
        'reward': '¬°Maestro del Mindfulness!',
      });
    }

    // Challenge de actividad f√≠sica
    final exerciseScore = habitsAnalysis['exercise_score'] as double? ?? 0.0;
    if (exerciseScore < 0.7) {
      challenges.add({
        'id': 'active_week',
        'title': 'Semana Activa',
        'description': 'Haz ejercicio 4 d√≠as esta semana',
        'icon': 'üí™',
        'progress': exerciseScore,
        'target': 4,
        'current': (exerciseScore * 4).round(),
        'type': 'exercise',
        'reward': '¬°Guerrero del Fitness!',
      });
    }

    return challenges.take(2).toList(); // M√°ximo 2 challenges activos
  }


  /// Obtener siguiente logro (basado en datos reales)
  Map<String, dynamic>? getNextAchievementToUnlock() {
    final basicStats = _analytics['basic_stats'] as Map<String, dynamic>?;
    final streakData = _analytics['streak_data'] as Map<String, dynamic>?;

    if (basicStats == null) return null;

    final currentStreak = streakData?['current_streak'] as int? ?? 0;
    final totalEntries = basicStats['total_entries'] as int? ?? 0;
    final totalMeditation = basicStats['total_meditation'] as int? ?? 0;
    final totalExercise = basicStats['total_exercise'] as int? ?? 0;

    // Logros basados en rachas
    if (currentStreak < 3) {
      return {
        'emoji': 'üå±',
        'title': 'Primer Paso',
        'description': 'Mant√©n una racha de 3 d√≠as',
        'progress': currentStreak / 3,
        'target': 3,
        'current': currentStreak,
        'type': 'streak'
      };
    } else if (currentStreak < 7) {
      return {
        'emoji': 'üî•',
        'title': 'Una Semana',
        'description': 'Alcanza 7 d√≠as consecutivos',
        'progress': currentStreak / 7,
        'target': 7,
        'current': currentStreak,
        'type': 'streak'
      };
    } else if (currentStreak < 30) {
      return {
        'emoji': 'üíé',
        'title': 'Un Mes Completo',
        'description': 'Logra 30 d√≠as consecutivos',
        'progress': currentStreak / 30,
        'target': 30,
        'current': currentStreak,
        'type': 'streak'
      };
    }

    // Logros basados en entradas
    if (totalEntries < 50) {
      return {
        'emoji': 'üìö',
        'title': 'Medio Centenar',
        'description': 'Completa 50 entradas totales',
        'progress': totalEntries / 50,
        'target': 50,
        'current': totalEntries,
        'type': 'entries'
      };
    }

    // Logros basados en meditaci√≥n
    if (totalMeditation < 300) { // 5 horas = 300 minutos
      return {
        'emoji': 'üßò',
        'title': 'Meditador',
        'description': 'Acumula 5 horas de meditaci√≥n',
        'progress': totalMeditation / 300,
        'target': 300,
        'current': totalMeditation,
        'type': 'meditation'
      };
    }

    return {
      'emoji': 'üèÜ',
      'title': 'Maestro del Bienestar',
      'description': '¬°Has alcanzado todos los logros!',
      'progress': 1.0,
      'target': 1,
      'current': 1,
      'type': 'mastery'
    };
  }

  /// Obtener estado de bienestar (basado en datos reales)
  Map<String, dynamic> getWellbeingStatus() {
    final basicStats = _analytics['basic_stats'] as Map<String, dynamic>?;

    if (basicStats == null) {
      return {
        'score': 0,
        'level': 'Sin datos',
        'emoji': 'üìä',
        'message': 'Registra algunos d√≠as para ver tu estado',
      };
    }

    final avgMood = basicStats['avg_mood'] as double? ?? 5.0;
    final avgEnergy = basicStats['avg_energy'] as double? ?? 5.0;
    final avgStress = basicStats['avg_stress'] as double? ?? 5.0;

    // Calcular score combinado (mood + energ√≠a - estr√©s)
    final combinedScore = (avgMood + avgEnergy + (10 - avgStress)) / 3;
    final score = combinedScore.round();

    String level, emoji, message;

    if (score >= 8) {
      level = 'Excelente';
      emoji = 'üåü';
      message = '¬°Tu bienestar est√° en un nivel excepcional!';
    } else if (score >= 6) {
      level = 'Bueno';
      emoji = 'üòä';
      message = 'Mantienes un buen equilibrio general';
    } else if (score >= 4) {
      level = 'Regular';
      emoji = 'üå±';
      message = 'Hay espacio para mejorar tu bienestar';
    } else {
      level = 'Necesita Atenci√≥n';
      emoji = 'üî•';
      message = 'Enf√≥cate en cuidar tu bienestar';
    }

    return {
      'score': score,
      'level': level,
      'emoji': emoji,
      'message': message,
      'mood': avgMood,
      'energy': avgEnergy,
      'stress': avgStress,
    };
  }

  /// Obtener datos para gr√°fico de mood (basado en datos reales)
  List<Map<String, dynamic>> getMoodChartData() {
    final moodTrends = _analytics['mood_trends'] as List? ?? [];

    return moodTrends.map((trend) {
      return {
        'date': trend['entry_date'] ?? DateTime.now().toIso8601String(),
        'mood': trend['mood_score'] ?? 5.0,
        'energy': trend['energy_level'] ?? 5.0,
        'stress': trend['stress_level'] ?? 5.0,
      };
    }).toList();
  }

  /// Obtener datos de racha (basado en datos reales)
  Map<String, dynamic> getStreakData() {
    final streakData = _analytics['streak_data'] as Map<String, dynamic>?;

    return {
      'current': streakData?['current_streak'] ?? 0,
      'longest': streakData?['longest_streak'] ?? 0,
    };
  }

  /// Obtener insights r√°pidos de mood (basado en datos reales)
  Map<String, dynamic> getQuickStatsMoodInsights() {
    final basicStats = _analytics['basic_stats'] as Map<String, dynamic>?;

    if (basicStats == null) {
      return {
        'avg_mood': 0.0,
        'trend_icon': 'üìä',
        'trend_description': 'Sin datos',
        'trend_color': Colors.grey,
      };
    }

    final avgMood = basicStats['avg_mood'] as double? ?? 5.0;

    String trendIcon, trendDescription;
    Color trendColor;

    if (avgMood >= 7) {
      trendIcon = 'üòä';
      trendDescription = 'Excelente';
      trendColor = Colors.green;
    } else if (avgMood >= 5) {
      trendIcon = 'üòê';
      trendDescription = 'Estable';
      trendColor = Colors.blue;
    } else {
      trendIcon = 'üòî';
      trendDescription = 'Bajo';
      trendColor = Colors.orange;
    }

    return {
      'avg_mood': avgMood,
      'trend_icon': trendIcon,
      'trend_description': trendDescription,
      'trend_color': trendColor,
    };
  }

  /// Obtener alertas de estr√©s (basado en datos reales)
  Map<String, dynamic> getStressAlerts() {
    final basicStats = _analytics['basic_stats'] as Map<String, dynamic>?;

    if (basicStats == null) {
      return {
        'requires_attention': false,
        'level': 'sin datos',
        'alert_color': Colors.grey,
        'alert_icon': 'üìä',
        'alert_title': 'Sin datos',
        'recommendations': ['Registra algunos d√≠as para ver alertas'],
      };
    }

    final avgStress = basicStats['avg_stress'] as double? ?? 5.0;

    if (avgStress >= 7) {
      return {
        'requires_attention': true,
        'level': 'alto',
        'alert_color': Colors.red,
        'alert_icon': 'üö®',
        'alert_title': 'Nivel de estr√©s alto',
        'recommendations': [
          'Practica t√©cnicas de respiraci√≥n',
          'Toma descansos regulares',
          'Considera reducir la carga de trabajo'
        ],
      };
    } else if (avgStress >= 5) {
      return {
        'requires_attention': true,
        'level': 'moderado',
        'alert_color': Colors.orange,
        'alert_icon': '‚ö†Ô∏è',
        'alert_title': 'Estr√©s moderado',
        'recommendations': [
          'Organiza mejor tu tiempo',
          'Practica mindfulness',
          'Aseg√∫rate de dormir bien'
        ],
      };
    }

    return {
      'requires_attention': false,
      'level': 'bajo',
      'alert_color': Colors.green,
      'alert_icon': '‚úÖ',
      'alert_title': 'Estr√©s bajo',
      'recommendations': ['Mant√©n tus h√°bitos actuales'],
    };
  }

  /// Obtener resumen del dashboard (basado en datos reales)
  Map<String, dynamic> getDashboardSummary() {
    final basicStats = _analytics['basic_stats'] as Map<String, dynamic>?;
    final streakData = _analytics['streak_data'] as Map<String, dynamic>?;

    if (basicStats == null) {
      return {
        'wellbeing_score': 0,
        'current_streak': 0,
        'total_entries': 0,
        'avg_mood': 0.0,
        'avg_energy': 0.0,
        'avg_stress': 0.0,
        'main_message': 'Comienza registrando tu primer d√≠a',
      };
    }

    final avgMood = basicStats['avg_mood'] as double? ?? 5.0;
    final avgEnergy = basicStats['avg_energy'] as double? ?? 5.0;
    final avgStress = basicStats['avg_stress'] as double? ?? 5.0;
    final totalEntries = basicStats['total_entries'] as int? ?? 0;
    final currentStreak = streakData?['current_streak'] as int? ?? 0;

    // Calcular score de bienestar
    final wellbeingScore = ((avgMood + avgEnergy + (10 - avgStress)) / 3).round();

    String mainMessage;
    if (wellbeingScore >= 8) {
      mainMessage = '¬°Excelente! Tu bienestar est√° en un nivel √≥ptimo';
    } else if (wellbeingScore >= 6) {
      mainMessage = 'Buen progreso. Mant√©n el equilibrio';
    } else if (wellbeingScore >= 4) {
      mainMessage = 'Vas por buen camino. Sigue mejorando';
    } else {
      mainMessage = 'Enf√≥cate en cuidar tu bienestar d√≠a a d√≠a';
    }

    return {
      'wellbeing_score': wellbeingScore,
      'current_streak': currentStreak,
      'total_entries': totalEntries,
      'avg_mood': avgMood,
      'avg_energy': avgEnergy,
      'avg_stress': avgStress,
      'main_message': mainMessage,
    };
  }

  /// Obtener insights de diversidad (simulado por ahora)
  Map<String, dynamic> getQuickStatsDiversityInsights() {
    // Por ahora simulamos, pero se podr√≠a calcular basado en moment_stats
    return {
      'categories_used': 3,
      'max_categories': 5,
      'diversity_score': 0.6,
      'message': 'Explora m√°s categor√≠as',
    };
  }

  /// Obtener recomendaciones prioritarias (basado en datos reales)
  List<Map<String, dynamic>> getPriorityRecommendations() {
    final recommendations = <Map<String, dynamic>>[];
    final basicStats = _analytics['basic_stats'] as Map<String, dynamic>?;

    if (basicStats == null) {
      recommendations.add({
        'emoji': 'üìù',
        'title': 'Comienza a Registrar',
        'description': 'Crea tu primera entrada diaria',
        'priority': 'high',
      });
      return recommendations;
    }

    final avgMood = basicStats['avg_mood'] as double? ?? 5.0;
    final avgEnergy = basicStats['avg_energy'] as double? ?? 5.0;
    final avgStress = basicStats['avg_stress'] as double? ?? 5.0;
    final avgSleep = basicStats['avg_sleep'] as double? ?? 8.0;
    final totalMeditation = basicStats['total_meditation'] as int? ?? 0;

    // Recomendaci√≥n basada en mood bajo
    if (avgMood < 5.0) {
      recommendations.add({
        'emoji': 'üòä',
        'title': 'Mejora tu Estado de √Ånimo',
        'description': 'Dedica tiempo a actividades que disfrutes',
        'priority': 'high',
      });
    }

    // Recomendaci√≥n basada en energ√≠a baja
    if (avgEnergy < 5.0) {
      recommendations.add({
        'emoji': '‚ö°',
        'title': 'Aumenta tu Energ√≠a',
        'description': 'Revisa tu alimentaci√≥n y ejercicio',
        'priority': 'medium',
      });
    }

    // Recomendaci√≥n basada en estr√©s alto
    if (avgStress >= 7.0) {
      recommendations.add({
        'emoji': 'üßò',
        'title': 'Reduce el Estr√©s',
        'description': 'Practica t√©cnicas de relajaci√≥n',
        'priority': 'high',
      });
    }

    // Recomendaci√≥n basada en sue√±o
    if (avgSleep < 7.0) {
      recommendations.add({
        'emoji': 'üò¥',
        'title': 'Mejora tu Sue√±o',
        'description': 'Apunta a 7-8 horas de sue√±o diario',
        'priority': 'medium',
      });
    }

    // Recomendaci√≥n basada en meditaci√≥n
    if (totalMeditation < 60) {
      recommendations.add({
        'emoji': 'üßò‚Äç‚ôÄÔ∏è',
        'title': 'Inicia con Meditaci√≥n',
        'description': 'Comienza con 5 minutos diarios',
        'priority': 'low',
      });
    }

    // Si todo va bien
    if (recommendations.isEmpty) {
      recommendations.add({
        'emoji': 'üéØ',
        'title': 'Mant√©n el Equilibrio',
        'description': 'Contin√∫a con tus excelentes h√°bitos',
        'priority': 'low',
      });
    }

    return recommendations;
  }

  /// Obtener temas dominantes (simulado por ahora)
  List<Map<String, dynamic>> getDominantThemes() {
    // Por ahora retornamos datos simulados
    // Se podr√≠a implementar analizando moment_stats cuando exista
    return [
      {'word': 'trabajo', 'count': 15, 'type': 'neutral', 'emoji': 'üíº'},
      {'word': 'familia', 'count': 12, 'type': 'positive', 'emoji': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶'},
      {'word': 'ejercicio', 'count': 8, 'type': 'positive', 'emoji': 'üèÉ‚Äç‚ôÄÔ∏è'},
      {'word': 'estr√©s', 'count': 6, 'type': 'negative', 'emoji': 'üò∞'},
    ];
  }

  /// Obtener an√°lisis del d√≠a actual (simulado)
  Map<String, dynamic> getCurrentDayAnalysis() {
    return {
      'has_entry': false,
      'message': 'A√∫n no has registrado hoy',
      'recommendation': 'Toma un momento para reflexionar sobre tu d√≠a',
    };
  }

  /// Obtener top recomendaciones
  List<Map<String, dynamic>> getTopRecommendations() {
    return getPriorityRecommendations().take(3).toList();
  }
  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setError(String error) {
    _errorMessage = error;
    notifyListeners();
  }

  void _clearError() {
    _errorMessage = null;
    notifyListeners();
  }
}