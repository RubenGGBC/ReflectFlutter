// ============================================================================
// data/services/notification_service.dart - VERSI√ìN CORREGIDA PARA WINDOWS
// ============================================================================

import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;
import 'package:permission_handler/permission_handler.dart';
import 'package:logger/logger.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;


class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  final FlutterLocalNotificationsPlugin _notificationsPlugin = FlutterLocalNotificationsPlugin();
  final Logger _logger = Logger();
  final Random _random = Random();

  bool _isInitialized = false;
  int _notificationIdCounter = 1000;

  // IDs fijos para diferentes tipos
  static const int dailyReviewNotificationId = 1;
  static const int randomCheckInBaseId = 100;

  /// Inicializar el servicio de notificaciones
  Future<bool> initialize() async {
    if (_isInitialized) return true;

    try {
      _logger.i('üîî Inicializando servicio de notificaciones');

      // Solo inicializar en plataformas m√≥viles
      if (!_isMobilePlatform()) {
        _logger.i('üì± Notificaciones no disponibles en esta plataforma');
        _isInitialized = true;
        return true;
      }

      // Inicializar timezone
      tz.initializeTimeZones();

      // Configuraci√≥n para Android
      const AndroidInitializationSettings androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');

      // Configuraci√≥n para iOS
      const DarwinInitializationSettings iosSettings = DarwinInitializationSettings(
        requestSoundPermission: true,
        requestBadgePermission: true,
        requestAlertPermission: true,
        defaultPresentAlert: true,
        defaultPresentSound: true,
        defaultPresentBadge: true,
      );

      const InitializationSettings initSettings = InitializationSettings(
        android: androidSettings,
        iOS: iosSettings,
      );

      // Inicializar plugin
      final bool? result = await _notificationsPlugin.initialize(
        initSettings,
        onDidReceiveNotificationResponse: _onNotificationResponse,
      );

      if (result == true) {
        _isInitialized = true;
        _logger.i('‚úÖ Notificaciones inicializadas correctamente');

        // Configurar notificaciones despu√©s de inicializar
        await _setupDailyNotifications();

        return true;
      } else {
        _logger.e('‚ùå Error inicializando notificaciones');
        return false;
      }

    } catch (e) {
      _logger.e('‚ùå Error en inicializaci√≥n de notificaciones: $e');
      _isInitialized = true; // Marcar como inicializado para evitar errores
      return false;
    }
  }

  /// Verificar si es plataforma m√≥vil
  bool _isMobilePlatform() {
    return defaultTargetPlatform == TargetPlatform.android ||
        defaultTargetPlatform == TargetPlatform.iOS;
  }

  /// Solicitar permisos de notificaciones
  Future<bool> requestPermissions() async {
    if (!_isMobilePlatform()) {
      _logger.i('üì± Permisos no necesarios en esta plataforma');
      return true;
    }

    try {
      if (defaultTargetPlatform == TargetPlatform.android) {
        final status = await Permission.notification.request();
        return status == PermissionStatus.granted;
      } else if (defaultTargetPlatform == TargetPlatform.iOS) {
        final bool? result = await _notificationsPlugin
            .resolvePlatformSpecificImplementation<IOSFlutterLocalNotificationsPlugin>()
            ?.requestPermissions(
          alert: true,
          badge: true,
          sound: true,
        );
        return result ?? false;
      }
      return true;
    } catch (e) {
      _logger.e('‚ùå Error solicitando permisos: $e');
      return false;
    }
  }

  /// Configurar todas las notificaciones diarias
  Future<void> _setupDailyNotifications() async {
    if (!_isMobilePlatform()) return;

    try {
      // Cancelar notificaciones existentes
      await cancelAllNotifications();

      // Configurar notificaci√≥n nocturna (obligatoria a las 22:30)
      await _scheduleNightlyReviewReminder();

      // Configurar recordatorios aleatorios del d√≠a
      await _scheduleRandomDayCheckIns();

      _logger.i('üîî Notificaciones diarias configuradas');
    } catch (e) {
      _logger.e('‚ùå Error configurando notificaciones diarias: $e');
    }
  }


  Future<void> _scheduleNightlyReviewReminder() async {
    try {
      final now = DateTime.now();
      var scheduledDate = DateTime(now.year, now.month, now.day, 22, 30);

      // Si ya pas√≥ la hora, programar para ma√±ana
      if (scheduledDate.isBefore(now)) {
        scheduledDate = scheduledDate.add(const Duration(days: 1));
      }

      const androidDetails = AndroidNotificationDetails(
        'daily_review_channel',
        'Revisi√≥n Diaria',
        channelDescription: 'Recordatorio para completar la revisi√≥n del d√≠a',
        importance: Importance.high,
        priority: Priority.high,
        showWhen: true,
        icon: '@mipmap/ic_launcher',
      );

      const iosDetails = DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
      );

      const details = NotificationDetails(
        android: androidDetails,
        iOS: iosDetails,
      );

      // ‚úÖ CORREGIR: Usar zonedSchedule con timezone local correcto
      await _notificationsPlugin.zonedSchedule(
        dailyReviewNotificationId,
        'üåô √öltimo llamado para tu d√≠a zen',
        'üí´ A las 00:00 se guardar√° tu resumen autom√°ticamente. ¬øHas registrado todos tus momentos?',
        tz.TZDateTime(
          tz.local,
          scheduledDate.year,
          scheduledDate.month,
          scheduledDate.day,
          scheduledDate.hour,
          scheduledDate.minute,
        ),
        details,
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        uiLocalNotificationDateInterpretation: UILocalNotificationDateInterpretation.absoluteTime,
        payload: 'nightly_review',
      );

      _logger.i('üåô Notificaci√≥n nocturna programada para ${scheduledDate.hour}:${scheduledDate.minute.toString().padLeft(2, '0')}');

    } catch (e) {
      _logger.e('‚ùå Error programando notificaci√≥n nocturna: $e');
    }
  }
  /// Programar recordatorios aleatorios durante el d√≠a
  Future<void> _scheduleRandomDayCheckIns() async {
    if (!_isMobilePlatform()) return;

    try {
      final now = DateTime.now();

      // Generar 3-5 notificaciones aleatorias por d√≠a
      final numberOfNotifications = 3 + _random.nextInt(3); // 3-5 notificaciones

      for (int i = 0; i < numberOfNotifications; i++) {
        await _scheduleRandomCheckIn(now, i);
      }

      _logger.i('üé≤ $numberOfNotifications recordatorios aleatorios programados');

    } catch (e) {
      _logger.e('‚ùå Error programando recordatorios aleatorios: $e');
    }
  }

  /// Programar una notificaci√≥n aleatoria espec√≠fica
  Future<void> _scheduleRandomCheckIn(DateTime baseDate, int index) async {
    try {
      final timeWindows = [
        {'start': 9, 'end': 11},   // 9:00 - 11:00
        {'start': 12, 'end': 14},  // 12:00 - 14:00
        {'start': 15, 'end': 17},  // 15:00 - 17:00
        {'start': 18, 'end': 20},  // 18:00 - 20:00
      ];

      final window = timeWindows[index % timeWindows.length];
      final hour = (window['start'] as int) + _random.nextInt((window['end'] as int) - (window['start'] as int));
      final minute = _random.nextInt(60);

      var scheduledDate = DateTime(baseDate.year, baseDate.month, baseDate.day, hour, minute);

      if (scheduledDate.isBefore(DateTime.now().add(const Duration(minutes: 5)))) {
        scheduledDate = scheduledDate.add(const Duration(days: 1));
      }

      final messages = _getRandomCheckInMessages();
      final message = messages[_random.nextInt(messages.length)];

      const androidDetails = AndroidNotificationDetails(
        'random_checkin_channel',
        'Momentos Zen',
        channelDescription: 'Recordatorios aleatorios para registrar momentos',
        importance: Importance.defaultImportance,
        priority: Priority.defaultPriority,
        icon: '@mipmap/ic_launcher',
      );

      const iosDetails = DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: false,
        presentSound: true,
      );

      const details = NotificationDetails(
        android: androidDetails,
        iOS: iosDetails,
      );

      final notificationId = randomCheckInBaseId + index;

      // ‚úÖ CORREGIR: Usar zonedSchedule con timezone local correcto
      await _notificationsPlugin.zonedSchedule(
        notificationId,
        message['title']!,
        message['body']!,
        tz.TZDateTime(
          tz.local,
          scheduledDate.year,
          scheduledDate.month,
          scheduledDate.day,
          scheduledDate.hour,
          scheduledDate.minute,
        ),
        details,
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        uiLocalNotificationDateInterpretation: UILocalNotificationDateInterpretation.absoluteTime,
        payload: 'random_checkin',
      );

      _logger.d('üé≤ Recordatorio aleatorio #$index programado: ${scheduledDate.hour}:${scheduledDate.minute.toString().padLeft(2, '0')}');

    } catch (e) {
      _logger.e('‚ùå Error programando recordatorio aleatorio #$index: $e');
    }
  }
  /// Obtener mensajes aleatorios para los check-ins
  List<Map<String, String>> _getRandomCheckInMessages() {
    return [
      {
        'title': 'üå∏ ¬øC√≥mo va tu d√≠a zen?',
        'body': 'T√≥mate un momento para registrar c√≥mo te sientes ahora mismo.',
      },
      {
        'title': '‚ú® Momento de reflexi√≥n',
        'body': '¬øHa pasado algo especial en las √∫ltimas horas? Cu√©ntanos tu momento.',
      },
      {
        'title': 'üßò‚Äç‚ôÄÔ∏è Pausa consciente',
        'body': 'Respira profundo. ¬øQu√© est√° sucediendo en tu mundo interior?',
      },
      {
        'title': 'üåü Check-in zen',
        'body': '¬øHay alg√∫n momento que te gustar√≠a recordar de hoy?',
      },
      {
        'title': 'üí´ Tu bienestar importa',
        'body': 'Registra tu estado actual. Cada momento cuenta en tu viaje zen.',
      },
      {
        'title': 'üéØ Momento presente',
        'body': '¬øC√≥mo est√° siendo este momento de tu d√≠a? Comp√°rtelo con tu yo del futuro.',
      },
      {
        'title': 'üåà Estado emocional',
        'body': 'Tu d√≠a est√° lleno de matices. ¬øCu√°l es el color de este momento?',
      },
      {
        'title': 'üïØÔ∏è Instante de calma',
        'body': 'Detente un segundo. ¬øQu√© est√° pasando en tu coraz√≥n ahora mismo?',
      },
      {
        'title': 'ü¶ã Transformaci√≥n diaria',
        'body': 'Cada hora te transforma. ¬øC√≥mo has cambiado desde esta ma√±ana?',
      },
      {
        'title': 'üåÖ Tu historia personal',
        'body': 'Est√°s escribiendo la historia de hoy. ¬øQu√© cap√≠tulo est√°s viviendo ahora?',
      },
    ];
  }

  /// Manejar respuesta a notificaciones
  void _onNotificationResponse(NotificationResponse response) {
    _logger.d('üîî Notificaci√≥n tocada: ${response.payload} - Acci√≥n: ${response.actionId}');

    final payload = response.payload ?? '';
    final actionId = response.actionId ?? '';

    // TODO: Aqu√≠ puedes manejar las acciones espec√≠ficas
    // Por ejemplo, navegar a pantallas espec√≠ficas o abrir di√°logos

    if (payload == 'nightly_review') {
      _handleNightlyReviewAction(actionId);
    } else if (payload == 'random_checkin') {
      _handleRandomCheckInAction(actionId);
    }
  }

  /// Manejar acciones de la notificaci√≥n nocturna
  void _handleNightlyReviewAction(String actionId) {
    switch (actionId) {
      case 'review_now':
        _logger.i('üåô Usuario eligi√≥ revisar ahora');
        // TODO: Navegar a daily_review_screen
        break;
      case 'add_moments':
        _logger.i('‚ú® Usuario eligi√≥ a√±adir momentos');
        // TODO: Navegar a interactive_moments_screen
        break;
      default:
        _logger.i('üåô Notificaci√≥n nocturna abierta');
        // TODO: Navegar a pantalla principal o daily_review
        break;
    }
  }

  /// Manejar acciones de check-in aleatorio
  void _handleRandomCheckInAction(String actionId) {
    switch (actionId) {
      case 'add_positive':
        _logger.i('‚ú® Usuario eligi√≥ a√±adir momento positivo');
        // TODO: Abrir quick add para momento positivo
        break;
      case 'add_negative':
        _logger.i('‚òÅÔ∏è Usuario eligi√≥ a√±adir momento dif√≠cil');
        // TODO: Abrir quick add para momento dif√≠cil
        break;
      default:
        _logger.i('üé≤ Check-in aleatorio abierto');
        // TODO: Navegar a interactive_moments_screen
        break;
    }
  }

  /// Enviar notificaci√≥n inmediata de prueba
  Future<void> sendTestNotification() async {
    if (!_isMobilePlatform()) {
      _logger.i('üì± Notificaci√≥n de prueba no disponible en esta plataforma');
      return;
    }

    try {
      const androidDetails = AndroidNotificationDetails(
        'test_channel',
        'Pruebas',
        channelDescription: 'Canal para notificaciones de prueba',
        importance: Importance.high,
        priority: Priority.high,
        icon: '@mipmap/ic_launcher',
      );

      const iosDetails = DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
      );

      const details = NotificationDetails(
        android: androidDetails,
        iOS: iosDetails,
      );

      await _notificationsPlugin.show(
        _notificationIdCounter++,
        'üß™ Notificaci√≥n de prueba',
        'ReflectApp est√° configurado correctamente. ¬°Tu sistema zen funciona!',
        details,
        payload: 'test',
      );

      _logger.i('üß™ Notificaci√≥n de prueba enviada');

    } catch (e) {
      _logger.e('‚ùå Error enviando notificaci√≥n de prueba: $e');
    }
  }

  /// Cancelar todas las notificaciones
  Future<void> cancelAllNotifications() async {
    try {
      await _notificationsPlugin.cancelAll();
      _logger.i('üóëÔ∏è Todas las notificaciones canceladas');
    } catch (e) {
      _logger.e('‚ùå Error cancelando notificaciones: $e');
    }
  }

  /// Cancelar notificaci√≥n espec√≠fica
  Future<void> cancelNotification(int id) async {
    try {
      await _notificationsPlugin.cancel(id);
      _logger.d('üóëÔ∏è Notificaci√≥n $id cancelada');
    } catch (e) {
      _logger.e('‚ùå Error cancelando notificaci√≥n $id: $e');
    }
  }

  /// Reconfigurar notificaciones (√∫til para cuando cambian configuraciones)
  Future<void> reconfigureNotifications() async {
    await _setupDailyNotifications();
  }

  /// Obtener notificaciones pendientes
  Future<List<PendingNotificationRequest>> getPendingNotifications() async {
    try {
      return await _notificationsPlugin.pendingNotificationRequests();
    } catch (e) {
      _logger.e('‚ùå Error obteniendo notificaciones pendientes: $e');
      return [];
    }
  }

  /// Verificar si las notificaciones est√°n habilitadas
  Future<bool> areNotificationsEnabled() async {
    if (!_isMobilePlatform()) {
      return true; // En desktop consideramos que est√°n "habilitadas"
    }

    try {
      if (defaultTargetPlatform == TargetPlatform.android) {
        return await Permission.notification.isGranted;
      } else if (defaultTargetPlatform == TargetPlatform.iOS) {
        // Simplificado para evitar errores de API
        return true; // Asumimos que est√°n habilitadas por ahora
      }
      return false;
    } catch (e) {
      _logger.e('‚ùå Error verificando estado de notificaciones: $e');
      return false;
    }
  }

  /// Obtener estad√≠sticas de notificaciones
  Future<Map<String, dynamic>> getNotificationStats() async {
    try {
      final pending = await getPendingNotifications();
      final dailyReview = pending.where((n) => n.id == dailyReviewNotificationId).length;
      final randomCheckins = pending.where((n) => n.id >= randomCheckInBaseId && n.id < randomCheckInBaseId + 10).length;

      return {
        'total_pending': pending.length,
        'daily_review_scheduled': dailyReview > 0,
        'random_checkins_scheduled': randomCheckins,
        'enabled': await areNotificationsEnabled(),
        'initialized': _isInitialized,
        'platform_supported': _isMobilePlatform(),
      };
    } catch (e) {
      _logger.e('‚ùå Error obteniendo estad√≠sticas: $e');
      return {
        'total_pending': 0,
        'daily_review_scheduled': false,
        'random_checkins_scheduled': 0,
        'enabled': _isMobilePlatform(),
        'initialized': _isInitialized,
        'platform_supported': _isMobilePlatform(),
      };
    }
  }
}