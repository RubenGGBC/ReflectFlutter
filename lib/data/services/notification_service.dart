// lib/services/notification_service.dart
// ============================================================================
// SERVICIO DE NOTIFICACIONES LOCALES
// ============================================================================

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;
import 'package:logger/logger.dart';
import 'package:permission_handler/permission_handler.dart';

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  static final FlutterLocalNotificationsPlugin _notifications = FlutterLocalNotificationsPlugin();
  static final Logger _logger = Logger();

  // IDs de notificaciones
  static const int dailyReflectionId = 1;
  static const int eveningCheckInId = 2;
  static const int weeklyReviewId = 3;
  static const int motivationalId = 4;

  // Callback para cuando se toca una notificaci√≥n
  static Function(String?)? onNotificationTap;

  /// Inicializar el servicio de notificaciones
  static Future<void> initialize() async {
    _logger.i('üîî Inicializando servicio de notificaciones...');

    try {
      // Inicializar timezone
      tz.initializeTimeZones();

      // Configuraci√≥n para Android
      const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');

      // Configuraci√≥n para iOS
      const iosSettings = DarwinInitializationSettings(
        requestAlertPermission: true,
        requestBadgePermission: true,
        requestSoundPermission: true,
      );

      const initSettings = InitializationSettings(
        android: androidSettings,
        iOS: iosSettings,
      );

      await _notifications.initialize(
        initSettings,
        onDidReceiveNotificationResponse: _onNotificationResponse,
      );

      // Solicitar permisos
      await _requestPermissions();

      _logger.i('‚úÖ Servicio de notificaciones inicializado');
    } catch (e) {
      _logger.e('‚ùå Error inicializando notificaciones: $e');
    }
  }

  /// Solicitar permisos de notificaciones
  static Future<bool> _requestPermissions() async {
    try {
      // Android 13+ requiere permiso expl√≠cito
      if (await Permission.notification.isDenied) {
        final status = await Permission.notification.request();
        if (status != PermissionStatus.granted) {
          _logger.w('‚ö†Ô∏è Permisos de notificaci√≥n denegados');
          return false;
        }
      }

      // iOS
      final bool? granted = await _notifications
          .resolvePlatformSpecificImplementation<IOSFlutterLocalNotificationsPlugin>()
          ?.requestPermissions(
        alert: true,
        badge: true,
        sound: true,
      );

      _logger.i('‚úÖ Permisos de notificaci√≥n: ${granted ?? true}');
      return granted ?? true;
    } catch (e) {
      _logger.e('‚ùå Error solicitando permisos: $e');
      return false;
    }
  }

  /// Callback cuando se toca una notificaci√≥n
  static void _onNotificationResponse(NotificationResponse response) {
    _logger.i('üîî Notificaci√≥n tocada: ${response.payload}');
    if (onNotificationTap != null) {
      onNotificationTap!(response.payload);
    }
  }

  /// Programar notificaci√≥n diaria de reflexi√≥n
  static Future<void> scheduleDailyReflection({
    int hour = 20, // 8 PM por defecto
    int minute = 0,
    bool enabled = true,
  }) async {
    if (!enabled) {
      await cancelNotification(dailyReflectionId);
      return;
    }

    try {
      final messages = _getDailyReflectionMessages();
      final randomMessage = messages[Random().nextInt(messages.length)];

      await _notifications.zonedSchedule(
        dailyReflectionId,
        'üåô ¬øC√≥mo fue tu d√≠a?',
        randomMessage,
        _nextInstanceOfTime(hour, minute),
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'daily_reflection',
            'Reflexi√≥n Diaria',
            channelDescription: 'Recordatorios para reflexionar sobre tu d√≠a',
            importance: Importance.high,
            priority: Priority.high,
            icon: '@mipmap/ic_launcher',
            color: Color(0xFF4ECDC4),
            enableVibration: true,
            playSound: true,
          ),
          iOS: DarwinNotificationDetails(
            sound: 'default',
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
          ),
        ),
        uiLocalNotificationDateInterpretation: UILocalNotificationDateInterpretation.absoluteTime,
        matchDateTimeComponents: DateTimeComponents.time,
        payload: 'daily_reflection',
      );

      _logger.i('‚úÖ Notificaci√≥n diaria programada para las $hour:${minute.toString().padLeft(2, '0')}');
    } catch (e) {
      _logger.e('‚ùå Error programando notificaci√≥n diaria: $e');
    }
  }

  /// Programar check-in vespertino
  static Future<void> scheduleEveningCheckIn({
    int hour = 21, // 9 PM por defecto
    int minute = 30,
    bool enabled = true,
  }) async {
    if (!enabled) {
      await cancelNotification(eveningCheckInId);
      return;
    }

    try {
      final messages = _getEveningCheckInMessages();
      final randomMessage = messages[Random().nextInt(messages.length)];

      await _notifications.zonedSchedule(
        eveningCheckInId,
        'üåü Momento de reflexi√≥n',
        randomMessage,
        _nextInstanceOfTime(hour, minute),
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'evening_checkin',
            'Check-in Vespertino',
            channelDescription: 'Recordatorios vespertinos para el bienestar',
            importance: Importance.defaultImportance,
            priority: Priority.defaultPriority,
            icon: '@mipmap/ic_launcher',
            color: Color(0xFF9B59B6),
            enableVibration: true,
          ),
          iOS: DarwinNotificationDetails(
            sound: 'default',
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
          ),
        ),
        uiLocalNotificationDateInterpretation: UILocalNotificationDateInterpretation.absoluteTime,
        matchDateTimeComponents: DateTimeComponents.time,
        payload: 'evening_checkin',
      );

      _logger.i('‚úÖ Check-in vespertino programado para las $hour:${minute.toString().padLeft(2, '0')}');
    } catch (e) {
      _logger.e('‚ùå Error programando check-in vespertino: $e');
    }
  }

  /// Programar recordatorio semanal
  static Future<void> scheduleWeeklyReview({
    int weekday = 7, // Domingo
    int hour = 19, // 7 PM
    int minute = 0,
    bool enabled = true,
  }) async {
    if (!enabled) {
      await cancelNotification(weeklyReviewId);
      return;
    }

    try {
      await _notifications.zonedSchedule(
        weeklyReviewId,
        'üìä Revisi√≥n Semanal',
        '¬°Es momento de revisar tu progreso de la semana!',
        _nextInstanceOfWeekday(weekday, hour, minute),
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'weekly_review',
            'Revisi√≥n Semanal',
            channelDescription: 'Recordatorios semanales para revisar progreso',
            importance: Importance.high,
            priority: Priority.high,
            icon: '@mipmap/ic_launcher',
            color: Color(0xFF45B7D1),
            enableVibration: true,
          ),
          iOS: DarwinNotificationDetails(
            sound: 'default',
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
          ),
        ),
        uiLocalNotificationDateInterpretation: UILocalNotificationDateInterpretation.absoluteTime,
        matchDateTimeComponents: DateTimeComponents.dayOfWeekAndTime,
        payload: 'weekly_review',
      );

      _logger.i('‚úÖ Revisi√≥n semanal programada para los domingos a las $hour:${minute.toString().padLeft(2, '0')}');
    } catch (e) {
      _logger.e('‚ùå Error programando revisi√≥n semanal: $e');
    }
  }

  /// Enviar notificaci√≥n motivacional instant√°nea
  static Future<void> sendMotivationalNotification() async {
    try {
      final messages = _getMotivationalMessages();
      final randomMessage = messages[Random().nextInt(messages.length)];

      await _notifications.show(
        motivationalId,
        'üí™ ¬°T√∫ puedes!',
        randomMessage,
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'motivational',
            'Mensajes Motivacionales',
            channelDescription: 'Mensajes de motivaci√≥n y √°nimo',
            importance: Importance.defaultImportance,
            priority: Priority.defaultPriority,
            icon: '@mipmap/ic_launcher',
            color: Color(0xFFFFD700),
          ),
          iOS: DarwinNotificationDetails(
            sound: 'default',
            presentAlert: true,
            presentBadge: false,
            presentSound: true,
          ),
        ),
        payload: 'motivational',
      );

      _logger.i('‚úÖ Notificaci√≥n motivacional enviada');
    } catch (e) {
      _logger.e('‚ùå Error enviando notificaci√≥n motivacional: $e');
    }
  }

  /// Notificaci√≥n personalizada
  static Future<void> sendCustomNotification({
    required String title,
    required String body,
    String? payload,
    int? id,
  }) async {
    try {
      await _notifications.show(
        id ?? DateTime.now().millisecondsSinceEpoch ~/ 1000,
        title,
        body,
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'custom',
            'Notificaciones Personalizadas',
            channelDescription: 'Notificaciones personalizadas de la app',
            importance: Importance.defaultImportance,
            priority: Priority.defaultPriority,
            icon: '@mipmap/ic_launcher',
            color: Color(0xFF4ECDC4),
          ),
          iOS: DarwinNotificationDetails(
            sound: 'default',
            presentAlert: true,
            presentBadge: false,
            presentSound: true,
          ),
        ),
        payload: payload,
      );

      _logger.i('‚úÖ Notificaci√≥n personalizada enviada: $title');
    } catch (e) {
      _logger.e('‚ùå Error enviando notificaci√≥n personalizada: $e');
    }
  }

  /// Cancelar una notificaci√≥n espec√≠fica
  static Future<void> cancelNotification(int id) async {
    try {
      await _notifications.cancel(id);
      _logger.i('‚úÖ Notificaci√≥n $id cancelada');
    } catch (e) {
      _logger.e('‚ùå Error cancelando notificaci√≥n $id: $e');
    }
  }

  /// Cancelar todas las notificaciones
  static Future<void> cancelAllNotifications() async {
    try {
      await _notifications.cancelAll();
      _logger.i('‚úÖ Todas las notificaciones canceladas');
    } catch (e) {
      _logger.e('‚ùå Error cancelando todas las notificaciones: $e');
    }
  }

  /// Obtener notificaciones pendientes
  static Future<List<PendingNotificationRequest>> getPendingNotifications() async {
    try {
      return await _notifications.pendingNotificationRequests();
    } catch (e) {
      _logger.e('‚ùå Error obteniendo notificaciones pendientes: $e');
      return [];
    }
  }

  /// Verificar si las notificaciones est√°n habilitadas
  static Future<bool> areNotificationsEnabled() async {
    try {
      final status = await Permission.notification.status;
      return status == PermissionStatus.granted;
    } catch (e) {
      _logger.e('‚ùå Error verificando estado de notificaciones: $e');
      return false;
    }
  }

  // ============================================================================
  // M√âTODOS PRIVADOS
  // ============================================================================

  /// Calcular pr√≥xima instancia de una hora espec√≠fica
  static tz.TZDateTime _nextInstanceOfTime(int hour, int minute) {
    final now = tz.TZDateTime.now(tz.local);
    tz.TZDateTime scheduledDate = tz.TZDateTime(tz.local, now.year, now.month, now.day, hour, minute);

    if (scheduledDate.isBefore(now)) {
      scheduledDate = scheduledDate.add(const Duration(days: 1));
    }

    return scheduledDate;
  }

  /// Calcular pr√≥xima instancia de un d√≠a de la semana espec√≠fico
  static tz.TZDateTime _nextInstanceOfWeekday(int weekday, int hour, int minute) {
    final now = tz.TZDateTime.now(tz.local);
    tz.TZDateTime scheduledDate = tz.TZDateTime(tz.local, now.year, now.month, now.day, hour, minute);

    while (scheduledDate.weekday != weekday || scheduledDate.isBefore(now)) {
      scheduledDate = scheduledDate.add(const Duration(days: 1));
    }

    return scheduledDate;
  }

  /// Mensajes para reflexi√≥n diaria
  static List<String> _getDailyReflectionMessages() {
    return [
      'T√≥mate unos minutos para reflexionar sobre tu d√≠a üåÖ',
      '¬øQu√© fue lo mejor de tu d√≠a hoy? ‚ú®',
      'Es momento de registrar tus pensamientos del d√≠a üìù',
      '¬øC√≥mo te sientes al final de este d√≠a? üòä',
      'Reflexiona sobre los momentos especiales de hoy üåü',
      '¬øQu√© aprendiste hoy sobre ti mismo? ü§î',
      'Comparte tus emociones del d√≠a conmigo üí≠',
      '¬øHubo algo que te hizo sonre√≠r hoy? üòÑ',
      'Es hora de hacer tu reflexi√≥n diaria üßò‚Äç‚ôÄÔ∏è',
      '¬øQu√© te gustar√≠a mejorar ma√±ana? üå±',
    ];
  }

  /// Mensajes para check-in vespertino
  static List<String> _getEveningCheckInMessages() {
    return [
      '¬øC√≥mo est√° tu energ√≠a al finalizar el d√≠a? ‚ö°',
      'Registra un momento positivo de hoy üåà',
      '¬øTe sientes satisfecho con tu d√≠a? üí´',
      'Comparte algo por lo que te sientes agradecido üôè',
      '¬øQu√© emoci√≥n predomin√≥ en tu d√≠a? üé≠',
      'Reflexiona sobre tu bienestar de hoy üíö',
      '¬øC√≥mo fue tu nivel de estr√©s hoy? üòå',
      'Comparte un peque√±o logro del d√≠a üèÜ',
      '¬øTe cuidaste bien hoy? üíÜ‚Äç‚ôÄÔ∏è',
      'Prep√°rate para un buen descanso üåô',
    ];
  }

  /// Mensajes motivacionales
  static List<String> _getMotivationalMessages() {
    return [
      'Cada d√≠a es una nueva oportunidad para crecer üå±',
      'Tu bienestar mental es una prioridad üíö',
      'Peque√±os pasos llevan a grandes cambios ‚ú®',
      'Eres m√°s fuerte de lo que piensas üí™',
      'La reflexi√≥n es el camino hacia el autoconocimiento üßò‚Äç‚ôÄÔ∏è',
      'Cada momento de autorreflexi√≥n cuenta üåü',
      'Tu crecimiento personal importa üìà',
      'Est√° bien sentir lo que sientes ü§ó',
      'Eres capaz de superar cualquier desaf√≠o üöÄ',
      'La constancia es la clave del progreso üîë',
    ];
  }
}