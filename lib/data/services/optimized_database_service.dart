// lib/data/services/optimized_database_service.dart - VERSI√ìN FINAL CON CORRECCI√ìN DE DUPLICADOS Y NUEVOS M√âTODOS
// =======================================================================================
// SERVICIO DE BASE DE DATOS OPTIMIZADO PARA APK CON ANALYTICS AVANZADOS
// =======================================================================================

import 'dart:convert';
import 'dart:io';
import 'dart:math' as math;
import 'package:crypto/crypto.dart';
import 'package:flutter/material.dart';
import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'package:sqflite/sqflite.dart';
import 'package:logger/logger.dart';

// Aseg√∫rate de que la ruta de importaci√≥n sea correcta para tu proyecto.
import '../models/goal_model.dart';
import '../models/optimized_models.dart';

class OptimizedDatabaseService {
  static const String _databaseName = 'reflect_optimized_v2.db';
  static const int _databaseVersion = 8;

  static Database? _database;
  static final OptimizedDatabaseService _instance = OptimizedDatabaseService
      ._internal();

  final Logger _logger = Logger();

  factory OptimizedDatabaseService() => _instance;

  OptimizedDatabaseService._internal();

  Future<Database> get database async {
    _database ??= await _initDatabase();
    return _database!;
  }

  // ============================================================================
  // INICIALIZACI√ìN MEJORADA PARA APK
  // ============================================================================

  Future<Database> _initDatabase() async {
    _logger.i('üóÑÔ∏è Inicializando base de datos optimizada para APK');

    // Try multiple database paths for better compatibility
    final possiblePaths = await _getDatabasePaths();
    
    for (final path in possiblePaths) {
      try {
        debugPrint('üìÅ Intentando ruta de base de datos: $path');
        
        final db = await openDatabase(
          path,
          version: _databaseVersion,
          onCreate: _createOptimizedSchema,
          onUpgrade: _upgradeSchema,
          onConfigure: _configureDatabase,
          singleInstance: true,
        );
        
        // Test database write capability
        await _testDatabaseWrite(db);
        
        _logger.i('‚úÖ Base de datos inicializada exitosamente en: $path');
        return db;
        
      } catch (e) {
        _logger.w('‚ö†Ô∏è Error en ruta $path: $e');
        continue;
      }
    }
    
    // If all paths fail, throw error
    throw Exception('‚ùå No se pudo inicializar la base de datos en ninguna ruta');
  }
  
  Future<List<String>> _getDatabasePaths() async {
    final paths = <String>[];
    
    try {
      // Primary path: Application documents directory
      final documentsDir = await getApplicationDocumentsDirectory();
      paths.add(join(documentsDir.path, _databaseName));
    } catch (e) {
      _logger.w('‚ö†Ô∏è Error obteniendo documents directory: $e');
    }
    
    try {
      // Secondary path: Application support directory
      final supportDir = await getApplicationSupportDirectory();
      paths.add(join(supportDir.path, _databaseName));
    } catch (e) {
      _logger.w('‚ö†Ô∏è Error obteniendo support directory: $e');
    }
    
    try {
      // Last resort: Internal storage (Android specific)
      if (Platform.isAndroid) {
        final internalPath = '/data/data/${Platform.environment['PACKAGE_NAME'] ?? 'com.example.reflect'}/databases';
        paths.add(join(internalPath, _databaseName));
      }
    } catch (e) {
      _logger.w('‚ö†Ô∏è Error obteniendo internal directory: $e');
    }
    
    return paths;
  }
  
  Future<void> _testDatabaseWrite(Database db) async {
    try {
      // Test if we can write to the database
      await db.execute('CREATE TABLE IF NOT EXISTS test_table (id INTEGER PRIMARY KEY)');
      await db.insert('test_table', {'id': 1});
      await db.delete('test_table', where: 'id = ?', whereArgs: [1]);
      await db.execute('DROP TABLE IF EXISTS test_table');
    } catch (e) {
      throw Exception('Database write test failed: $e');
    }
  }

  Future<void> _configureDatabase(Database db) async {
    try {
      // ‚úÖ CONFIGURACIONES SEGURAS PARA APK
      await db.execute('PRAGMA foreign_keys = ON');
      
      // Try WAL mode first, fallback to DELETE mode if it fails
      try {
        await db.execute('PRAGMA journal_mode = WAL');
        _logger.d('‚úÖ WAL mode enabled');
      } catch (walError) {
        _logger.w('‚ö†Ô∏è WAL mode failed, using DELETE mode: $walError');
        await db.execute('PRAGMA journal_mode = DELETE');
      }
      
      await db.execute(
          'PRAGMA cache_size = -1000'); // 1MB cache (reducido para APK)
      await db.execute('PRAGMA temp_store = MEMORY');
      
      // Use FULL synchronization for mobile devices to ensure data persistence
      await db.execute('PRAGMA synchronous = FULL');
      
      // Set busy timeout for better concurrency handling
      await db.execute('PRAGMA busy_timeout = 30000'); // 30 seconds

      _logger.d('‚úÖ Base de datos configurada para APK');
    } catch (e) {
      _logger.w('‚ö†Ô∏è Advertencia en configuraci√≥n de BD: $e');
      // Continuar sin configuraciones avanzadas si fallan
    }
  }

  // ‚úÖ ESQUEMA M√çNIMO PARA FALLBACK
  Future<void> _createMinimalSchema(Database db) async {
    await db.execute('''
      CREATE TABLE users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE NOT NULL,
        password_hash TEXT NOT NULL,
        name TEXT NOT NULL,
        avatar_emoji TEXT DEFAULT 'üßò‚Äç‚ôÄÔ∏è',
        profile_picture_path TEXT,
        bio TEXT,
        created_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),
        is_active BOOLEAN DEFAULT 1
      )
    ''');

    await db.execute('''
      CREATE TABLE daily_entries (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        entry_date TEXT NOT NULL,
        free_reflection TEXT NOT NULL,
        mood_score INTEGER DEFAULT 5,
        energy_level INTEGER DEFAULT 5,
        stress_level INTEGER DEFAULT 5,
        worth_it INTEGER DEFAULT 1,
        created_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),
        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
        UNIQUE(user_id, entry_date)
      )
    ''');

    await db.execute('''
      CREATE TABLE interactive_moments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        entry_date TEXT NOT NULL,
        emoji TEXT NOT NULL,
        text TEXT NOT NULL,
        type TEXT NOT NULL CHECK (type IN ('positive', 'negative', 'neutral')),
        intensity INTEGER DEFAULT 5,
        category TEXT DEFAULT 'general',
        timestamp INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),
        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
      )
    ''');

    // ‚úÖ NUEVO: Tabla user_goals agregada al esquema m√≠nimo
    await db.execute('''
      CREATE TABLE user_goals (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        title TEXT NOT NULL,
        description TEXT NOT NULL,
        type TEXT NOT NULL,
        status TEXT NOT NULL DEFAULT 'active',
        target_value REAL NOT NULL,
        current_value REAL NOT NULL DEFAULT 0.0,
        created_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),
        completed_at INTEGER,
        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
      )
    ''');

    // ‚úÖ NUEVO: Tabla personalized_challenges agregada al esquema m√≠nimo
    await db.execute('''
      CREATE TABLE personalized_challenges (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        title TEXT NOT NULL,
        description TEXT NOT NULL,
        challenge_type TEXT NOT NULL,
        difficulty TEXT NOT NULL DEFAULT 'medium',
        target_value REAL NOT NULL,
        current_progress REAL NOT NULL DEFAULT 0.0,
        reward_points INTEGER DEFAULT 0,
        is_active INTEGER DEFAULT 1,
        created_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),
        completed_at INTEGER,
        expires_at INTEGER,
        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
      )
    ''');

    _logger.i('‚úÖ Esquema m√≠nimo creado para fallback');
  }

  Future<void> _createOptimizedSchema(Database db, int version) async {
    await db.transaction((txn) async {
      try {
        // TABLA USUARIOS - Optimizada para APK
        await txn.execute('''
        CREATE TABLE users (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          email TEXT UNIQUE NOT NULL,
          password_hash TEXT NOT NULL,
          name TEXT NOT NULL,
          avatar_emoji TEXT DEFAULT 'üßò‚Äç‚ôÄÔ∏è',
          profile_picture_path TEXT,
          bio TEXT,
          age INTEGER,
          is_first_time_user INTEGER DEFAULT 1,
          preferences TEXT DEFAULT '{}',
          created_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),
          last_login INTEGER,
          is_active BOOLEAN DEFAULT 1
        )
      ''');

        // TABLA ENTRADAS DIARIAS - CON TODAS LAS COLUMNAS NECESARIAS
        await txn.execute('''
        CREATE TABLE daily_entries (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          user_id INTEGER NOT NULL,
          entry_date TEXT NOT NULL,
          free_reflection TEXT NOT NULL,
          inner_reflection TEXT,

          -- M√©tricas b√°sicas
          mood_score INTEGER DEFAULT 5 CHECK (mood_score >= 1 AND mood_score <= 10),
          energy_level INTEGER DEFAULT 5 CHECK (energy_level >= 1 AND energy_level <= 10),
          stress_level INTEGER DEFAULT 5 CHECK (stress_level >= 1 AND stress_level <= 10),
          worth_it INTEGER DEFAULT 1 CHECK (worth_it IN (0, 1)),

          -- Campos de AI y an√°lisis
          overall_sentiment TEXT,
          ai_summary TEXT,
          word_count INTEGER DEFAULT 0,

          -- M√©tricas avanzadas de bienestar
          sleep_quality INTEGER CHECK (sleep_quality >= 1 AND sleep_quality <= 10),
          anxiety_level INTEGER CHECK (anxiety_level >= 1 AND anxiety_level <= 10),
          motivation_level INTEGER CHECK (motivation_level >= 1 AND motivation_level <= 10),
          social_interaction INTEGER CHECK (social_interaction >= 1 AND social_interaction <= 10),
          physical_activity INTEGER CHECK (physical_activity >= 1 AND physical_activity <= 10),
          work_productivity INTEGER CHECK (work_productivity >= 1 AND work_productivity <= 10),

          -- M√©tricas cuantitativas
          sleep_hours REAL CHECK (sleep_hours >= 0 AND sleep_hours <= 24),
          water_intake INTEGER CHECK (water_intake >= 0 AND water_intake <= 20),
          meditation_minutes INTEGER CHECK (meditation_minutes >= 0 AND meditation_minutes <= 600),
          exercise_minutes INTEGER CHECK (exercise_minutes >= 0 AND exercise_minutes <= 600),
          screen_time_hours REAL CHECK (screen_time_hours >= 0 AND screen_time_hours <= 24),

          -- M√©tricas adicionales
          weather_mood_impact INTEGER CHECK (weather_mood_impact >= -5 AND weather_mood_impact <= 5),
          social_battery INTEGER CHECK (social_battery >= 1 AND social_battery <= 10),
          creative_energy INTEGER CHECK (creative_energy >= 1 AND creative_energy <= 10),
          emotional_stability INTEGER CHECK (emotional_stability >= 1 AND emotional_stability <= 10),
          focus_level INTEGER CHECK (focus_level >= 1 AND focus_level <= 10),
          life_satisfaction INTEGER CHECK (life_satisfaction >= 1 AND life_satisfaction <= 10),

          -- Campos de texto
          gratitude_items TEXT,
          positive_tags TEXT DEFAULT '[]',
          negative_tags TEXT DEFAULT '[]',
          completed_activities_today TEXT DEFAULT '[]',
          goals_summary TEXT DEFAULT '[]',
          voice_recording_path TEXT,

          -- Timestamps
          created_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),
          updated_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),

          FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
          UNIQUE(user_id, entry_date)
        )
      ''');
        // TABLA MOMENTOS INTERACTIVOS - Optimizada
        await txn.execute('''
          CREATE TABLE interactive_moments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            entry_date TEXT NOT NULL,
            emoji TEXT NOT NULL,
            text TEXT NOT NULL,
            type TEXT NOT NULL CHECK (type IN ('positive', 'negative', 'neutral')),
            intensity INTEGER DEFAULT 5 CHECK (intensity >= 1 AND intensity <= 10),
            category TEXT DEFAULT 'general',

            -- Contexto enriquecido
            context_location TEXT,
            context_weather TEXT,
            context_social TEXT,
            energy_before INTEGER CHECK (energy_before >= 1 AND energy_before <= 10),
            energy_after INTEGER CHECK (energy_after >= 1 AND energy_after <= 10),
            mood_before INTEGER CHECK (mood_before >= 1 AND mood_before <= 10),
            mood_after INTEGER CHECK (mood_after >= 1 AND mood_after <= 10),

            timestamp INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),
            created_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),

            FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
          )
        ''');

        // TABLA TAGS - Para an√°lisis avanzado
        await txn.execute('''
          CREATE TABLE tags (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            type TEXT NOT NULL CHECK (type IN ('positive', 'negative', 'neutral')),
            category TEXT DEFAULT 'general',
            emoji TEXT DEFAULT 'üè∑Ô∏è',
            usage_count INTEGER DEFAULT 1,
            last_used INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),
            created_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),

            FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
            UNIQUE(user_id, name, type)
          )
        ''');

        // ‚úÖ NUEVA TABLA: USER_GOALS - Agregada al esquema optimizado
        await txn.execute('''
          CREATE TABLE user_goals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            description TEXT NOT NULL,
            type TEXT NOT NULL CHECK (type IN ('consistency', 'mood', 'positiveMoments', 'stressReduction')),
            status TEXT NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'completed', 'paused', 'cancelled')),
            target_value REAL NOT NULL CHECK (target_value > 0),
            current_value REAL NOT NULL DEFAULT 0.0 CHECK (current_value >= 0),
            progress_notes TEXT,

            -- Timestamps
            created_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),
            completed_at INTEGER,
            last_updated INTEGER,

            -- Goal Metadata
            category TEXT,
            difficulty TEXT,
            estimated_days INTEGER,

            -- JSON encoded fields
            milestones TEXT,
            metrics TEXT,

            FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
          )
        ''');

        // ‚úÖ NUEVA TABLA: PERSONALIZED_CHALLENGES - Para los desaf√≠os personalizados
        await txn.execute('''
          CREATE TABLE personalized_challenges (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            description TEXT NOT NULL,
            challenge_type TEXT NOT NULL CHECK (challenge_type IN ('streak', 'mood_average', 'moments', 'consistency', 'stress_reduction')),
            difficulty TEXT NOT NULL DEFAULT 'medium' CHECK (difficulty IN ('easy', 'medium', 'hard')),
            target_value REAL NOT NULL CHECK (target_value > 0),
            current_progress REAL NOT NULL DEFAULT 0.0 CHECK (current_progress >= 0),
            reward_points INTEGER DEFAULT 0,
            is_active INTEGER DEFAULT 1 CHECK (is_active IN (0, 1)),
            
            -- Timestamps
            created_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),
            completed_at INTEGER,
            expires_at INTEGER,

            FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
          )
        ''');

        await _createOptimizedIndexes(txn);

        _logger.i('‚úÖ Esquema optimizado creado exitosamente para APK');
      } catch (e) {
        _logger.e('‚ùå Error creando esquema: $e');
        rethrow;
      }
    });
  }

  Future<void> _createOptimizedIndexes(Transaction txn) async {
    // √çndices para usuarios
    await txn.execute('CREATE INDEX idx_users_email ON users (email)');
    await txn.execute(
        'CREATE INDEX idx_users_active ON users (is_active, last_login)');

    // √çndices para entradas diarias
    await txn.execute(
        'CREATE INDEX idx_daily_entries_user_date ON daily_entries (user_id, entry_date)');
    await txn.execute(
        'CREATE INDEX idx_daily_entries_created ON daily_entries (created_at DESC)');
    await txn.execute(
        'CREATE INDEX idx_daily_entries_mood ON daily_entries (user_id, mood_score, entry_date)');

    // √çndices para momentos
    await txn.execute(
        'CREATE INDEX idx_moments_user_date ON interactive_moments (user_id, entry_date)');
    await txn.execute(
        'CREATE INDEX idx_moments_type ON interactive_moments (user_id, type, timestamp)');
    await txn.execute(
        'CREATE INDEX idx_moments_category ON interactive_moments (user_id, category)');
    await txn.execute(
        'CREATE INDEX idx_moments_timeline ON interactive_moments (user_id, timestamp DESC)');

    // √çndices para tags
    await txn.execute(
        'CREATE INDEX idx_tags_user_type ON tags (user_id, type)');
    await txn.execute(
        'CREATE INDEX idx_tags_usage ON tags (usage_count DESC, last_used DESC)');

    // √çndices para goals
    await txn.execute(
        'CREATE INDEX idx_user_goals_user_status ON user_goals (user_id, status)');
    await txn.execute(
        'CREATE INDEX idx_user_goals_created ON user_goals (created_at DESC)');

    // √çndices para personalized_challenges
    await txn.execute(
        'CREATE INDEX idx_challenges_user_active ON personalized_challenges (user_id, is_active)');
    await txn.execute(
        'CREATE INDEX idx_challenges_type ON personalized_challenges (user_id, challenge_type)');
    await txn.execute(
        'CREATE INDEX idx_challenges_difficulty ON personalized_challenges (difficulty, reward_points DESC)');
  }

  Future<void> _upgradeSchema(Database db, int oldVersion,
      int newVersion) async {
    _logger.i('üîÑ Actualizando esquema desde v$oldVersion a v$newVersion');

    try {
      if (oldVersion < 2) {
        await _migrateToV2(db);
      }
      if (oldVersion < 3) {
        await _migrateToV3(db);
      }
      if (oldVersion < 4) {
        await _migrateToV4(db);
      }
      if (oldVersion < 5) {
        await _migrateToV5(db);
      }
      if (oldVersion < 6) {
        await _migrateToV6(db);
      }
      if (oldVersion < 7) {
        await _migrateToV7(db);
      }
      if (oldVersion < 8) {
        await _migrateToV8(db);
      }
    } catch (e) {
      _logger.e('‚ùå Error en migraci√≥n: $e');
      // En APK, mejor recrear la BD si hay errores cr√≠ticos
    }
  }


  Future<void> _migrateToV2(Database db) async {
    // ‚úÖ Migraci√≥n para agregar tabla user_goals si no existe
    try {
      // Verificar si la tabla user_goals ya existe
      final result = await db.rawQuery('''
        SELECT name FROM sqlite_master
        WHERE type='table' AND name='user_goals'
      ''');

      if (result.isEmpty) {
        _logger.i('üì¶ Agregando tabla user_goals en migraci√≥n v2');

        await db.execute('''
          CREATE TABLE user_goals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            description TEXT NOT NULL,
            type TEXT NOT NULL CHECK (type IN ('consistency', 'mood', 'positiveMoments', 'stressReduction')),
            status TEXT NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'completed', 'paused', 'cancelled')),
            target_value REAL NOT NULL CHECK (target_value > 0),
            current_value REAL NOT NULL DEFAULT 0.0 CHECK (current_value >= 0),
            created_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),
            completed_at INTEGER,
            FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
          )
        ''');

        // Crear √≠ndices para user_goals
        await db.execute('CREATE INDEX idx_user_goals_user_status ON user_goals (user_id, status)');
        await db.execute('CREATE INDEX idx_user_goals_created ON user_goals (user_id, created_at DESC)');
        await db.execute('CREATE INDEX idx_user_goals_type ON user_goals (user_id, type)');
        await db.execute('CREATE INDEX idx_user_goals_progress ON user_goals (user_id, status, current_value, target_value)');

        _logger.i('‚úÖ Tabla user_goals agregada exitosamente');
      }

      // ‚úÖ Migraci√≥n para agregar columnas faltantes a daily_entries
      await _addMissingColumnsToDaily(db);

    } catch (e) {
      _logger.e('‚ùå Error en migraci√≥n v2: $e');
      rethrow;
    }
  }

  Future<void> _addMissingColumnsToDaily(Database db) async {
    final columnsToAdd = [
      'overall_sentiment TEXT',
      'ai_summary TEXT',
      'word_count INTEGER DEFAULT 0',
      'sleep_quality INTEGER CHECK (sleep_quality >= 1 AND sleep_quality <= 10)',
      'anxiety_level INTEGER CHECK (anxiety_level >= 1 AND anxiety_level <= 10)',
      'motivation_level INTEGER CHECK (motivation_level >= 1 AND motivation_level <= 10)',
      'social_interaction INTEGER CHECK (social_interaction >= 1 AND social_interaction <= 10)',
      'physical_activity INTEGER CHECK (physical_activity >= 1 AND physical_activity <= 10)',
      'work_productivity INTEGER CHECK (work_productivity >= 1 AND work_productivity <= 10)',
      'sleep_hours REAL CHECK (sleep_hours >= 0 AND sleep_hours <= 24)',
      'water_intake INTEGER CHECK (water_intake >= 0 AND water_intake <= 20)',
      'meditation_minutes INTEGER CHECK (meditation_minutes >= 0 AND meditation_minutes <= 600)',
      'exercise_minutes INTEGER CHECK (exercise_minutes >= 0 AND exercise_minutes <= 600)',
      'screen_time_hours REAL CHECK (screen_time_hours >= 0 AND screen_time_hours <= 24)',
      'weather_mood_impact INTEGER CHECK (weather_mood_impact >= -5 AND weather_mood_impact <= 5)',
      'social_battery INTEGER CHECK (social_battery >= 1 AND social_battery <= 10)',
      'creative_energy INTEGER CHECK (creative_energy >= 1 AND creative_energy <= 10)',
      'emotional_stability INTEGER CHECK (emotional_stability >= 1 AND emotional_stability <= 10)',
      'focus_level INTEGER CHECK (focus_level >= 1 AND focus_level <= 10)',
      'life_satisfaction INTEGER CHECK (life_satisfaction >= 1 AND life_satisfaction <= 10)',
      'gratitude_items TEXT',
      'positive_tags TEXT DEFAULT \'[]\'',
      'negative_tags TEXT DEFAULT \'[]\'',
      'completed_activities_today TEXT DEFAULT \'[]\'',
      'goals_summary TEXT DEFAULT \'[]\'',
      'voice_recording_path TEXT',
      'inner_reflection TEXT',
      'updated_at INTEGER NOT NULL DEFAULT (strftime(\'%s\', \'now\'))',
    ];

    for (final column in columnsToAdd) {
      try {
        await db.execute('ALTER TABLE daily_entries ADD COLUMN $column');
        _logger.i('‚úÖ Columna agregada: $column');
      } catch (e) {
        // Column might already exist, this is fine
        _logger.w('‚ö†Ô∏è Columna ya existe o error: $column - $e');
      }
    }

    _logger.i('‚úÖ Migraci√≥n de columnas de daily_entries completada');
  }

  Future<void> _migrateToV3(Database db) async {
    try {
      // Ensure all missing columns are added for v3
      await _addMissingColumnsToDaily(db);
      _logger.i('‚úÖ Migraci√≥n v3 completada');
    } catch (e) {
      _logger.e('‚ùå Error en migraci√≥n v3: $e');
      rethrow;
    }
  }

  Future<void> _migrateToV4(Database db) async {
    try {
      // Ensure all missing columns are added for v4 (includes focus_level and life_satisfaction)
      await _addMissingColumnsToDaily(db);
      _logger.i('‚úÖ Migraci√≥n v4 completada - Agregadas columnas focus_level y life_satisfaction');
    } catch (e) {
      _logger.e('‚ùå Error en migraci√≥n v4: $e');
      rethrow;
    }
  }

  Future<void> _migrateToV5(Database db) async {
    try {
      // Add voice recording path column to daily_entries table
      await db.execute('''
        ALTER TABLE daily_entries ADD COLUMN voice_recording_path TEXT;
      ''');
      _logger.i('‚úÖ Migraci√≥n v5 completada - Agregada columna voice_recording_path');
    } catch (e) {
      _logger.e('‚ùå Error en migraci√≥n v5: $e');
      rethrow;
    }
  }

  Future<void> _migrateToV6(Database db) async {
    try {
      await db.execute('ALTER TABLE user_goals ADD COLUMN last_updated INTEGER;');
      await db.execute('ALTER TABLE user_goals ADD COLUMN category TEXT;');
      await db.execute('ALTER TABLE user_goals ADD COLUMN difficulty TEXT;');
      await db.execute('ALTER TABLE user_goals ADD COLUMN estimated_days INTEGER;');
      await db.execute('ALTER TABLE user_goals ADD COLUMN milestones TEXT;');
      await db.execute('ALTER TABLE user_goals ADD COLUMN metrics TEXT;');
      await db.execute('ALTER TABLE user_goals ADD COLUMN progress_notes TEXT;');
      _logger.i('‚úÖ Migraci√≥n v6 completada - Agregadas columnas a user_goals');
    } catch (e) {
      _logger.e('‚ùå Error en migraci√≥n v6: $e');
      rethrow;
    }
  }

  Future<void> _migrateToV7(Database db) async {
    try {
      // Add inner_reflection column to daily_entries table
      await db.execute('ALTER TABLE daily_entries ADD COLUMN inner_reflection TEXT;');
      _logger.i('‚úÖ Migraci√≥n v7 completada - Agregada columna inner_reflection a daily_entries');
    } catch (e) {
      // If column already exists, ignore the error
      if (e.toString().contains('duplicate column name')) {
        _logger.i('‚ÑπÔ∏è Columna inner_reflection ya existe en daily_entries');
      } else {
        _logger.e('‚ùå Error en migraci√≥n v7: $e');
        rethrow;
      }
    }
  }

  Future<void> _migrateToV8(Database db) async {
    try {
      // Add completed_activities_today and goals_summary columns to daily_entries table
      await db.execute('ALTER TABLE daily_entries ADD COLUMN completed_activities_today TEXT DEFAULT \'[]\';');
      await db.execute('ALTER TABLE daily_entries ADD COLUMN goals_summary TEXT DEFAULT \'[]\';');
      _logger.i('‚úÖ Migraci√≥n v8 completada - Agregadas columnas completed_activities_today y goals_summary a daily_entries');
    } catch (e) {
      // If columns already exist, ignore the error
      if (e.toString().contains('duplicate column name')) {
        _logger.i('‚ÑπÔ∏è Columnas completed_activities_today y goals_summary ya existen en daily_entries');
      } else {
        _logger.e('‚ùå Error en migraci√≥n v8: $e');
        rethrow;
      }
    }
  }

  // ============================================================================
  // M√âTODOS OPTIMIZADOS PARA USUARIOS
  // ============================================================================

  /// **M√âTODO CORREGIDO**
  /// Crea un nuevo usuario solo si el email no existe previamente.
  Future<OptimizedUserModel?> createUser({
    required String email,
    required String password,
    required String name,
    String avatarEmoji = 'üßò‚Äç‚ôÄÔ∏è',
    String? profilePicturePath,
    String bio = '',
  }) async {
    try {
      final db = await database;
      final normalizedEmail = email.toLowerCase().trim();

      // ‚úÖ **PASO 1: VERIFICAR SI EL USUARIO YA EXISTE**
      final existingUser = await db.query(
        'users',
        where: 'email = ?',
        whereArgs: [normalizedEmail],
        limit: 1,
      );

      // Si la lista no est√° vac√≠a, el usuario ya existe.
      if (existingUser.isNotEmpty) {
        _logger.w('‚ö†Ô∏è Intento de crear un usuario duplicado con el email: $normalizedEmail');
        // Retorna null para indicar que la creaci√≥n fall√≥ por duplicado.
        return null;
      }

      // Si no existe, procede con la inserci√≥n.
      final passwordHash = _hashPassword(password);

      final userId = await db.insert('users', {
        'email': normalizedEmail,
        'password_hash': passwordHash,
        'name': name.trim(),
        'avatar_emoji': avatarEmoji,
        'profile_picture_path': profilePicturePath,
        'bio': bio,
      });

      _logger.i('‚ú® Usuario creado exitosamente: $name (ID: $userId)');

      return OptimizedUserModel(
        id: userId,
        email: email,
        name: name,
        avatarEmoji: avatarEmoji,
        profilePicturePath: profilePicturePath,
        bio: bio,
        createdAt: DateTime.now(),
        lastLogin: null,
      );
    } catch (e) {
      // El catch general ahora manejar√° otros errores inesperados.
      _logger.e('‚ùå Error creando usuario: $e');
      return null;
    }
  }


  Future<OptimizedUserModel?> authenticateUser(String email, String password) async {
    try {
      final db = await database;
      final results = await db.query(
        'users',
        where: 'email = ? AND is_active = 1',
        whereArgs: [email.toLowerCase().trim()],
        limit: 1,
      );

      if (results.isEmpty) return null;

      final userData = results.first;
      final storedHash = userData['password_hash'] as String;

      if (!_verifyPassword(password, storedHash)) return null;

      // Actualizar √∫ltimo login
      await db.update(
        'users',
        {'last_login': DateTime.now().millisecondsSinceEpoch ~/ 1000},
        where: 'id = ?',
        whereArgs: [userData['id']],
      );

      return OptimizedUserModel.fromDatabase(userData);
    } catch (e) {
      _logger.e('‚ùå Error en autenticaci√≥n: $e');
      return null;
    }
  }
  Future<bool> updateUserProfile({
    required int userId,
    String? name,
    String? bio,
    String? avatarEmoji,
    String? profilePicturePath,
  }) async {
    try {
      final db = await database;
      final Map<String, dynamic> updates = {};

      if (name != null) updates['name'] = name.trim();
      if (bio != null) updates['bio'] = bio;
      if (avatarEmoji != null) updates['avatar_emoji'] = avatarEmoji;
      if (profilePicturePath != null) {
        updates['profile_picture_path'] = profilePicturePath;
      }

      if (updates.isEmpty) return true;

      final rowsAffected = await db.update(
        'users',
        updates,
        where: 'id = ?',
        whereArgs: [userId],
      );

      _logger.i('‚úÖ Perfil actualizado para usuario ID: $userId');
      return rowsAffected > 0;
    } catch (e) {
      _logger.e('‚ùå Error actualizando perfil: $e');
      return false;
    }
  }

  Future<OptimizedUserModel?> getUserById(int userId) async {
    try {
      final db = await database;
      final results = await db.query(
          'users',
          where: 'id = ?',
          whereArgs: [userId],
          limit: 1
      );

      if (results.isEmpty) return null;

      return OptimizedUserModel.fromDatabase(results.first);
    } catch (e) {
      _logger.e('‚ùå Error obteniendo usuario $userId: $e');
      return null;
    }
  }

  // ============================================================================
  // M√âTODOS OPTIMIZADOS PARA ENTRADAS DIARIAS
  // ============================================================================

  Future<int?> saveDailyEntry(OptimizedDailyEntryModel entry) async {
    try {
      final db = await database;
      
      // Use transaction for atomic operations
      return await db.transaction((txn) async {
        final entryData = entry.toOptimizedDatabase();
        final dateStr = entry.entryDate.toIso8601String().split('T')[0];

        final existingEntry = await txn.query(
          'daily_entries',
          where: 'user_id = ? AND entry_date = ?',
          whereArgs: [entry.userId, dateStr],
          limit: 1,
        );

        int entryId;
        if (existingEntry.isNotEmpty) {
          entryId = existingEntry.first['id'] as int;
          entryData['updated_at'] = DateTime.now().millisecondsSinceEpoch ~/ 1000;

          final updatedRows = await txn.update(
            'daily_entries',
            entryData,
            where: 'id = ?',
            whereArgs: [entryId],
          );
          
          if (updatedRows == 0) {
            throw Exception('Failed to update daily entry');
          }
          
          _logger.d('üìù Entrada diaria actualizada (ID: $entryId)');
        } else {
          entryId = await txn.insert('daily_entries', entryData);
          if (entryId <= 0) {
            throw Exception('Failed to insert daily entry');
          }
          _logger.d('üìù Nueva entrada diaria creada (ID: $entryId)');
        }

        return entryId;
      });
    } catch (e) {
      _logger.e('‚ùå Error guardando entrada diaria: $e');
      debugPrint('‚ùå Stack trace: ${StackTrace.current}');
      return null;
    }
  }

  Future<List<OptimizedDailyEntryModel>> getDailyEntries({
    required int userId,
    DateTime? startDate,
    DateTime? endDate,
    int? limit,
  }) async {
    try {
      final db = await database;

      String whereClause = 'user_id = ?';
      List<dynamic> whereArgs = [userId];

      if (startDate != null) {
        whereClause += ' AND entry_date >= ?';
        whereArgs.add(startDate.toIso8601String().split('T')[0]);
      }

      if (endDate != null) {
        whereClause += ' AND entry_date <= ?';
        whereArgs.add(endDate.toIso8601String().split('T')[0]);
      }

      final results = await db.query(
        'daily_entries',
        where: whereClause,
        whereArgs: whereArgs,
        orderBy: 'entry_date DESC',
        limit: limit,
      );

      return results.map((row) => OptimizedDailyEntryModel.fromDatabase(row)).toList();
    } catch (e) {
      _logger.e('‚ùå Error obteniendo entradas diarias: $e');
      return [];
    }
  }

  // ============================================================================
  // M√âTODOS OPTIMIZADOS PARA MOMENTOS INTERACTIVOS
  // ============================================================================

  Future<int?> saveInteractiveMoment(int userId, OptimizedInteractiveMomentModel moment) async {
    try {
      final db = await database;
      
      // Use transaction for atomic operations
      return await db.transaction((txn) async {
        final momentData = moment.toOptimizedDatabase();
        momentData['user_id'] = userId;

        final momentId = await txn.insert('interactive_moments', momentData);
        if (momentId <= 0) {
          throw Exception('Failed to insert interactive moment');
        }
        
        _logger.d('‚ú® Momento guardado: ${moment.emoji} ${moment.text} (ID: $momentId)');
        return momentId;
      });
    } catch (e) {
      _logger.e('‚ùå Error guardando momento: $e');
      debugPrint('‚ùå Stack trace: ${StackTrace.current}');
      return null;
    }
  }

  Future<List<OptimizedInteractiveMomentModel>> getInteractiveMoments({
    required int userId,
    DateTime? date,
    String? type,
    String? category,
    int? limit,
  }) async {
    try {
      final db = await database;

      String whereClause = 'user_id = ?';
      List<dynamic> whereArgs = [userId];

      if (date != null) {
        whereClause += ' AND entry_date = ?';
        whereArgs.add(date.toIso8601String().split('T')[0]);
      }

      if (type != null) {
        whereClause += ' AND type = ?';
        whereArgs.add(type);
      }

      if (category != null) {
        whereClause += ' AND category = ?';
        whereArgs.add(category);
      }

      final results = await db.query(
        'interactive_moments',
        where: whereClause,
        whereArgs: whereArgs,
        orderBy: 'timestamp DESC',
        limit: limit,
      );

      return results.map((row) => OptimizedInteractiveMomentModel.fromDatabase(row)).toList();
    } catch (e) {
      _logger.e('‚ùå Error obteniendo momentos: $e');
      return [];
    }
  }

  // ============================================================================
  // AN√ÅLISIS Y ESTAD√çSTICAS OPTIMIZADAS PARA APK
  // ============================================================================

  Future<Map<String, dynamic>> getUserAnalytics(int userId, {int days = 30}) async {
    try {
      final db = await database;
      final endDate = DateTime.now();
      final startDate = endDate.subtract(Duration(days: days));

      // An√°lisis b√°sico optimizado para APK
      final basicStats = await _getBasicStats(db, userId, startDate, endDate);
      final moodTrends = await _getMoodTrends(db, userId, startDate, endDate);
      final momentStats = await _getMomentStats(db, userId, startDate, endDate);
      final streakData = await _getStreakData(db, userId);
      
      // ‚úÖ NEW: Enhanced intelligent analytics
      final intelligentInsights = await _getIntelligentInsights(db, userId, startDate, endDate);
      final personalizedRecommendations = await _getPersonalizedRecommendations(db, userId, days);
      final wellbeingPrediction = await getWellbeingPredictionData(userId, days: days);
      final habitsAnalysis = await getHealthyHabitsAnalysis(userId, days: days);
      final emotionalPatterns = await _getEmotionalPatterns(db, userId, startDate, endDate);
      final lifestyleCorrelations = await _getLifestyleCorrelations(db, userId, startDate, endDate);

      return {
        'basic_stats': basicStats,
        'mood_trends': moodTrends,
        'moment_stats': momentStats,
        'streak_data': streakData,
        'period_days': days,
        // ‚úÖ Enhanced analytics
        'intelligent_insights': intelligentInsights,
        'personalized_recommendations': personalizedRecommendations,
        'wellbeing_prediction': wellbeingPrediction,
        'habits_analysis': habitsAnalysis,
        'emotional_patterns': emotionalPatterns,
        'lifestyle_correlations': lifestyleCorrelations,
        'metadata': {
          'generated_at': DateTime.now().toIso8601String(),
          'analytics_version': '2.0_intelligent',
          'data_quality_score': await _calculateDataQualityScore(db, userId, startDate, endDate),
        },
      };
    } catch (e) {
      _logger.e('‚ùå Error obteniendo analytics: $e');
      return {};
    }
  }

  Future<Map<String, dynamic>> _getBasicStats(
      Database db, int userId, DateTime start, DateTime end) async {

    final result = await db.rawQuery('''
      SELECT
        COUNT(*) as total_entries,
        AVG(mood_score) as avg_mood,
        AVG(energy_level) as avg_energy,
        AVG(stress_level) as avg_stress,
        SUM(CASE WHEN worth_it = 1 THEN 1 ELSE 0 END) as worthit_days,
        AVG(sleep_hours) as avg_sleep,
        SUM(meditation_minutes) as total_meditation,
        SUM(exercise_minutes) as total_exercise
      FROM daily_entries
      WHERE user_id = ? AND entry_date BETWEEN ? AND ?
    ''', [userId, start.toIso8601String().split('T')[0], end.toIso8601String().split('T')[0]]);

    return result.first;
  }

  Future<List<Map<String, dynamic>>> _getMoodTrends(
      Database db, int userId, DateTime start, DateTime end) async {

    return await db.rawQuery('''
      SELECT
        entry_date,
        mood_score,
        energy_level,
        stress_level,
        sleep_quality
      FROM daily_entries
      WHERE user_id = ? AND entry_date BETWEEN ? AND ?
      ORDER BY entry_date ASC
    ''', [userId, start.toIso8601String().split('T')[0], end.toIso8601String().split('T')[0]]);
  }

  Future<Map<String, dynamic>> _getMomentStats(
      Database db, int userId, DateTime start, DateTime end) async {

    final result = await db.rawQuery('''
      SELECT
        type,
        COUNT(*) as count,
        AVG(intensity) as avg_intensity,
        category
      FROM interactive_moments
      WHERE user_id = ? AND entry_date BETWEEN ? AND ?
      GROUP BY type, category
    ''', [userId, start.toIso8601String().split('T')[0], end.toIso8601String().split('T')[0]]);

    return {'moments_by_type_category': result};
  }

  Future<Map<String, dynamic>> _getStreakData(Database db, int userId) async {
    final results = await db.rawQuery('''
      SELECT entry_date
      FROM daily_entries
      WHERE user_id = ?
      ORDER BY entry_date DESC
      LIMIT 365
    ''', [userId]);

    return _calculateStreaks(results.map((r) => r['entry_date'] as String).toList());
  }

  Map<String, dynamic> _calculateStreaks(List<String> dateStrings) {
    if (dateStrings.isEmpty) {
      return {'current_streak': 0, 'longest_streak': 0};
    }

    // 1. Parse and sort dates in descending order (most recent first)
    final dates = dateStrings.map((d) => DateTime.parse(d)).toList();
    dates.sort((a, b) => b.compareTo(a));

    int currentStreak = 0;
    int longestStreak = 0;

    // 2. Check if the most recent entry is today or yesterday
    final today = DateTime.now();
    final mostRecentDate = dates.first;
    if (DateUtils.isSameDay(mostRecentDate, today) ||
        DateUtils.isSameDay(mostRecentDate, today.subtract(const Duration(days: 1)))) {
      currentStreak = 1;
    }

    // 3. Iterate to calculate streaks
    int tempStreak = 1;
    for (int i = 0; i < dates.length - 1; i++) {
      final date = dates[i];
      final prevDate = dates[i + 1];

      if (DateUtils.isSameDay(date, prevDate.add(const Duration(days: 1)))) {
        // Dates are consecutive
        tempStreak++;
      } else {
        // Gap found, streak is broken
        longestStreak = math.max(longestStreak, tempStreak);
        tempStreak = 1; // Reset for the next potential streak
      }
    }

    // 4. Final check for the longest streak
    longestStreak = math.max(longestStreak, tempStreak);

    // 5. If the most recent streak is not the current one, reset currentStreak
    if (currentStreak == 0) {
      // No entry today or yesterday, so current streak is 0
    } else {
      // The current streak is the last one calculated
      currentStreak = tempStreak;
    }

    return {
      'current_streak': currentStreak,
      'longest_streak': longestStreak,
    };
  }
  // ============================================================================
  // üöÄ M√âTODOS DE ANALYTICS AVANZADOS
  // ============================================================================

  /// Obtener datos para predicci√≥n de bienestar basada en patrones
  Future<Map<String, dynamic>> getWellbeingPredictionData(int userId, {int days = 30}) async {
    try {
      final db = await database;

      // Obtener tendencias de mood de los √∫ltimos d√≠as
      final moodTrends = await db.rawQuery('''
        SELECT
          entry_date,
          mood_score,
          energy_level,
          stress_level,
          sleep_quality,
          physical_activity,
          JULIANDAY(entry_date) as day_number
        FROM daily_entries
        WHERE user_id = ?
          AND entry_date >= date('now', '-$days days')
        ORDER BY entry_date DESC
      ''', [userId]);

      if (moodTrends.isEmpty) {
        return {
          'has_data': false,
          'trend_direction': 0.0,
          'confidence': 0.0,
          'predicted_score': 5.0,
          'pattern_strength': 0.0,
        };
      }

      // Calcular tendencia usando regresi√≥n lineal simple
      double sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0;
      int n = moodTrends.length;

      for (int i = 0; i < n; i++) {
        final x = i.toDouble(); // D√≠a (√≠ndice)
        final y = (moodTrends[i]['mood_score'] as int? ?? 5).toDouble();

        sumX += x;
        sumY += y;
        sumXY += x * y;
        sumX2 += x * x;
      }

      // Calcular pendiente de la l√≠nea de tendencia
      final slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
      final intercept = (sumY - slope * sumX) / n;

      // Predicci√≥n para el siguiente d√≠a
      final nextDay = n.toDouble();
      final predictedScore = (slope * nextDay + intercept).clamp(1.0, 10.0);

      // Calcular confianza basada en consistencia de datos
      final consistency = _calculateDataConsistency(moodTrends);
      final confidence = (consistency * (n / 30.0)).clamp(0.0, 1.0);

      return {
        'has_data': true,
        'trend_direction': slope,
        'confidence': confidence,
        'predicted_score': predictedScore,
        'pattern_strength': math.cos(slope),
        'data_points': n,
        'recent_average': sumY / n,
      };

    } catch (e) {
      _logger.e('‚ùå Error obteniendo predicci√≥n de bienestar: $e');
      return {
        'has_data': false,
        'trend_direction': 0.0,
        'confidence': 0.0,
        'predicted_score': 5.0,
        'pattern_strength': 0.0,
      };
    }
  }

  /// Calcular consistencia de datos para determinar confianza en predicciones
  double _calculateDataConsistency(List<Map<String, dynamic>> data) {
    if (data.length < 2) return 0.0;

    final values = data.map((e) => (e['mood_score'] as int? ?? 5).toDouble()).toList();
    final mean = values.reduce((a, b) => a + b) / values.length;

    // Calcular desviaci√≥n est√°ndar
    final variance = values.map((v) => math.pow(v - mean, 2)).reduce((a, b) => a + b) / values.length;
    final stdDev = math.sqrt(variance);

    // Consistencia inversa a la variabilidad (normalizada)
    return (1.0 - (stdDev / 5.0)).clamp(0.0, 1.0);
  }

  /// Obtener an√°lisis detallado de h√°bitos saludables
  Future<Map<String, dynamic>> getHealthyHabitsAnalysis(int userId, {int days = 30}) async {
    try {
      final db = await database;

      final habitsData = await db.rawQuery('''
        SELECT
          AVG(CAST(sleep_quality as REAL)) as avg_sleep_quality,
          AVG(CAST(sleep_hours as REAL)) as avg_sleep_hours,
          AVG(CAST(physical_activity as REAL)) as avg_physical_activity,
          AVG(CAST(exercise_minutes as REAL)) as avg_exercise_minutes,
          AVG(CAST(meditation_minutes as REAL)) as avg_meditation_minutes,
          AVG(CAST(social_interaction as REAL)) as avg_social_interaction,
          AVG(CAST(water_intake as REAL)) as avg_water_intake,
          AVG(CAST(screen_time_hours as REAL)) as avg_screen_time,
          COUNT(*) as total_entries
        FROM daily_entries
        WHERE user_id = ?
          AND entry_date >= date('now', '-$days days')
          AND (sleep_quality IS NOT NULL
               OR physical_activity IS NOT NULL
               OR meditation_minutes IS NOT NULL
               OR social_interaction IS NOT NULL)
      ''', [userId]);

      if (habitsData.isEmpty || habitsData.first['total_entries'] == 0) {
        return _getDefaultHabitsAnalysis();
      }

      final data = habitsData.first;

      // Normalizar puntuaciones a escala 0-1
      final sleepScore = _normalizeHabitScore(data['avg_sleep_quality'] as double? ?? 5.0, 10.0);
      final exerciseScore = _normalizeHabitScore(data['avg_physical_activity'] as double? ?? 5.0, 10.0);
      final meditationScore = _normalizeHabitScore(data['avg_meditation_minutes'] as double? ?? 0.0, 30.0);
      final socialScore = _normalizeHabitScore(data['avg_social_interaction'] as double? ?? 5.0, 10.0);

      // Calcular puntuaciones de h√°bitos espec√≠ficos
      final sleepHoursScore = _calculateSleepHoursScore(data['avg_sleep_hours'] as double? ?? 7.0);
      final exerciseMinutesScore = _calculateExerciseScore(data['avg_exercise_minutes'] as double? ?? 0.0);
      final hydrationScore = _calculateHydrationScore(data['avg_water_intake'] as double? ?? 6.0);
      final screenTimeScore = _calculateScreenTimeScore(data['avg_screen_time_hours'] as double? ?? 6.0);

      // Puntuaci√≥n general de h√°bitos
      final overallScore = (sleepScore + exerciseScore + meditationScore + socialScore +
          sleepHoursScore + exerciseMinutesScore + hydrationScore + screenTimeScore) / 8.0;

      // Generar recomendaciones basadas en los datos
      final recommendations = _generateHabitsRecommendations({
        'sleep': sleepScore,
        'exercise': exerciseScore,
        'meditation': meditationScore,
        'social': socialScore,
        'hydration': hydrationScore,
        'screen_time': screenTimeScore,
      });

      return {
        'sleep_score': sleepScore,
        'exercise_score': exerciseScore,
        'meditation_score': meditationScore,
        'social_score': socialScore,
        'hydration_score': hydrationScore,
        'screen_time_score': screenTimeScore,
        'sleep_hours_score': sleepHoursScore,
        'exercise_minutes_score': exerciseMinutesScore,
        'overall_score': overallScore,
        'recommendations': recommendations,
        'data_quality': (data['total_entries'] as int? ?? 0) / days.toDouble(),
        'raw_data': {
          'avg_sleep_quality': data['avg_sleep_quality'],
          'avg_sleep_hours': data['avg_sleep_hours'],
          'avg_physical_activity': data['avg_physical_activity'],
          'avg_exercise_minutes': data['avg_exercise_minutes'],
          'avg_meditation_minutes': data['avg_meditation_minutes'],
          'avg_social_interaction': data['avg_social_interaction'],
          'avg_water_intake': data['avg_water_intake'],
          'avg_screen_time': data['avg_screen_time_hours'],
        },
      };

    } catch (e) {
      _logger.e('‚ùå Error obteniendo an√°lisis de h√°bitos: $e');
      return _getDefaultHabitsAnalysis();
    }
  }

  /// Normalizar puntuaci√≥n de h√°bito a escala 0-1
  double _normalizeHabitScore(double value, double maxValue) {
    return (value / maxValue).clamp(0.0, 1.0);
  }

  /// Calcular puntuaci√≥n de horas de sue√±o (√≥ptimo: 7-9 horas)
  double _calculateSleepHoursScore(double hours) {
    if (hours >= 7.0 && hours <= 9.0) return 1.0;
    if (hours >= 6.0 && hours <= 10.0) return 0.8;
    if (hours >= 5.0 && hours <= 11.0) return 0.6;
    return 0.3;
  }

  /// Calcular puntuaci√≥n de ejercicio (objetivo: 30+ minutos)
  double _calculateExerciseScore(double minutes) {
    if (minutes >= 30.0) return 1.0;
    if (minutes >= 20.0) return 0.8;
    if (minutes >= 10.0) return 0.6;
    if (minutes > 0.0) return 0.4;
    return 0.0;
  }

  /// Calcular puntuaci√≥n de hidrataci√≥n (objetivo: 8+ vasos)
  double _calculateHydrationScore(double glasses) {
    if (glasses >= 8.0) return 1.0;
    if (glasses >= 6.0) return 0.8;
    if (glasses >= 4.0) return 0.6;
    if (glasses >= 2.0) return 0.4;
    return 0.2;
  }

  /// Calcular puntuaci√≥n de tiempo de pantalla (menos es mejor)
  double _calculateScreenTimeScore(double hours) {
    if (hours <= 2.0) return 1.0;
    if (hours <= 4.0) return 0.8;
    if (hours <= 6.0) return 0.6;
    if (hours <= 8.0) return 0.4;
    return 0.2;
  }

  /// Generar recomendaciones basadas en h√°bitos
  List<String> _generateHabitsRecommendations(Map<String, double> scores) {
    final recommendations = <String>[];

    if (scores['sleep']! < 0.6) {
      recommendations.add('Mejora tu calidad de sue√±o con una rutina nocturna');
    }
    if (scores['exercise']! < 0.6) {
      recommendations.add('Incrementa tu actividad f√≠sica diaria');
    }
    if (scores['meditation']! < 0.3) {
      recommendations.add('Prueba la meditaci√≥n para reducir el estr√©s');
    }
    if (scores['social']! < 0.6) {
      recommendations.add('Dedica m√°s tiempo a las conexiones sociales');
    }
    if (scores['hydration']! < 0.6) {
      recommendations.add('Aumenta tu ingesta de agua diaria');
    }
    if (scores['screen_time']! < 0.6) {
      recommendations.add('Reduce el tiempo de pantalla para mejor bienestar');
    }

    if (recommendations.isEmpty) {
      recommendations.add('¬°Excelente! Mant√©n tus h√°bitos saludables actuales');
    }

    return recommendations;
  }

  /// Datos por defecto cuando no hay informaci√≥n suficiente
  /// ‚úÖ NEW: Get intelligent insights based on user data patterns
  Future<Map<String, dynamic>> _getIntelligentInsights(Database db, int userId, DateTime start, DateTime end) async {
    try {
      final insights = <String, dynamic>{};
      
      // Analyze mood volatility
      final moodVolatility = await _analyzeMoodVolatility(db, userId, start, end);
      insights['mood_volatility'] = moodVolatility;
      
      // Detect stress patterns
      final stressPatterns = await _detectStressPatterns(db, userId, start, end);
      insights['stress_patterns'] = stressPatterns;
      
      // Energy optimization opportunities
      final energyOptimization = await _findEnergyOptimization(db, userId, start, end);
      insights['energy_optimization'] = energyOptimization;
      
      // Best performance days analysis
      final bestDays = await _analyzeBestPerformanceDays(db, userId, start, end);
      insights['best_performance_days'] = bestDays;
      
      return insights;
    } catch (e) {
      _logger.e('‚ùå Error generating intelligent insights: $e');
      return {};
    }
  }
  
  /// ‚úÖ NEW: Get personalized recommendations based on user patterns
  Future<List<Map<String, dynamic>>> _getPersonalizedRecommendations(Database db, int userId, int days) async {
    try {
      final recommendations = <Map<String, dynamic>>[];
      
      // Analyze recent trends
      final recentTrends = await _analyzeRecentTrends(db, userId, days);
      
      // Generate recommendations based on patterns
      if (recentTrends['declining_mood'] == true) {
        recommendations.add({
          'type': 'mood_support',
          'priority': 'high',
          'title': 'Apoyo para el Estado de √Ånimo',
          'description': 'Hemos notado una tendencia descendente en tu estado de √°nimo. Considera estas estrategias.',
          'actions': [
            'Practica ejercicios de respiraci√≥n profunda',
            'Conecta con un amigo o familiar',
            'Dedica tiempo a actividades que disfrutes'
          ],
          'estimated_impact': 'alto',
          'timeframe': '3-7 d√≠as'
        });
      }
      
      if (recentTrends['high_stress'] == true) {
        recommendations.add({
          'type': 'stress_management',
          'priority': 'high',
          'title': 'Gesti√≥n del Estr√©s',
          'description': 'Tus niveles de estr√©s han estado altos. Prueba estas t√©cnicas.',
          'actions': [
            'Meditaci√≥n de 10 minutos diarios',
            'Establece l√≠mites en el trabajo',
            'Practica la t√©cnica 4-7-8 de respiraci√≥n'
          ],
          'estimated_impact': 'alto',
          'timeframe': '1-2 semanas'
        });
      }
      
      if (recentTrends['low_energy'] == true) {
        recommendations.add({
          'type': 'energy_boost',
          'priority': 'medium',
          'title': 'Aumento de Energ√≠a',
          'description': 'Tu energ√≠a ha estado baja. Considera estos cambios.',
          'actions': [
            'Revisa tu horario de sue√±o',
            'Incorpora ejercicio ligero',
            'Eval√∫a tu alimentaci√≥n'
          ],
          'estimated_impact': 'medio',
          'timeframe': '1-3 semanas'
        });
      }
      
      return recommendations;
    } catch (e) {
      _logger.e('‚ùå Error generating personalized recommendations: $e');
      return [];
    }
  }
  
  /// ‚úÖ NEW: Analyze emotional patterns and cycles
  Future<Map<String, dynamic>> _getEmotionalPatterns(Database db, int userId, DateTime start, DateTime end) async {
    try {
      // Weekly patterns
      final weeklyPatterns = await db.rawQuery('''
        SELECT 
          CASE 
            WHEN strftime('%w', entry_date) = '0' THEN 'Sunday'
            WHEN strftime('%w', entry_date) = '1' THEN 'Monday'
            WHEN strftime('%w', entry_date) = '2' THEN 'Tuesday'
            WHEN strftime('%w', entry_date) = '3' THEN 'Wednesday'
            WHEN strftime('%w', entry_date) = '4' THEN 'Thursday'
            WHEN strftime('%w', entry_date) = '5' THEN 'Friday'
            WHEN strftime('%w', entry_date) = '6' THEN 'Saturday'
          END as day_of_week,
          AVG(mood_score) as avg_mood,
          AVG(energy_level) as avg_energy,
          AVG(stress_level) as avg_stress,
          COUNT(*) as entries_count
        FROM daily_entries 
        WHERE user_id = ? AND entry_date BETWEEN ? AND ?
        GROUP BY strftime('%w', entry_date)
        ORDER BY strftime('%w', entry_date)
      ''', [userId, start.toIso8601String().split('T')[0], end.toIso8601String().split('T')[0]]);
      
      // Monthly patterns (if enough data)
      final monthlyPatterns = await _getMonthlyEmotionalPatterns(db, userId);
      
      // Emotional stability index
      final stabilityIndex = await _calculateEmotionalStability(db, userId, start, end);
      
      return {
        'weekly_patterns': weeklyPatterns,
        'monthly_patterns': monthlyPatterns,
        'emotional_stability_index': stabilityIndex,
        'pattern_insights': _generatePatternInsights(weeklyPatterns),
      };
    } catch (e) {
      _logger.e('‚ùå Error analyzing emotional patterns: $e');
      return {};
    }
  }
  
  /// ‚úÖ NEW: Analyze lifestyle correlations with wellbeing
  Future<Map<String, dynamic>> _getLifestyleCorrelations(Database db, int userId, DateTime start, DateTime end) async {
    try {
      final correlations = <String, dynamic>{};
      
      // Sleep quality vs mood correlation
      final sleepMoodCorr = await _calculateCorrelation(db, userId, 'sleep_quality', 'mood_score', start, end);
      correlations['sleep_mood_correlation'] = sleepMoodCorr;
      
      // Exercise vs energy correlation
      final exerciseEnergyCorr = await _calculateCorrelation(db, userId, 'physical_activity', 'energy_level', start, end);
      correlations['exercise_energy_correlation'] = exerciseEnergyCorr;
      
      // Social interaction vs mood correlation
      final socialMoodCorr = await _calculateCorrelation(db, userId, 'social_interaction', 'mood_score', start, end);
      correlations['social_mood_correlation'] = socialMoodCorr;
      
      // Screen time vs stress correlation
      final screenStressCorr = await _calculateCorrelation(db, userId, 'screen_time_hours', 'stress_level', start, end);
      correlations['screen_stress_correlation'] = screenStressCorr;
      
      // Generate insights from correlations
      correlations['insights'] = _generateCorrelationInsights(correlations);
      
      return correlations;
    } catch (e) {
      _logger.e('‚ùå Error analyzing lifestyle correlations: $e');
      return {};
    }
  }
  
  /// ‚úÖ NEW: Calculate data quality score
  Future<double> _calculateDataQualityScore(Database db, int userId, DateTime start, DateTime end) async {
    try {
      final totalDays = end.difference(start).inDays;
      
      final result = await db.rawQuery('''
        SELECT 
          COUNT(*) as entries_with_data,
          COUNT(CASE WHEN mood_score IS NOT NULL THEN 1 END) as mood_entries,
          COUNT(CASE WHEN energy_level IS NOT NULL THEN 1 END) as energy_entries,
          COUNT(CASE WHEN stress_level IS NOT NULL THEN 1 END) as stress_entries,
          COUNT(CASE WHEN free_reflection IS NOT NULL AND free_reflection != '' THEN 1 END) as reflection_entries
        FROM daily_entries 
        WHERE user_id = ? AND entry_date BETWEEN ? AND ?
      ''', [userId, start.toIso8601String().split('T')[0], end.toIso8601String().split('T')[0]]);
      
      if (result.isEmpty) return 0.0;
      
      final data = result.first;
      final entriesWithData = (data['entries_with_data'] as int?) ?? 0;
      final moodEntries = (data['mood_entries'] as int?) ?? 0;
      final energyEntries = (data['energy_entries'] as int?) ?? 0;
      final stressEntries = (data['stress_entries'] as int?) ?? 0;
      final reflectionEntries = (data['reflection_entries'] as int?) ?? 0;
      
      // Calculate completeness scores
      final completenessScore = entriesWithData / totalDays;
      final dataRichnessScore = (moodEntries + energyEntries + stressEntries + reflectionEntries) / (totalDays * 4);
      
      return ((completenessScore + dataRichnessScore) / 2).clamp(0.0, 1.0);
    } catch (e) {
      _logger.e('‚ùå Error calculating data quality score: $e');
      return 0.0;
    }
  }
  
  Map<String, dynamic> _getDefaultHabitsAnalysis() {
    return {
      'sleep_score': 0.5,
      'exercise_score': 0.5,
      'meditation_score': 0.0,
      'social_score': 0.5,
      'hydration_score': 0.5,
      'screen_time_score': 0.5,
      'sleep_hours_score': 0.5,
      'exercise_minutes_score': 0.0,
      'overall_score': 0.4,
      'recommendations': ['Registra m√°s d√≠as para obtener an√°lisis personalizado'],
      'data_quality': 0.0,
    };
  }
  
  // ============================================================================
  // üß† INTELLIGENT ANALYTICS HELPER METHODS
  // ============================================================================
  
  /// Analyze mood volatility patterns
  Future<Map<String, dynamic>> _analyzeMoodVolatility(Database db, int userId, DateTime start, DateTime end) async {
    final moodData = await db.rawQuery('''
      SELECT mood_score, entry_date
      FROM daily_entries 
      WHERE user_id = ? AND entry_date BETWEEN ? AND ? AND mood_score IS NOT NULL
      ORDER BY entry_date
    ''', [userId, start.toIso8601String().split('T')[0], end.toIso8601String().split('T')[0]]);
    
    if (moodData.length < 3) {
      return {'volatility_level': 'insufficient_data', 'stability_score': 0.0};
    }
    
    final moods = moodData.map((e) => (e['mood_score'] as int).toDouble()).toList();
    final mean = moods.reduce((a, b) => a + b) / moods.length;
    final variance = moods.map((m) => math.pow(m - mean, 2)).reduce((a, b) => a + b) / moods.length;
    final stdDev = math.sqrt(variance);
    
    String volatilityLevel;
    if (stdDev < 1.0) {
      volatilityLevel = 'very_stable';
    } else if (stdDev < 1.5) {
      volatilityLevel = 'stable';
    } else if (stdDev < 2.0) {
      volatilityLevel = 'moderate';
    } else if (stdDev < 2.5) {
      volatilityLevel = 'volatile';
    } else {
      volatilityLevel = 'very_volatile';
    }
    
    return {
      'volatility_level': volatilityLevel,
      'stability_score': (1.0 - (stdDev / 5.0)).clamp(0.0, 1.0),
      'standard_deviation': stdDev,
      'mean_mood': mean,
      'data_points': moods.length,
    };
  }
  
  /// Detect stress patterns and triggers
  Future<Map<String, dynamic>> _detectStressPatterns(Database db, int userId, DateTime start, DateTime end) async {
    final stressData = await db.rawQuery('''
      SELECT 
        stress_level, 
        entry_date,
        strftime('%w', entry_date) as day_of_week,
        mood_score,
        energy_level
      FROM daily_entries 
      WHERE user_id = ? AND entry_date BETWEEN ? AND ? AND stress_level IS NOT NULL
      ORDER BY entry_date
    ''', [userId, start.toIso8601String().split('T')[0], end.toIso8601String().split('T')[0]]);
    
    if (stressData.isEmpty) {
      return {'pattern': 'insufficient_data'};
    }
    
    final avgStress = stressData.map((e) => (e['stress_level'] as int).toDouble()).reduce((a, b) => a + b) / stressData.length;
    final highStressDays = stressData.where((e) => (e['stress_level'] as int) >= 7).length;
    final stressRate = highStressDays / stressData.length;
    
    // Analyze by day of week
    final stressByDay = <String, List<double>>{};
    for (final entry in stressData) {
      final dayOfWeek = entry['day_of_week'].toString();
      final stress = (entry['stress_level'] as int).toDouble();
      stressByDay.putIfAbsent(dayOfWeek, () => []).add(stress);
    }
    
    final dayAverages = stressByDay.map((day, stresses) => 
      MapEntry(day, stresses.reduce((a, b) => a + b) / stresses.length));
    
    return {
      'average_stress': avgStress,
      'high_stress_rate': stressRate,
      'stress_by_day': dayAverages,
      'trend': _calculateTrend(stressData.map((e) => (e['stress_level'] as int).toDouble()).toList()),
      'alert_level': stressRate > 0.4 ? 'high' : stressRate > 0.2 ? 'medium' : 'low',
    };
  }
  
  /// Find energy optimization opportunities
  Future<Map<String, dynamic>> _findEnergyOptimization(Database db, int userId, DateTime start, DateTime end) async {
    final energyData = await db.rawQuery('''
      SELECT 
        energy_level,
        sleep_quality,
        physical_activity,
        sleep_hours,
        exercise_minutes,
        entry_date
      FROM daily_entries 
      WHERE user_id = ? AND entry_date BETWEEN ? AND ? AND energy_level IS NOT NULL
      ORDER BY entry_date
    ''', [userId, start.toIso8601String().split('T')[0], end.toIso8601String().split('T')[0]]);
    
    if (energyData.isEmpty) {
      return {'status': 'insufficient_data'};
    }
    
    final avgEnergy = energyData.map((e) => (e['energy_level'] as int).toDouble()).reduce((a, b) => a + b) / energyData.length;
    final lowEnergyDays = energyData.where((e) => (e['energy_level'] as int) <= 4).length;
    final lowEnergyRate = lowEnergyDays / energyData.length;
    
    // Find correlations with energy
    final opportunities = <String>[];
    
    // Check sleep correlation
    final sleepCorr = await _calculateCorrelation(db, userId, 'sleep_quality', 'energy_level', start, end);
    if (sleepCorr['correlation'] > 0.3) {
      opportunities.add('improve_sleep_quality');
    }
    
    // Check exercise correlation
    final exerciseCorr = await _calculateCorrelation(db, userId, 'physical_activity', 'energy_level', start, end);
    if (exerciseCorr['correlation'] > 0.2) {
      opportunities.add('increase_physical_activity');
    }
    
    return {
      'average_energy': avgEnergy,
      'low_energy_rate': lowEnergyRate,
      'optimization_opportunities': opportunities,
      'energy_trend': _calculateTrend(energyData.map((e) => (e['energy_level'] as int).toDouble()).toList()),
      'priority_level': lowEnergyRate > 0.5 ? 'high' : lowEnergyRate > 0.3 ? 'medium' : 'low',
    };
  }

  /// Obtener comparaci√≥n semanal detallada
  Future<Map<String, dynamic>> getWeeklyComparison(int userId) async {
    try {
      final db = await database;

      // Obtener datos de las √∫ltimas 2 semanas
      final weeklyData = await db.rawQuery('''
        SELECT
          entry_date,
          mood_score,
          energy_level,
          stress_level,
          sleep_quality,
          physical_activity,
          CASE
            WHEN entry_date >= date('now', '-7 days') THEN 'current'
            ELSE 'previous'
          END as week_period
        FROM daily_entries
        WHERE user_id = ?
          AND entry_date >= date('now', '-14 days')
        ORDER BY entry_date DESC
      ''', [userId]);

      if (weeklyData.length < 7) {
        return {
          'has_data': false,
          'message': 'Necesitas al menos una semana de datos para comparar',
          'current_week_entries': weeklyData.where((e) => e['week_period'] == 'current').length,
          'previous_week_entries': weeklyData.where((e) => e['week_period'] == 'previous').length,
        };
      }

      final currentWeek = weeklyData.where((e) => e['week_period'] == 'current').toList();
      final previousWeek = weeklyData.where((e) => e['week_period'] == 'previous').toList();

      if (currentWeek.isEmpty || previousWeek.isEmpty) {
        return {'has_data': false, 'message': 'Datos insuficientes para comparaci√≥n'};
      }

      // Calcular promedios para cada semana
      final currentAvg = _calculateWeekAverages(currentWeek);
      final previousAvg = _calculateWeekAverages(previousWeek);

      // Calcular cambios
      final changes = {
        'mood_change': currentAvg['mood']! - previousAvg['mood']!,
        'energy_change': currentAvg['energy']! - previousAvg['energy']!,
        'stress_change': currentAvg['stress']! - previousAvg['stress']!,
        'sleep_change': currentAvg['sleep']! - previousAvg['sleep']!,
        'exercise_change': currentAvg['exercise']! - previousAvg['exercise']!,
      };

      // Determinar tendencia general
      final positiveChanges = changes.values.where((change) => change > 0.5).length;
      final negativeChanges = changes.values.where((change) => change < -0.5).length;

      String overallTrend;
      if (positiveChanges > negativeChanges) {
        overallTrend = 'improving';
      } else if (negativeChanges > positiveChanges) {
        overallTrend = 'declining';
      } else {
        overallTrend = 'stable';
      }

      return {
        'has_data': true,
        'current_week': currentAvg,
        'previous_week': previousAvg,
        'changes': changes,
        'overall_trend': overallTrend,
        'improvement_areas': _getImprovementAreas(changes),
        'current_week_entries': currentWeek.length,
        'previous_week_entries': previousWeek.length,
      };

    } catch (e) {
      _logger.e('‚ùå Error obteniendo comparaci√≥n semanal: $e');
      return {'has_data': false, 'message': 'Error al obtener datos de comparaci√≥n'};
    }
  }

  /// Calcular promedios de una semana
  Map<String, double> _calculateWeekAverages(List<Map<String, dynamic>> weekData) {
    if (weekData.isEmpty) {
      return {
        'mood': 5.0,
        'energy': 5.0,
        'stress': 5.0,
        'sleep': 5.0,
        'exercise': 5.0,
      };
    }

    final mood = weekData.map((e) => (e['mood_score'] as int? ?? 5).toDouble()).reduce((a, b) => a + b) / weekData.length;
    final energy = weekData.map((e) => (e['energy_level'] as int? ?? 5).toDouble()).reduce((a, b) => a + b) / weekData.length;
    final stress = weekData.map((e) => (e['stress_level'] as int? ?? 5).toDouble()).reduce((a, b) => a + b) / weekData.length;
    final sleep = weekData.map((e) => (e['sleep_quality'] as int? ?? 5).toDouble()).reduce((a, b) => a + b) / weekData.length;
    final exercise = weekData.map((e) => (e['physical_activity'] as int? ?? 5).toDouble()).reduce((a, b) => a + b) / weekData.length;

    return {
      'mood': mood,
      'energy': energy,
      'stress': stress,
      'sleep': sleep,
      'exercise': exercise,
    };
  }

  /// Identificar √°reas de mejora basadas en cambios
  List<String> _getImprovementAreas(Map<String, double> changes) {
    final areas = <String>[];

    if (changes['mood_change']! < -0.5) areas.add('Estado de √°nimo');
    if (changes['energy_change']! < -0.5) areas.add('Niveles de energ√≠a');
    if (changes['stress_change']! > 0.5) areas.add('Manejo del estr√©s');
    if (changes['sleep_change']! < -0.5) areas.add('Calidad del sue√±o');
    if (changes['exercise_change']! < -0.5) areas.add('Actividad f√≠sica');

    return areas;
  }

  /// Obtener calendario de estados de √°nimo para visualizaci√≥n
  Future<List<Map<String, dynamic>>> getMoodCalendarData(int userId, {int days = 30}) async {
    try {
      final db = await database;

      final calendarData = await db.rawQuery('''
        SELECT
          entry_date,
          mood_score,
          energy_level,
          stress_level,
          (CAST(mood_score as REAL) + CAST(energy_level as REAL) + (10 - CAST(stress_level as REAL))) / 3.0 as avg_score
        FROM daily_entries
        WHERE user_id = ?
          AND entry_date >= date('now', '-$days days')
        ORDER BY entry_date DESC
      ''', [userId]);

      return calendarData.map((day) {
        final date = DateTime.parse(day['entry_date'] as String);
        final avgScore = day['avg_score'] as double? ?? 5.0;

        String emoji;
        Color color;

        if (avgScore >= 7) {
          emoji = 'üòä';
          color = Colors.green;
        } else if (avgScore >= 5) {
          emoji = 'üòê';
          color = Colors.blue;
        } else {
          emoji = 'üòî';
          color = Colors.orange;
        }

        return {
          'date': date,
          'mood': day['mood_score'],
          'energy': day['energy_level'],
          'stress': day['stress_level'],
          'avg_score': avgScore,
          'emoji': emoji,
          'color': color,
        };
      }).toList();

    } catch (e) {
      _logger.e('‚ùå Error obteniendo datos del calendario: $e');
      return [];
    }
  }

  /// Obtener recomendaciones personalizadas basadas en patrones del usuario
  Future<List<Map<String, dynamic>>> getPersonalizedRecommendations(int userId) async {
    try {
      final db = await database;

      // Obtener an√°lisis de las √∫ltimas 2 semanas
      final recentAnalysis = await db.rawQuery('''
        SELECT
          AVG(CAST(mood_score as REAL)) as avg_mood,
          AVG(CAST(energy_level as REAL)) as avg_energy,
          AVG(CAST(stress_level as REAL)) as avg_stress,
          AVG(CAST(sleep_quality as REAL)) as avg_sleep,
          AVG(CAST(physical_activity as REAL)) as avg_exercise,
          AVG(CAST(meditation_minutes as REAL)) as avg_meditation,
          AVG(CAST(social_interaction as REAL)) as avg_social,
          COUNT(*) as total_entries,
          COUNT(CASE WHEN mood_score >= 7 THEN 1 END) as good_mood_days,
          COUNT(CASE WHEN stress_level >= 7 THEN 1 END) as high_stress_days
        FROM daily_entries
        WHERE user_id = ?
          AND entry_date >= date('now', '-14 days')
      ''', [userId]);

      if (recentAnalysis.isEmpty) {
        return _getDefaultRecommendations();
      }

      final analysis = recentAnalysis.first;
      final recommendations = <Map<String, dynamic>>[];

      final avgMood = analysis['avg_mood'] as double? ?? 5.0;
      final avgStress = analysis['avg_stress'] as double? ?? 5.0;
      final avgSleep = analysis['avg_sleep'] as double? ?? 5.0;
      final avgExercise = analysis['avg_exercise'] as double? ?? 5.0;
      final avgMeditation = analysis['avg_meditation'] as double? ?? 0.0;
      final avgSocial = analysis['avg_social'] as double? ?? 5.0;
      final highStressDays = analysis['high_stress_days'] as int? ?? 0;

      // Recomendaciones basadas en estr√©s
      if (avgStress >= 7.0 || highStressDays >= 3) {
        recommendations.add({
          'icon': 'üßò‚Äç‚ôÄÔ∏è',
          'title': 'Sesi√≥n de Mindfulness',
          'description': 'Tu nivel de estr√©s ha estado alto. Prueba 10 minutos de meditaci√≥n',
          'type': 'stress_relief',
          'priority': 'high',
          'action': 'meditate',
          'estimated_time': '10 min',
          'urgency_score': 9,
        });
      }

      // Recomendaciones basadas en estado de √°nimo
      if (avgMood < 5.0) {
        recommendations.add({
          'icon': 'üå±',
          'title': 'Pr√°ctica de Gratitud',
          'description': 'Reflexiona sobre 3 cosas positivas de tu d√≠a para mejorar tu √°nimo',
          'type': 'mood_boost',
          'priority': 'medium',
          'action': 'gratitude',
          'estimated_time': '5 min',
          'urgency_score': 7,
        });
      }

      // Recomendaciones basadas en sue√±o
      if (avgSleep < 6.0) {
        recommendations.add({
          'icon': 'üò¥',
          'title': 'Higiene del Sue√±o',
          'description': 'Tu calidad de sue√±o puede mejorar. Establece una rutina nocturna',
          'type': 'sleep',
          'priority': 'medium',
          'action': 'plan_sleep',
          'estimated_time': '5 min',
          'urgency_score': 6,
        });
      }

      // Recomendaciones basadas en ejercicio
      if (avgExercise < 5.0) {
        recommendations.add({
          'icon': 'üèÉ‚Äç‚ôÄÔ∏è',
          'title': 'Actividad F√≠sica',
          'description': 'Una caminata de 15 minutos puede aumentar tu energ√≠a y mejorar tu √°nimo',
          'type': 'exercise',
          'priority': 'low',
          'action': 'walk',
          'estimated_time': '15 min',
          'urgency_score': 4,
        });
      }

      // Recomendaciones basadas en meditaci√≥n
      if (avgMeditation < 5.0) {
        recommendations.add({
          'icon': 'üéØ',
          'title': 'Mindfulness Diario',
          'description': 'Incorpora 5 minutos de meditaci√≥n a tu rutina diaria',
          'type': 'mindfulness',
          'priority': 'low',
          'action': 'start_meditation_habit',
          'estimated_time': '5 min',
          'urgency_score': 3,
        });
      }

      // Recomendaciones sociales
      if (avgSocial < 5.0) {
        recommendations.add({
          'icon': 'üë•',
          'title': 'Conexi√≥n Social',
          'description': 'Contacta con un amigo o familiar para fortalecer tus v√≠nculos',
          'type': 'social',
          'priority': 'low',
          'action': 'connect',
          'estimated_time': '10 min',
          'urgency_score': 2,
        });
      }

      // Ordenar por urgencia y limitar a las top 3
      recommendations.sort((a, b) => (b['urgency_score'] as int).compareTo(a['urgency_score'] as int));

      return recommendations.take(3).toList();

    } catch (e) {
      _logger.e('‚ùå Error obteniendo recomendaciones: $e');
      return _getDefaultRecommendations();
    }
  }

  /// Recomendaciones por defecto cuando no hay datos suficientes
  List<Map<String, dynamic>> _getDefaultRecommendations() {
    return [
      {
        'icon': 'üìù',
        'title': 'Comienza tu registro',
        'description': 'Registra tu estado de √°nimo para obtener recomendaciones personalizadas',
        'type': 'onboarding',
        'priority': 'medium',
        'action': 'start_entry',
        'estimated_time': '2 min',
        'urgency_score': 5,
      },
    ];
  }

  /// Obtener challenges personalizados basados en el progreso del usuario
  Future<List<Map<String, dynamic>>> getPersonalizedChallenges(int userId) async {
    try {
      final db = await database;

      // Obtener estad√≠sticas del usuario
      final userStats = await db.rawQuery('''
        SELECT
          COUNT(*) as total_entries,
          COUNT(CASE WHEN entry_date >= date('now', '-7 days') THEN 1 END) as week_entries,
          AVG(CAST(meditation_minutes as REAL)) as avg_meditation,
          AVG(CAST(physical_activity as REAL)) as avg_exercise,
          AVG(CAST(sleep_quality as REAL)) as avg_sleep
        FROM daily_entries
        WHERE user_id = ?
      ''', [userId]);

      // Obtener racha actual
      final streakData = await getUserStreakData(userId);

      if (userStats.isEmpty) {
        return _getDefaultChallenges();
      }

      final stats = userStats.first;
      final challenges = <Map<String, dynamic>>[];
      final currentStreak = streakData['current_streak'] as int? ?? 0;
      final weekEntries = stats['week_entries'] as int? ?? 0;
      final avgMeditation = stats['avg_meditation'] as double? ?? 0.0;
      final avgExercise = stats['avg_exercise'] as double? ?? 0.0;

      // Challenge de racha diaria
      if (currentStreak < 7) {
        challenges.add({
          'id': 'weekly_streak',
          'title': 'Racha Semanal',
          'description': 'Completa 7 d√≠as seguidos registrando tu bienestar',
          'icon': 'üî•',
          'progress': currentStreak / 7.0,
          'target': 7,
          'current': currentStreak,
          'type': 'streak',
          'reward': '¬°Insignia de Constancia!',
          'priority': 'high',
        });
      } else if (currentStreak < 30) {
        challenges.add({
          'id': 'monthly_streak',
          'title': 'Racha del Mes',
          'description': 'Alcanza 30 d√≠as consecutivos de registro',
          'icon': 'üèÜ',
          'progress': currentStreak / 30.0,
          'target': 30,
          'current': currentStreak,
          'type': 'streak',
          'reward': '¬°Maestro de la Consistencia!',
          'priority': 'medium',
        });
      }

      // Challenge de meditaci√≥n
      if (avgMeditation < 10.0) {
        challenges.add({
          'id': 'meditation_week',
          'title': 'Semana Mindful',
          'description': 'Medita al menos 10 minutos por 5 d√≠as esta semana',
          'icon': 'üßò‚Äç‚ôÄÔ∏è',
          'progress': (avgMeditation / 10.0).clamp(0.0, 1.0),
          'target': 5,
          'current': (avgMeditation >= 10.0 ? weekEntries : 0),
          'type': 'meditation',
          'reward': '¬°Guru del Mindfulness!',
          'priority': 'medium',
        });
      }

      // Challenge de ejercicio
      if (avgExercise < 7.0) {
        challenges.add({
          'id': 'active_week',
          'title': 'Semana Activa',
          'description': 'Mant√©n un nivel de actividad f√≠sica alto por 4 d√≠as',
          'icon': 'üí™',
          'progress': (weekEntries > 0 ? math.min(weekEntries / 4.0, 1.0) : 0.0),
          'target': 4,
          'current': weekEntries,
          'type': 'exercise',
          'reward': '¬°Campe√≥n del Fitness!',
          'priority': 'low',
        });
      }

      // Challenge de bienestar general
      challenges.add({
        'id': 'wellbeing_balance',
        'title': 'Equilibrio Total',
        'description': 'Mant√©n todas tus m√©tricas de bienestar balanceadas por una semana',
        'icon': '‚öñÔ∏è',
        'progress': 0.3, // Calcular basado en balance real
        'target': 7,
        'current': 2,
        'type': 'balance',
        'reward': '¬°Maestro del Equilibrio!',
        'priority': 'high',
      });

      // Ordenar por prioridad y tomar m√°ximo 2
      challenges.sort((a, b) {
        final priorityOrder = {'high': 0, 'medium': 1, 'low': 2};
        return priorityOrder[a['priority']]!.compareTo(priorityOrder[b['priority']]!);
      });

      return challenges.take(2).toList();

    } catch (e) {
      _logger.e('‚ùå Error obteniendo challenges: $e');
      return _getDefaultChallenges();
    }
  }

  /// Challenges por defecto para nuevos usuarios
  List<Map<String, dynamic>> _getDefaultChallenges() {
    return [
      {
        'id': 'first_week',
        'title': 'Primeros Pasos',
        'description': 'Registra tu bienestar por 3 d√≠as esta semana',
        'icon': 'üå±',
        'progress': 0.0,
        'target': 3,
        'current': 0,
        'type': 'beginner',
        'reward': '¬°Bienvenido al bienestar!',
        'priority': 'high',
      },
    ];
  }

  /// Obtener datos de racha del usuario
  Future<Map<String, dynamic>> getUserStreakData(int userId) async {
    try {
      final db = await database;

      // Calcular racha actual
      final streakQuery = await db.rawQuery('''
        WITH RECURSIVE date_series AS (
          SELECT date('now') as check_date, 0 as days_back
          UNION ALL
          SELECT date(check_date, '-1 day'), days_back + 1
          FROM date_series
          WHERE days_back < 365
        ),
        user_entries AS (
          SELECT DISTINCT entry_date
          FROM daily_entries
          WHERE user_id = ?
        )
        SELECT COUNT(*) as current_streak
        FROM date_series ds
        LEFT JOIN user_entries ue ON ds.check_date = ue.entry_date
        WHERE ue.entry_date IS NOT NULL
        ORDER BY ds.check_date DESC
      ''', [userId]);

      final currentStreak = streakQuery.isNotEmpty ? (streakQuery.first['current_streak'] as int? ?? 0) : 0;

      // Calcular racha m√°s larga (simplificado)
      final longestStreakQuery = await db.rawQuery('''
        SELECT COUNT(*) as longest_streak
        FROM daily_entries
        WHERE user_id = ?
      ''', [userId]);

      final longestStreak = longestStreakQuery.isNotEmpty ? (longestStreakQuery.first['longest_streak'] as int? ?? 0) : 0;

      return {
        'current_streak': currentStreak,
        'longest_streak': math.max(longestStreak, currentStreak),
      };

    } catch (e) {
      _logger.e('‚ùå Error obteniendo datos de racha: $e');
      return {
        'current_streak': 0,
        'longest_streak': 0,
      };
    }
  }

  // ============================================================================
  // M√âTODOS PARA DATOS DE PRUEBA - OPTIMIZADOS PARA APK
  // ============================================================================

  // ‚úÖ M√âTODO PRINCIPAL CORREGIDO PARA APK
  Future<OptimizedUserModel?> createDeveloperAccount() async {
    try {
      final db = await database;
      _logger.i('üß™ Creando/accediendo a cuenta de desarrollador con datos avanzados...');

      // Verificar si existe la tabla personalized_challenges
      await _ensurePersonalizedChallengesTable(db);

      final existing = await db.query(
        'users',
        where: 'email = ?',
        whereArgs: ['dev@reflect.com'],
      );

      int userId;
      if (existing.isNotEmpty) {
        userId = existing.first['id'] as int;
        _logger.i('üîÑ Usando cuenta de desarrollador existente: $userId');
        // Regenerar datos para testing actualizado
        await generateComprehensiveTestData(userId);
      } else {
        final defaultPassword = 'devpassword123';
        final passwordHash = _hashPassword(defaultPassword);

        userId = await db.insert('users', {
          'name': 'Alex Developer',
          'email': 'dev@reflect.com',
          'password_hash': passwordHash,
          'avatar_emoji': 'üë®‚Äçüíª',
          'bio': 'Desarrollador explorando patrones de bienestar. Datos generados para an√°lisis completo de casos de uso.',
          'profile_picture_path': null,
          'preferences': '{}',
          'created_at': DateTime.now().millisecondsSinceEpoch ~/ 1000,
        });
        _logger.i('‚úÖ Cuenta de desarrollador creada: $userId');
        await generateComprehensiveTestData(userId);
      }

      return await getUserById(userId);

    } catch (e) {
      _logger.e('‚ùå Error creando cuenta desarrollador: $e');
      return null;
    }
  }

  /// Ensure personalized_challenges table exists (for existing databases)
  Future<void> _ensurePersonalizedChallengesTable(Database db) async {
    try {
      // Try to query the table to see if it exists
      await db.query('personalized_challenges', limit: 1);
      _logger.i('‚úÖ Tabla personalized_challenges ya existe');
    } catch (e) {
      // Table doesn't exist, create it
      _logger.i('üîß Creando tabla personalized_challenges...');
      await db.execute('''
        CREATE TABLE personalized_challenges (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          user_id INTEGER NOT NULL,
          title TEXT NOT NULL,
          description TEXT NOT NULL,
          challenge_type TEXT NOT NULL,
          difficulty TEXT NOT NULL DEFAULT 'medium',
          target_value REAL NOT NULL,
          current_progress REAL NOT NULL DEFAULT 0.0,
          reward_points INTEGER DEFAULT 0,
          is_active INTEGER DEFAULT 1,
          created_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),
          completed_at INTEGER,
          expires_at INTEGER,
          FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
        )
      ''');
      
      // Add indexes for the new table
      await db.execute('CREATE INDEX idx_challenges_user_active ON personalized_challenges (user_id, is_active)');
      await db.execute('CREATE INDEX idx_challenges_type ON personalized_challenges (user_id, challenge_type)');
      
      _logger.i('‚úÖ Tabla personalized_challenges creada exitosamente');
    }
  }

  // ============================================================================
  // GENERADOR DE DATOS DE PRUEBA MEJORADO PARA ALEX DEVELOPER
  // ============================================================================

  // ‚úÖ REEMPLAZA COMPLETAMENTE el m√©todo generateComprehensiveTestData()
// lib/data/services/optimized_database_service.dart

  // ============================================================================
  // GENERADOR DE DATOS DE PRUEBA SIMPLIFICADO PARA ALEX DEVELOPER
  // ============================================================================

  Future<void> generateComprehensiveTestData(int userId) async {
    try {
      final db = await database;
      _logger.i('üìä Generando datos AVANZADOS para Alex Developer (ID: $userId)');

      // Limpiar datos previos de forma segura
      try {
        await db.delete('daily_entries', where: 'user_id = ?', whereArgs: [userId]);
        await db.delete('interactive_moments', where: 'user_id = ?', whereArgs: [userId]);
        await db.delete('user_goals', where: 'user_id = ?', whereArgs: [userId]);
        await db.delete('personalized_challenges', where: 'user_id = ?', whereArgs: [userId]);
        _logger.i('üóëÔ∏è Datos previos limpiados');
      } catch (e) {
        _logger.w('‚ö†Ô∏è Error limpiando datos previos (continuando): $e');
      }

      // Generar casos de uso completos
      try {
        await _generateRealisticJourneyData(userId, db);
        _logger.i('‚úÖ Datos de journey generados');
      } catch (e) {
        _logger.w('‚ö†Ô∏è Error generando journey data: $e');
      }

      try {
        await _generateAdvancedMoments(userId, db);
        _logger.i('‚úÖ Momentos avanzados generados');
      } catch (e) {
        _logger.w('‚ö†Ô∏è Error generando momentos: $e');
      }

      try {
        await _generateProgressiveGoals(userId, db);
        _logger.i('‚úÖ Objetivos progresivos generados');
      } catch (e) {
        _logger.w('‚ö†Ô∏è Error generando objetivos: $e');
      }

      try {
        await _generatePersonalizedChallenges(userId, db);
        _logger.i('‚úÖ Desaf√≠os personalizados generados');
      } catch (e) {
        _logger.w('‚ö†Ô∏è Error generando desaf√≠os: $e');
      }

      try {
        await _generateMoodPatterns(userId, db);
        _logger.i('‚úÖ Patrones de √°nimo generados');
      } catch (e) {
        _logger.w('‚ö†Ô∏è Error generando patrones: $e');
      }

      _logger.i('‚úÖ Datos AVANZADOS generados exitosamente - Casos de uso completos para an√°lisis');
    } catch (e) {
      _logger.e('‚ùå Error generando datos avanzados: $e');
      // No hacer rethrow para no romper la creaci√≥n de usuario
    }
  }

  // ============================================================================
  // ADVANCED DATA GENERATION METHODS FOR COMPREHENSIVE ANALYSIS
  // ============================================================================

  /// Generates realistic user journey data covering multiple scenarios
  Future<void> _generateRealisticJourneyData(int userId, Database db) async {
    _logger.i('üé≠ Generando journey realista con m√∫ltiples escenarios...');
    
    final now = DateTime.now();
    final random = math.Random();
    
    // Generate 120 days of comprehensive data with realistic patterns
    for (int daysAgo = 120; daysAgo >= 0; daysAgo--) {
      final date = now.subtract(Duration(days: daysAgo));
      await _generateRealisticDayEntry(userId, db, date, daysAgo, random);
    }
  }

  /// Generate a realistic day entry with contextual factors
  Future<void> _generateRealisticDayEntry(int userId, Database db, DateTime date, int daysAgo, math.Random random) async {
    try {
      // Define life periods with different characteristics
      double baseMood, baseEnergy, baseStress;
      String contextualNote = '';
      
      if (daysAgo > 90) {
        // Crisis period (3+ months ago)
        baseMood = 2.5 + random.nextDouble() * 3.0; // 2.5-5.5
        baseEnergy = 2.0 + random.nextDouble() * 2.5; // 2.0-4.5
        baseStress = 7.0 + random.nextDouble() * 2.5; // 7.0-9.5
        contextualNote = _getCrisisPeriodNote(random);
      } else if (daysAgo > 60) {
        // Recovery period (2-3 months ago)
        baseMood = 4.0 + random.nextDouble() * 3.5; // 4.0-7.5
        baseEnergy = 3.5 + random.nextDouble() * 3.0; // 3.5-6.5
        baseStress = 5.5 + random.nextDouble() * 3.0; // 5.5-8.5
        contextualNote = _getRecoveryPeriodNote(random);
      } else if (daysAgo > 30) {
        // Improvement period (1-2 months ago)
        baseMood = 6.0 + random.nextDouble() * 2.5; // 6.0-8.5
        baseEnergy = 5.5 + random.nextDouble() * 3.0; // 5.5-8.5
        baseStress = 3.5 + random.nextDouble() * 4.0; // 3.5-7.5
        contextualNote = _getImprovementPeriodNote(random);
      } else {
        // Current thriving period (last month)
        baseMood = 7.0 + random.nextDouble() * 2.5; // 7.0-9.5
        baseEnergy = 6.5 + random.nextDouble() * 2.5; // 6.5-9.0
        baseStress = 2.0 + random.nextDouble() * 3.5; // 2.0-5.5
        contextualNote = _getThrivingPeriodNote(random);
      }

      // Add weekend/weekday variations
      final weekdayModifier = _getAdvancedWeekdayModifier(date.weekday, random);
      final mood = (baseMood + weekdayModifier.mood).clamp(1.0, 10.0);
      final energy = (baseEnergy + weekdayModifier.energy).clamp(1.0, 10.0);
      final stress = (baseStress + weekdayModifier.stress).clamp(1.0, 10.0);

      // Generate comprehensive reflection
      final reflection = _generateContextualReflection(mood, energy, stress, contextualNote, date, random);
      
      // Add seasonal adjustments
      final seasonalMood = _addSeasonalAdjustments(mood, date);
      
      final dateStr = date.toIso8601String().split('T')[0];
      final createdAtTimestamp = date.millisecondsSinceEpoch ~/ 1000;

      final entryData = {
        'user_id': userId,
        'entry_date': dateStr,
        'free_reflection': reflection,
        'mood_score': seasonalMood.round(),
        'energy_level': energy.round(),
        'stress_level': stress.round(),
        'worth_it': seasonalMood > 6.5 ? 1 : 0,
        'created_at': createdAtTimestamp,
      };

      await db.insert(
        'daily_entries',
        entryData,
        conflictAlgorithm: ConflictAlgorithm.replace,
      );

    } catch (e) {
      _logger.e('‚ùå Error insertando entrada realista para fecha $date: $e');
    }
  }

  /// Generate personalized challenges based on user patterns
  Future<void> _generatePersonalizedChallenges(int userId, Database db) async {
    _logger.i('üéØ Generando desaf√≠os personalizados...');
    
    final challenges = [
      {
        'user_id': userId,
        'title': 'Streak de Consistencia',
        'description': 'Mant√©n una entrada diaria por 14 d√≠as consecutivos',
        'target_value': 14,
        'current_progress': 8,
        'challenge_type': 'streak',
        'difficulty': 'medium',
        'reward_points': 100,
        'is_active': 1,
        'created_at': DateTime.now().subtract(Duration(days: 10)).millisecondsSinceEpoch ~/ 1000,
      },
      {
        'user_id': userId,
        'title': 'Maestro del Estado de √Ånimo',
        'description': 'Alcanza un promedio de estado de √°nimo de 8+ por 7 d√≠as',
        'target_value': 8,
        'current_progress': 6,
        'challenge_type': 'mood_average',
        'difficulty': 'hard',
        'reward_points': 150,
        'is_active': 1,
        'created_at': DateTime.now().subtract(Duration(days: 5)).millisecondsSinceEpoch ~/ 1000,
      },
      {
        'user_id': userId,
        'title': 'Coleccionista de Momentos',
        'description': 'Captura 20 momentos positivos este mes',
        'target_value': 20,
        'current_progress': 12,
        'challenge_type': 'moments',
        'difficulty': 'easy',
        'reward_points': 75,
        'is_active': 1,
        'created_at': DateTime.now().subtract(Duration(days: 15)).millisecondsSinceEpoch ~/ 1000,
      },
    ];

    for (final challenge in challenges) {
      await db.insert('personalized_challenges', challenge);
    }
  }

  /// Generate mood patterns for advanced analytics
  Future<void> _generateMoodPatterns(int userId, Database db) async {
    _logger.i('üìä Generando patrones de estado de √°nimo...');
    
    // This method creates additional metadata for analytics
    // We'll add some weekend vs weekday patterns, seasonal patterns, etc.
    // The patterns are already embedded in the realistic journey data
  }

  /// Generate advanced moments with rich context
  Future<void> _generateAdvancedMoments(int userId, Database db) async {
    _logger.i('‚ú® Generando momentos avanzados...');
    
    final now = DateTime.now();
    final random = math.Random();
    
    final momentCategories = [
      {'category': 'gratitude', 'weight': 0.3},
      {'category': 'achievement', 'weight': 0.25},
      {'category': 'connection', 'weight': 0.2},
      {'category': 'growth', 'weight': 0.15},
      {'category': 'nature', 'weight': 0.1},
    ];
    
    // Generate 45 moments over the last 60 days
    for (int i = 0; i < 45; i++) {
      final daysAgo = random.nextInt(60);
      final date = now.subtract(Duration(days: daysAgo));
      
      final category = _selectWeightedCategory(momentCategories, random);
      final moment = _generateAdvancedMoment(category, date, random);
      
      await db.insert('interactive_moments', {
        'user_id': userId,
        'entry_date': date.toIso8601String().split('T')[0],
        'emoji': '‚ú®',
        'text': '${moment['title']}: ${moment['description']}',
        'type': 'positive',
        'category': category,
        'intensity': moment['intensity'],
        'timestamp': date.millisecondsSinceEpoch ~/ 1000,
        'created_at': date.millisecondsSinceEpoch ~/ 1000,
      });
    }
  }

  /// Generate progressive goals that show evolution
  Future<void> _generateProgressiveGoals(int userId, Database db) async {
    _logger.i('üéØ Generando objetivos progresivos...');
    
    final goals = [
      {
        'user_id': userId,
        'title': 'Consistencia Diaria Avanzada',
        'description': 'Mantener una pr√°ctica diaria de reflexi√≥n',
        'target_value': 30,
        'current_value': 23,
        'type': 'consistency',
        'status': 'active',
        'created_at': DateTime.now().subtract(Duration(days: 25)).millisecondsSinceEpoch ~/ 1000,
      },
      {
        'user_id': userId,
        'title': 'Equilibrio Emocional',
        'description': 'Mantener un promedio de estado de √°nimo estable (7+)',
        'target_value': 7,
        'current_value': 7.2,
        'type': 'mood',
        'status': 'completed',
        'created_at': DateTime.now().subtract(Duration(days: 40)).millisecondsSinceEpoch ~/ 1000,
        'completed_at': DateTime.now().subtract(Duration(days: 5)).millisecondsSinceEpoch ~/ 1000,
      },
      {
        'user_id': userId,
        'title': 'Gesti√≥n de Estr√©s',
        'description': 'Reducir niveles de estr√©s promedio a menos de 4',
        'target_value': 4,
        'current_value': 3.8,
        'type': 'stressReduction',
        'status': 'completed',
        'created_at': DateTime.now().subtract(Duration(days: 35)).millisecondsSinceEpoch ~/ 1000,
        'completed_at': DateTime.now().subtract(Duration(days: 10)).millisecondsSinceEpoch ~/ 1000,
      },
      {
        'user_id': userId,
        'title': 'Explorador de Momentos',
        'description': 'Documentar 50 momentos significativos',
        'target_value': 50,
        'current_value': 38,
        'type': 'positiveMoments',
        'status': 'active',
        'created_at': DateTime.now().subtract(Duration(days: 20)).millisecondsSinceEpoch ~/ 1000,
      },
    ];

    for (final goal in goals) {
      await db.insert('user_goals', goal);
    }
  }

  // Helper methods for contextual content generation
  String _getCrisisPeriodNote(math.Random random) {
    final notes = [
      'Atravesando un per√≠odo dif√≠cil, pero mantengo la esperanza',
      'Los d√≠as est√°n siendo complicados, pero cada peque√±o paso cuenta',
      'Buscando luz en medio de la tormenta',
      'Recordando que esto tambi√©n pasar√°',
      'Enfoc√°ndome en lo b√°sico: respirar, descansar, seguir',
    ];
    return notes[random.nextInt(notes.length)];
  }

  String _getRecoveryPeriodNote(math.Random random) {
    final notes = [
      'Empiezo a ver peque√±as mejoras en mi d√≠a a d√≠a',
      'Las cosas siguen siendo complicadas, pero hay momentos de claridad',
      'Estableciendo nuevas rutinas que me ayudan',
      'Aprendiendo a ser paciente conmigo mismo/a',
      'Cada d√≠a es una oportunidad para mejorar un poco',
    ];
    return notes[random.nextInt(notes.length)];
  }

  String _getImprovementPeriodNote(math.Random random) {
    final notes = [
      'Me siento m√°s equilibrado/a y con mejor energ√≠a',
      'Las estrategias que he estado implementando funcionan',
      'Noto cambios positivos en mi perspectiva',
      'Construyendo momentum hacia mis objetivos',
      'Celebrando el progreso, por peque√±o que sea',
    ];
    return notes[random.nextInt(notes.length)];
  }

  String _getThrivingPeriodNote(math.Random random) {
    final notes = [
      'Me siento en mi mejor momento, lleno/a de energ√≠a y prop√≥sito',
      'Todo parece fluir naturalmente hoy',
      'Agradecido/a por este per√≠odo de claridad y bienestar',
      'Aprovechando esta energ√≠a positiva para crear y conectar',
      'Sintiendo una profunda sensaci√≥n de equilibrio y paz',
    ];
    return notes[random.nextInt(notes.length)];
  }

  ({double mood, double energy, double stress}) _getAdvancedWeekdayModifier(int weekday, math.Random random) {
    switch (weekday) {
      case 1: // Monday
        return (mood: -0.5 + random.nextDouble() * 0.8, energy: -0.3 + random.nextDouble() * 0.6, stress: 0.2 + random.nextDouble() * 0.8);
      case 2: // Tuesday
        return (mood: -0.2 + random.nextDouble() * 0.7, energy: 0.0 + random.nextDouble() * 0.5, stress: 0.0 + random.nextDouble() * 0.6);
      case 3: // Wednesday
        return (mood: 0.1 + random.nextDouble() * 0.6, energy: 0.2 + random.nextDouble() * 0.4, stress: -0.1 + random.nextDouble() * 0.5);
      case 4: // Thursday
        return (mood: 0.3 + random.nextDouble() * 0.7, energy: 0.4 + random.nextDouble() * 0.6, stress: -0.2 + random.nextDouble() * 0.4);
      case 5: // Friday
        return (mood: 0.8 + random.nextDouble() * 0.9, energy: 0.6 + random.nextDouble() * 0.8, stress: -0.5 + random.nextDouble() * 0.3);
      case 6: // Saturday
        return (mood: 0.9 + random.nextDouble() * 0.8, energy: 0.3 + random.nextDouble() * 1.0, stress: -0.8 + random.nextDouble() * 0.2);
      case 7: // Sunday
        return (mood: 0.5 + random.nextDouble() * 0.9, energy: 0.0 + random.nextDouble() * 0.8, stress: -0.3 + random.nextDouble() * 0.4);
      default:
        return (mood: 0.0, energy: 0.0, stress: 0.0);
    }
  }

  String _generateContextualReflection(double mood, double energy, double stress, String contextNote, DateTime date, math.Random random) {
    final timeOfDay = random.nextBool() ? 'ma√±ana' : (random.nextBool() ? 'tarde' : 'noche');
    final baseReflection = contextNote;
    
    if (mood > 7.5) {
      final positiveAddons = [
        'Siento una energ√≠a incre√≠ble esta $timeOfDay.',
        'Todo parece posible cuando me siento as√≠.',
        'Quiero aprovechar este momento de claridad.',
        'Me siento conectado/a conmigo mismo/a y con mis objetivos.',
      ];
      return '$baseReflection ${positiveAddons[random.nextInt(positiveAddons.length)]}';
    } else if (mood < 4.0) {
      final challengingAddons = [
        'Esta $timeOfDay ha sido especialmente dif√≠cil.',
        'Necesito recordar que los sentimientos son temporales.',
        'Buscando peque√±as cosas por las que estar agradecido/a.',
        'Ma√±ana puede ser un d√≠a completamente diferente.',
      ];
      return '$baseReflection ${challengingAddons[random.nextInt(challengingAddons.length)]}';
    } else {
      final neutralAddons = [
        'Una $timeOfDay tranquila para reflexionar.',
        'Tomando las cosas paso a paso.',
        'Aprendiendo a valorar estos momentos de calma.',
        'Construyendo lentamente hacia algo mejor.',
      ];
      return '$baseReflection ${neutralAddons[random.nextInt(neutralAddons.length)]}';
    }
  }

  double _addSeasonalAdjustments(double mood, DateTime date) {
    final month = date.month;
    double adjustment = 0.0;
    
    // Winter blues (December, January, February)
    if (month == 12 || month == 1 || month == 2) {
      adjustment = -0.3;
    }
    // Spring energy (March, April, May)
    else if (month >= 3 && month <= 5) {
      adjustment = 0.2;
    }
    // Summer high (June, July, August)
    else if (month >= 6 && month <= 8) {
      adjustment = 0.4;
    }
    // Fall reflection (September, October, November)
    else {
      adjustment = 0.1;
    }
    
    return (mood + adjustment).clamp(1.0, 10.0);
  }

  String _selectWeightedCategory(List<Map<String, dynamic>> categories, math.Random random) {
    final totalWeight = categories.fold(0.0, (sum, cat) => sum + cat['weight']);
    final randomValue = random.nextDouble() * totalWeight;
    
    double currentWeight = 0.0;
    for (final category in categories) {
      currentWeight += category['weight'];
      if (randomValue <= currentWeight) {
        return category['category'];
      }
    }
    return categories.first['category'];
  }

  Map<String, dynamic> _generateAdvancedMoment(String category, DateTime date, math.Random random) {
    switch (category) {
      case 'gratitude':
        final gratitudeMoments = [
          {'title': 'Momento de Gratitud', 'description': 'Agradecido/a por las peque√±as cosas que hacen la vida hermosa', 'intensity': 7 + random.nextInt(3)},
          {'title': 'Conexi√≥n Familiar', 'description': 'Una conversaci√≥n profunda que me record√≥ lo importante que es estar presente', 'intensity': 8 + random.nextInt(2)},
          {'title': 'Belleza Cotidiana', 'description': 'Encontr√© belleza en lo ordinario y me sent√≠ profundamente agradecido/a', 'intensity': 6 + random.nextInt(4)},
        ];
        return gratitudeMoments[random.nextInt(gratitudeMoments.length)];
      
      case 'achievement':
        final achievementMoments = [
          {'title': 'Logro Personal', 'description': 'Complet√© algo que hab√≠a estado posponiendo y me siento incre√≠blemente satisfecho/a', 'intensity': 8 + random.nextInt(2)},
          {'title': 'Superaci√≥n Personal', 'description': 'Enfrent√© un miedo y sal√≠ fortalecido/a de la experiencia', 'intensity': 9 + random.nextInt(1)},
          {'title': 'Progreso Constante', 'description': 'Peque√±os pasos que se acumulan en un progreso significativo', 'intensity': 7 + random.nextInt(2)},
        ];
        return achievementMoments[random.nextInt(achievementMoments.length)];
      
      case 'connection':
        final connectionMoments = [
          {'title': 'Conexi√≥n Humana', 'description': 'Una conversaci√≥n que me hizo sentir verdaderamente comprendido/a', 'intensity': 8 + random.nextInt(2)},
          {'title': 'Momento de Empat√≠a', 'description': 'Pude estar presente para alguien que lo necesitaba', 'intensity': 7 + random.nextInt(3)},
          {'title': 'Comunidad', 'description': 'Me sent√≠ parte de algo m√°s grande que yo mismo/a', 'intensity': 6 + random.nextInt(4)},
        ];
        return connectionMoments[random.nextInt(connectionMoments.length)];
      
      case 'growth':
        final growthMoments = [
          {'title': 'Aprendizaje Profundo', 'description': 'Una revelaci√≥n que cambi√≥ mi perspectiva sobre algo importante', 'intensity': 8 + random.nextInt(2)},
          {'title': 'Autoconocimiento', 'description': 'Descubr√≠ algo nuevo sobre m√≠ mismo/a que me ayuda a crecer', 'intensity': 7 + random.nextInt(3)},
          {'title': 'Sabidur√≠a Pr√°ctica', 'description': 'Aplic√© algo que hab√≠a aprendido y funcion√≥ perfectamente', 'intensity': 6 + random.nextInt(4)},
        ];
        return growthMoments[random.nextInt(growthMoments.length)];
      
      case 'nature':
        final natureMoments = [
          {'title': 'Conexi√≥n con la Naturaleza', 'description': 'Un momento de paz absoluta rodeado/a de la belleza natural', 'intensity': 8 + random.nextInt(2)},
          {'title': 'Renovaci√≥n al Aire Libre', 'description': 'El aire fresco y el sol renovaron completamente mi energ√≠a', 'intensity': 7 + random.nextInt(3)},
          {'title': 'Contemplaci√≥n Natural', 'description': 'Observando la naturaleza encontr√© perspectiva sobre mis propios desaf√≠os', 'intensity': 6 + random.nextInt(4)},
        ];
        return natureMoments[random.nextInt(natureMoments.length)];
      
      default:
        return {'title': 'Momento Especial', 'description': 'Un momento que vali√≥ la pena recordar', 'intensity': 7};
    }
  }

  Future<void> _generateSimpleHistoricalData(int userId, Database db) async {
    _logger.i('üìà Generando datos hist√≥ricos B√ÅSICOS...');

    final now = DateTime.now();
    final random = math.Random();

    // Generar datos para los √∫ltimos 90 d√≠as
    for (int daysAgo = 90; daysAgo >= 0; daysAgo--) {
      // Solo generar datos para el 70% de los d√≠as (m√°s realista)
      if (random.nextDouble() < 0.7) {
        final date = now.subtract(Duration(days: daysAgo));
        await _generateSimpleDayEntry(userId, db, date, random);
      }
    }

    // Asegurar que HOY tiene una entrada
    await _generateTodayEntry(userId, db, now);
  }

  Future<void> _generateSimpleDayEntry(int userId, Database db, DateTime date, math.Random random) async {
    try {
      // Simular diferentes per√≠odos de la vida
      final daysAgo = DateTime.now().difference(date).inDays;

      // Factores base seg√∫n el per√≠odo
      double baseMood, baseEnergy, baseStress;

      if (daysAgo > 60) {
        // Per√≠odo m√°s dif√≠cil (hace 2+ meses)
        baseMood = 3.5 + random.nextDouble() * 2.5; // 3.5-6
        baseEnergy = 3.0 + random.nextDouble() * 2.0; // 3-5
        baseStress = 6.0 + random.nextDouble() * 3.0; // 6-9
      } else if (daysAgo > 30) {
        // Per√≠odo de mejora (√∫ltimo mes)
        baseMood = 5.0 + random.nextDouble() * 3.0; // 5-8
        baseEnergy = 5.0 + random.nextDouble() * 2.5; // 5-7.5
        baseStress = 4.0 + random.nextDouble() * 3.0; // 4-7
      } else {
        // Per√≠odo actual (√∫ltimas 4 semanas)
        baseMood = 6.5 + random.nextDouble() * 2.5; // 6.5-9
        baseEnergy = 6.0 + random.nextDouble() * 3.0; // 6-9
        baseStress = 2.0 + random.nextDouble() * 4.0; // 2-6
      }

      // Factores del d√≠a de la semana
      final weekdayFactor = _getWeekdayMoodFactor(date.weekday, random);

      // Calcular valores finales
      final mood = (baseMood + weekdayFactor).clamp(1.0, 10.0);
      final energy = (baseEnergy + weekdayFactor * 0.7).clamp(1.0, 10.0);
      final stress = (baseStress - weekdayFactor * 0.5).clamp(1.0, 10.0);

      // Generar reflexi√≥n simple
      final reflection = _generateSimpleReflection(mood, energy, stress, date, random);

      // Formatear fecha para BD
      final dateStr = date.toIso8601String().split('T')[0];
      final createdAtTimestamp = date.millisecondsSinceEpoch ~/ 1000;

      // ‚úÖ USAR SOLO COLUMNAS QUE REALMENTE EXISTEN
      final entryData = {
        'user_id': userId,
        'entry_date': dateStr,
        'free_reflection': reflection,
        'mood_score': mood.round(),
        'energy_level': energy.round(),
        'stress_level': stress.round(),
        'worth_it': mood > 6 ? 1 : 0,
        'created_at': createdAtTimestamp,
      };

      await db.insert(
        'daily_entries',
        entryData,
        conflictAlgorithm: ConflictAlgorithm.replace,
      );

      _logger.d('‚úÖ Entrada simple generada para $dateStr: Mood ${mood.round()}/10');

    } catch (e) {
      _logger.e('‚ùå Error insertando entrada simple para fecha $date: $e');
      // Continuar con otras fechas
    }
  }

  double _getWeekdayMoodFactor(int weekday, math.Random random) {
    switch (weekday) {
      case 1: // Lunes
        return -0.5 + random.nextDouble() * 0.5; // -0.5 a 0
      case 2: // Martes
        return -0.2 + random.nextDouble() * 0.6; // -0.2 a 0.4
      case 3: // Mi√©rcoles
        return 0.0 + random.nextDouble() * 0.4; // 0 a 0.4
      case 4: // Jueves
        return 0.2 + random.nextDouble() * 0.4; // 0.2 a 0.6
      case 5: // Viernes
        return 0.5 + random.nextDouble() * 0.8; // 0.5 a 1.3
      case 6: // S√°bado
        return 0.8 + random.nextDouble() * 1.0; // 0.8 a 1.8
      case 7: // Domingo
        return 0.3 + random.nextDouble() * 0.8; // 0.3 a 1.1
      default:
        return 0.0;
    }
  }

  String _generateSimpleReflection(double mood, double energy, double stress, DateTime date, math.Random random) {
    // Reflexiones base seg√∫n el estado de √°nimo
    final List<String> highMoodReflections = [
      "Hoy ha sido un d√≠a realmente bueno. Me siento con energ√≠a y motivado para seguir adelante.",
      "Todo fluye naturalmente hoy. Estoy en una buena racha y aprovecho esta energ√≠a positiva.",
      "Me despierto con ganas de afrontar el d√≠a. Las cosas van bien y siento que estoy creciendo.",
      "Hoy he logrado varios objetivos peque√±os que me hacen sentir orgulloso de mi progreso.",
      "La productividad est√° en su punto m√°ximo. Me siento imparable y enfocado.",
      "Es incre√≠ble c√≥mo algunas conversaciones pueden cambiar toda la perspectiva del d√≠a.",
      "Siento gratitud por las peque√±as cosas que hacen que la vida valga la pena.",
    ];

    final List<String> mediumMoodReflections = [
      "Un d√≠a normal, ni especialmente bueno ni malo. Estoy ok y eso tambi√©n est√° bien.",
      "Hay altibajos, pero en general me siento equilibrado y en paz conmigo mismo.",
      "Algunos momentos buenos, otros m√°s desafiantes. As√≠ es la vida y lo acepto.",
      "Me siento estable hoy, sin grandes emociones en ninguna direcci√≥n.",
      "Ha sido un d√≠a productivo, aunque no extraordinario. Cada paso cuenta.",
      "Estoy aprendiendo a valorar los d√≠as tranquilos como este.",
      "Peque√±os progresos, pero progresos al fin y al cabo. La constancia importa.",
    ];

    final List<String> lowMoodReflections = [
      "Hoy ha sido complicado. Me cuesta encontrar motivaci√≥n, pero s√© que es temporal.",
      "Siento que estoy en una mala racha. Espero que pase pronto y conf√≠o en que as√≠ ser√°.",
      "No ha sido mi mejor d√≠a. Necesito descansar y reflexionar sobre lo que siento.",
      "Me siento abrumado por algunas situaciones. Necesito tomarme un respiro.",
      "D√≠a dif√≠cil, pero recuerdo que es temporal. Ma√±ana ser√° diferente.",
      "A veces los d√≠as grises son necesarios para valorar los soleados.",
      "Estoy procesando algunas emociones dif√≠ciles. Es parte del crecimiento personal.",
    ];

    // Seleccionar reflexi√≥n seg√∫n mood
    List<String> pool;
    if (mood >= 7) {
      pool = highMoodReflections;
    } else if (mood >= 4) {
      pool = mediumMoodReflections;
    } else {
      pool = lowMoodReflections;
    }

    String baseReflection = pool[random.nextInt(pool.length)];

    // Agregar contexto del d√≠a de la semana
    if (date.weekday == 1) {
      baseReflection += " Los lunes siempre son un nuevo comienzo.";
    } else if (date.weekday == 5) {
      baseReflection += " ¬°Por fin viernes! El fin de semana se siente cerca.";
    } else if (date.weekday >= 6) {
      baseReflection += " Aprovecho el fin de semana para recargar energ√≠as.";
    }

    return baseReflection;
  }

  Future<void> _generateTodayEntry(int userId, Database db, DateTime now) async {
    _logger.i('üìÖ Generando entrada especial para HOY');

    final dateStr = now.toIso8601String().split('T')[0];
    final createdAtTimestamp = now.millisecondsSinceEpoch ~/ 1000;

    final todayReflection = '''¬°Qu√© d√≠a tan incre√≠ble para estar trabajando en Reflect!

Como desarrollador, estoy fascinado por c√≥mo esta app est√° evolucionando. Hoy me he centrado en optimizar la generaci√≥n de datos de prueba y la verdad es que ver c√≥mo los datos cobran vida es emocionante.

He estado experimentando con nuevos patrones de base de datos y me siento muy productivo. El feedback loop entre c√≥digo-compilaci√≥n-testing est√° fluyendo perfectamente.

Creo que estamos construyendo algo realmente valioso aqu√≠. Una herramienta que no solo registra datos, sino que ayuda a las personas a entenderse mejor a s√≠ mismas.

F√≠sicamente me siento bien - he mantenido mi rutina de ejercicio y eso definitivamente impacta mi energ√≠a para programar.''';

    final entryData = {
      'user_id': userId,
      'entry_date': dateStr,
      'free_reflection': todayReflection,
      'mood_score': 8,
      'energy_level': 8,
      'stress_level': 3,
      'worth_it': 1,
      'created_at': createdAtTimestamp,
    };

    try {
      await db.insert(
        'daily_entries',
        entryData,
        conflictAlgorithm: ConflictAlgorithm.replace,
      );
      _logger.i('‚úÖ Entrada de HOY generada exitosamente');
    } catch (e) {
      _logger.e('‚ùå Error generando entrada de hoy: $e');
    }
  }

  Future<void> _generateSimpleInteractiveMoments(int userId, Database db) async {
    _logger.i('üé≠ Generando momentos interactivos B√ÅSICOS...');

    final now = DateTime.now();
    final random = math.Random();

    // Generar algunos momentos para los √∫ltimos d√≠as
    for (int daysAgo = 7; daysAgo >= 0; daysAgo--) {
      final date = now.subtract(Duration(days: daysAgo));
      final dateStr = date.toIso8601String().split('T')[0];

      // Generar 2-4 momentos por d√≠a
      final momentCount = 2 + random.nextInt(3);

      for (int i = 0; i < momentCount; i++) {
        final moment = _generateRandomMoment(userId, dateStr, date, random);
        try {
          await db.insert('interactive_moments', moment);
        } catch (e) {
          _logger.e('‚ùå Error insertando momento: $e');
        }
      }
    }

    _logger.i('‚úÖ Momentos interactivos b√°sicos generados');
  }

  Map<String, dynamic> _generateRandomMoment(int userId, String dateStr, DateTime date, math.Random random) {
    final moments = [
      {'emoji': '‚òï', 'text': 'Caf√© perfecto para empezar el d√≠a', 'type': 'positive', 'category': 'routine'},
      {'emoji': 'üíª', 'text': 'C√≥digo funcionando a la primera', 'type': 'positive', 'category': 'work'},
      {'emoji': 'üò´', 'text': 'Bug dif√≠cil de resolver', 'type': 'negative', 'category': 'work'},
      {'emoji': 'üåÖ', 'text': 'Hermoso amanecer', 'type': 'positive', 'category': 'nature'},
      {'emoji': 'üìö', 'text': 'Aprendiendo algo nuevo', 'type': 'positive', 'category': 'learning'},
      {'emoji': 'üèÉ‚Äç‚ôÇÔ∏è', 'text': 'Ejercicio matutino completado', 'type': 'positive', 'category': 'health'},
      {'emoji': 'üò¥', 'text': 'No dorm√≠ bien anoche', 'type': 'negative', 'category': 'health'},
      {'emoji': 'üéµ', 'text': 'Canci√≥n que me motiv√≥', 'type': 'positive', 'category': 'entertainment'},
      {'emoji': 'üçï', 'text': 'Pizza deliciosa para cenar', 'type': 'positive', 'category': 'food'},
      {'emoji': 'üì±', 'text': 'Demasiado tiempo en redes sociales', 'type': 'negative', 'category': 'technology'},
    ];

    final selectedMoment = moments[random.nextInt(moments.length)];
    final timestamp = date.add(Duration(
      hours: 8 + random.nextInt(12),
      minutes: random.nextInt(60),
    )).millisecondsSinceEpoch ~/ 1000;

    return {
      'user_id': userId,
      'entry_date': dateStr,
      'emoji': selectedMoment['emoji'],
      'text': selectedMoment['text'],
      'type': selectedMoment['type'],
      'intensity': 3 + random.nextInt(5), // 3-7
      'category': selectedMoment['category'],
      'timestamp': timestamp,
    };
  }

  // lib/data/services/optimized_database_service.dart
// ‚úÖ M√âTODO _generateSimpleGoals COMPLETAMENTE ARREGLADO

  // ============================================================================
  // ‚úÖ ARREGLADO: GENERADOR DE OBJETIVOS CON TIPOS CORRECTOS
  // ============================================================================

  // In lib/data/services/optimized_database_service.dart

  Future<void> _generateSimpleGoals(int userId, Database db) async {
    _logger.i('üéØ Generando objetivos B√ÅSICOS...');

    // Using a List<Map<String, Object>> for stricter type safety.
    final List<Map<String, Object>> goals = [
      {
        'title': 'Consistencia Diaria',
        'description': 'Mantener el h√°bito de reflexi√≥n diaria todos los d√≠as.',
        'type': 'consistency', // ‚úÖ TIPO V√ÅLIDO
        'target_value': 7.0,
        'current_value': 5.0,
      },
      {
        'title': 'Mejora del Estado de √Ånimo',
        'description': 'Mantener un nivel de √°nimo estable y positivo.',
        'type': 'mood', // ‚úÖ TIPO V√ÅLIDO
        'target_value': 8.0,
        'current_value': 6.5,
      },
      {
        'title': 'Capturar Momentos Positivos',
        'description': 'Registrar al menos 3 momentos positivos por d√≠a.',
        'type': 'positiveMoments', // ‚úÖ TIPO V√ÅLIDO
        'target_value': 21.0, // Target for a week
        'current_value': 15.0,
      },
      {
        'title': 'Reducci√≥n de Estr√©s',
        'description': 'Mantener niveles bajos de estr√©s consistentemente.',
        'type': 'stressReduction', // ‚úÖ TIPO V√ÅLIDO
        'target_value': 3.0, // Lower is better
        'current_value': 4.5,
      },
    ];

    final createdAt = DateTime.now().millisecondsSinceEpoch ~/ 1000;

    for (final goal in goals) {
      try {
        await db.insert(
          'user_goals',
          {
            'user_id': userId,
            'title': goal['title'] as String,
            'description': goal['description'] as String,
            'type': goal['type'] as String, // Ensure it's a string
            'target_value': goal['target_value'] as double,
            'current_value': goal['current_value'] as double,
            'status': 'active', // Always a string
            'created_at': createdAt,
          },
          conflictAlgorithm: ConflictAlgorithm.ignore,
        );
      } catch (e) {
        _logger.e('‚ùå Error insertando objetivo ${goal['title']}: $e');
      }
    }
  }

  // ============================================================================
  // ‚úÖ M√âTODO HELPER PARA VALIDAR TIPOS DE GOALS
  // ============================================================================

  /// Valida si un tipo de goal es permitido por la base de datos
  bool _isValidGoalType(String type) {
    const validTypes = ['consistency', 'mood', 'positiveMoments', 'stressReduction'];
    return validTypes.contains(type);
  }

  /// Convierte tipos legacy a tipos v√°lidos
  String _normalizeGoalType(String type) {
    switch (type.toLowerCase()) {
      case 'health':
      case 'exercise':
      case 'fitness':
        return 'consistency';
      case 'mindfulness':
      case 'meditation':
      case 'wellbeing':
        return 'mood';
      case 'learning':
      case 'education':
      case 'growth':
        return 'positiveMoments';
      case 'career':
      case 'work':
      case 'productivity':
        return 'stressReduction';
      default:
      // Si ya es un tipo v√°lido, devolverlo tal como est√°
        return _isValidGoalType(type) ? type : 'consistency';
    }
  }

  // ============================================================================
  // ‚úÖ M√âTODO P√öBLICO PARA CREAR GOALS CON VALIDACI√ìN
  // ============================================================================

  /// Crea un nuevo goal con validaci√≥n de tipos
  Future<int?> createGoalSafe({
    required int userId,
    required String title,
    required String description,
    required String type,
    required double targetValue,
    double currentValue = 0.0,
    String status = 'active',
  }) async {
    try {
      final db = await database;

      // Use transaction for atomic operations
      return await db.transaction((txn) async {
        // ‚úÖ Normalizar y validar el tipo
        final normalizedType = _normalizeGoalType(type);

        if (!_isValidGoalType(normalizedType)) {
          throw Exception('Tipo de objetivo no v√°lido: $type. Tipos permitidos: consistency, mood, positiveMoments, stressReduction');
        }

        final goalData = {
          'user_id': userId,
          'title': title,
          'description': description,
          'type': normalizedType, // ‚úÖ Tipo validado y normalizado
          'target_value': targetValue,
          'current_value': currentValue,
          'status': status,
          'created_at': DateTime.now().millisecondsSinceEpoch ~/ 1000,
        };

        final goalId = await txn.insert('user_goals', goalData);
        if (goalId <= 0) {
          throw Exception('Failed to insert goal');
        }
        
        _logger.i('‚úÖ Goal creado con ID: $goalId, tipo: $normalizedType');
        return goalId;
      });
    } catch (e) {
      _logger.e('‚ùå Error creando goal: $e');
      debugPrint('‚ùå Stack trace: ${StackTrace.current}');
      return null;
    }
  }

  // ============================================================================
  // ‚úÖ RESTO DE M√âTODOS DE GOALS (SIN CAMBIOS NECESARIOS)
  // ============================================================================

  /// Obtener goals del usuario
  Future<List<Map<String, dynamic>>> getUserGoals(int userId) async {
    try {
      final db = await database;
      return await db.query(
        'user_goals',
        where: 'user_id = ?',
        whereArgs: [userId],
        orderBy: 'created_at DESC',
      );
    } catch (e) {
      _logger.e('‚ùå Error obteniendo goals: $e');
      return [];
    }
  }
  
  /// Add a goal for a user
  Future<bool> addGoal(int userId, GoalModel goal) async {
    try {
      final db = await database;
      await db.insert(
        'user_goals',
        {
          'user_id': userId,
          'title': goal.title,
          'description': goal.description,
          'type': goal.type,
          'target_value': goal.targetValue,
          'current_value': goal.currentValue,
          'unit': goal.suggestedUnit,
          'created_at': DateTime.now().toIso8601String(),
          'updated_at': DateTime.now().toIso8601String(),
        },
      );
      _logger.i('‚úÖ Goal added successfully: ${goal.title}');
      return true;
    } catch (e) {
      _logger.e('‚ùå Error adding goal: $e');
      return false;
    }
  }

  /// Actualizar progreso de un goal
  Future<bool> updateGoalProgress(int goalId, double newValue) async {
    try {
      final db = await database;
      final rowsAffected = await db.update(
        'user_goals',
        {
          'current_value': newValue,
          'updated_at': DateTime.now().millisecondsSinceEpoch ~/ 1000,
        },
        where: 'id = ?',
        whereArgs: [goalId],
      );

      return rowsAffected > 0;
    } catch (e) {
      _logger.e('‚ùå Error actualizando progreso del goal: $e');
      return false;
    }
  }

  /// Marcar goal como completado
  Future<bool> completeGoal(int goalId) async {
    try {
      final db = await database;
      final now = DateTime.now().millisecondsSinceEpoch ~/ 1000;

      final rowsAffected = await db.update(
        'user_goals',
        {
          'status': 'completed',
          'completed_at': now,
          'updated_at': now,
        },
        where: 'id = ?',
        whereArgs: [goalId],
      );

      return rowsAffected > 0;
    } catch (e) {
      _logger.e('‚ùå Error completando goal: $e');
      return false;
    }
  }
  Future<void> _generateEnhancedHistoricalData(int userId, Database db) async {
    _logger.i('üìà Generando datos hist√≥ricos MEJORADOS...');

    final now = DateTime.now();
    final random = math.Random();

    // Fases m√°s realistas y detalladas
    final lifePeriods = [
      _LifePeriod('Crisis Personal', -120, -91, 2.8, 3.2, 8.5),
      _LifePeriod('Buscando Direcci√≥n', -90, -61, 4.2, 4.8, 7.0),
      _LifePeriod('Peque√±as Victorias', -60, -31, 6.5, 6.8, 5.5),
      _LifePeriod('Momentum Positivo', -30, -8, 8.2, 7.9, 3.2),
      _LifePeriod('Estabilidad Actual', -7, 0, 7.8, 8.1, 3.8),
    ];

    for (final period in lifePeriods) {
      await _generatePeriodData(userId, db, now, period, random);
    }

    // Generar datos para hoy
    await _generateTodayEntry(userId, db, now);
  }

  Future<void> _generatePeriodData(int userId, Database db, DateTime now, _LifePeriod period, math.Random random) async {
    _logger.i('üìÖ Generando per√≠odo: ${period.name} (${period.endDay - period.startDay + 1} d√≠as)');

    for (int dayOffset = period.startDay; dayOffset <= period.endDay; dayOffset++) {
      // Solo generar datos para algunos d√≠as (no todos) para mayor realismo
      if (random.nextDouble() < 0.7) { // 70% de probabilidad de tener entrada
        final date = now.add(Duration(days: dayOffset));
        await _generateDayEntry(userId, db, date, period, random);
      }
    }
  }


  Future<void> _generateDayEntry(int userId, Database db, DateTime date, _LifePeriod period, math.Random random) async {
    try {
      // Factores que afectan el d√≠a
      final weekendBoost = (date.weekday >= 6) ? random.nextDouble() * 1.2 : 0.0;
      final mondayDip = (date.weekday == 1) ? -random.nextDouble() * 1.5 : 0.0;
      final fridayBoost = (date.weekday == 5) ? random.nextDouble() * 0.8 : 0.0;

      // Variaci√≥n diaria natural
      final dailyVariation = (random.nextDouble() - 0.5) * 2.0;

      // Calcular m√©tricas  as StringB√ÅSICAS basadas en el per√≠odo
      final mood = (period.avgMood + weekendBoost + mondayDip + fridayBoost + dailyVariation).clamp(1.0, 10.0);
      final energy = (period.avgEnergy + weekendBoost + fridayBoost + dailyVariation).clamp(1.0, 10.0);
      final stress = (period.avgStress + mondayDip - weekendBoost + (random.nextDouble() - 0.5)).clamp(1.0, 10.0);

      // Generar reflexi√≥n realista basada en el per√≠odo
      final reflection = _generateRealisticReflection(mood, energy, stress, period, date, random);

      // Formatear fecha para BD
      final dateStr = date.toIso8601String().split('T')[0];
      final createdAtTimestamp = date.millisecondsSinceEpoch ~/ 1000;

      // ‚úÖ SOLO USAR COLUMNAS QUE REALMENTE EXISTEN
      final entryData = {
        'user_id': userId,
        'entry_date': dateStr,
        'free_reflection': reflection,
        'mood_score': mood.round(),
        'energy_level': energy.round(),
        'stress_level': stress.round(),
        'worth_it': mood > 6 ? 1 : 0, // Si mood > 6, worth_it = true
        'created_at': createdAtTimestamp,
      };

      // Insertar con manejo de conflictos
      await db.insert(
          'daily_entries',
          entryData,
          conflictAlgorithm: ConflictAlgorithm.replace
      );

      _logger.d('‚úÖ Entrada generada para $dateStr: Mood ${mood.round()}/10');

    } catch (e) {
      _logger.e('‚ùå Error insertando entrada b√°sica para fecha $date: $e');
      // No hacer rethrow para continuar con otras fechas
    }
  }



  Future<void> _generateEnhancedInteractiveMoments(int userId, Database db) async {
    _logger.i('üí´ Generando momentos interactivos MEJORADOS...');

    final now = DateTime.now();
    final random = math.Random();

    // Generar momentos para los √∫ltimos 30 d√≠as
    for (int dayOffset = -30; dayOffset <= 0; dayOffset++) {
      final date = now.add(Duration(days: dayOffset));

      // 2-5 momentos por d√≠a
      final momentsCount = 2 + random.nextInt(4);

      for (int i = 0; i < momentsCount; i++) {
        _generateRandomMoment(userId, date.toIso8601String().split('T')[0], date, random);
      }
    }
  }



  Future<void> _generateSpecialEvents(int userId, Database db) async {
    _logger.i('üéâ Generando eventos especiales...');

    // Eventos especiales que crean patrones interesantes
    final specialEvents = [
      {
        'date': DateTime.now().subtract(const Duration(days: 15)),
        'type': 'milestone',
        'emoji': 'üöÄ',
        'text': 'Lanzamiento exitoso de nueva feature en Reflect',
        'intensity': 9,
        'category': 'trabajo',
        'location': 'Oficina',
      },
      {
        'date': DateTime.now().subtract(const Duration(days: 8)),
        'type': 'learning',
        'emoji': 'üìö',
        'text': 'Complet√© curso avanzado de Flutter',
        'intensity': 8,
        'category': 'aprendizaje',
        'location': 'Casa',
      },
      {
        'date': DateTime.now().subtract(const Duration(days: 3)),
        'type': 'social',
        'emoji': 'üéÇ',
        'text': 'Cumplea√±os de mi hermana - familia reunida',
        'intensity': 8,
        'category': 'personal',
        'location': 'Casa familiar',
      },
    ];

    for (final event in specialEvents) {
      final moment = OptimizedInteractiveMomentModel.create(
        userId: userId,
        emoji: event['emoji'] as String,
        text: event['text'] as String,
        type: 'positive',
        intensity: event['intensity'] as int,
        category: event['category'] as String,
        timestamp: event['date'] as DateTime,
        contextLocation: event['location'] as String,
      );

      await db.insert('interactive_moments', moment.toOptimizedDatabase());
    }
  }

  // ============================================================================
  // M√âTODOS HELPER PARA GENERAR CONTENIDO REALISTA
  // ============================================================================

  String _generateRealisticReflection(double mood, double energy, double stress, _LifePeriod period, DateTime date, math.Random random) {
    final reflections = _getReflectionsByPeriodAndMood(period.name, mood, energy, stress, date);
    return reflections[random.nextInt(reflections.length)];
  }

  List<String> _getReflectionsByPeriodAndMood(String period, double mood, double energy, double stress, DateTime date) {
    if (period == 'Crisis Personal') {
      return [
        'Hoy ha sido especialmente dif√≠cil. Me cuesta encontrar motivaci√≥n y todo parece cuesta arriba. Pero s√© que estos momentos pasan.',
        'D√≠a complicado. He estado reflexionando sobre lo que realmente importa en mi vida. A veces las crisis nos ayudan a reenfocar.',
        'No ha sido mi mejor d√≠a, pero estoy intentando ser compasivo conmigo mismo. Ma√±ana ser√° diferente.',
        'Sensaci√≥n de estar perdido, pero al menos estoy escribiendo esto. Escribir me ayuda a procesar.',
        'Lunes especialmente pesado. Me pregunto si estoy en el camino correcto, pero s√© que dudar es parte del proceso.',
      ];
    } else if (period == 'Buscando Direcci√≥n') {
      return [
        'Poco a poco siento que voy encontrando mi rumbo. A√∫n hay d√≠as dif√≠ciles, pero tambi√©n momentos de claridad.',
        'Hoy me he sentido m√°s centrado. Estoy empezando a entender qu√© es lo que realmente quiero.',
        'He tenido una conversaci√≥n interesante que me ha hecho pensar. Las perspectivas externas ayudan mucho.',
        'D√≠a de peque√±os progresos. No son cambios dram√°ticos, pero s√≠ sostenibles.',
        'Me he dado cuenta de que el crecimiento no es lineal. Algunos d√≠as retrocedo, otros avanzo.',
      ];
    } else if (period == 'Peque√±as Victorias') {
      return [
        '¬°Hoy he completado algo que hab√≠a estado posponiendo durante semanas! Se siente incre√≠ble.',
        'Las cosas van mejorando gradualmente. Tengo m√°s energ√≠a y las decisiones fluyen m√°s f√°cil.',
        'He notado que mi productividad ha aumentado significativamente. Creo que finalmente estoy en un buen ritmo.',
        'D√≠a productivo y satisfactorio. He encontrado un equilibrio entre trabajo y descanso que funciona.',
        'Me siento m√°s confiado en mis decisiones. Los peque√±os √©xitos se van acumulando.',
      ];
    } else if (period == 'Momentum Positivo') {
      return [
        'Incre√≠ble d√≠a de desarrollo! He resuelto un bug complejo y implementado dos features nuevas. El flow de c√≥digo est√° siendo fant√°stico.',
        'Hoy me levant√© con una energ√≠a tremenda. Todo parece posible cuando est√°s en la zona correcta.',
        'Excelente sesi√≥n de brainstorming. Las ideas fluyen cuando tienes la mente clara y el equipo alineado.',
        'Me siento imparable. Cada desaf√≠o que aparece lo veo como una oportunidad de crecer.',
        'D√≠a muy productivo. He logrado avanzar tanto en objetivos personales como profesionales.',
      ];
    } else { // Estabilidad Actual
      return [
        'D√≠a equilibrado y tranquilo. Me siento c√≥modo con el ritmo que llevo actualmente.',
        'Hoy ha sido un buen d√≠a para reflexionar sobre todo lo que he crecido en estos meses.',
        'Productivo sin agobios. Creo que he encontrado un ritmo sostenible que me funciona.',
        'Sensaci√≥n de estabilidad y claridad. S√© hacia d√≥nde voy y c√≥mo llegar.',
        'D√≠a normal, pero en el buen sentido. A veces la normalidad es exactamente lo que necesitas.',
      ];
    }
  }

  Map<String, dynamic> _getMomentDataByType(String type, String category, math.Random random) {
    final positiveMoments = {
      'trabajo': [
        {'emoji': '‚úÖ', 'text': 'Bug resuelto en tiempo r√©cord', 'intensity': 7, 'location': 'Oficina'},
        {'emoji': 'üöÄ', 'text': 'Feature implementada sin problemas', 'intensity': 8, 'location': 'Casa'},
        {'emoji': 'üí°', 'text': 'Idea brillante para optimizaci√≥n', 'intensity': 6, 'location': 'Cafeter√≠a'},
        {'emoji': 'üéØ', 'text': 'Milestone alcanzado antes de deadline', 'intensity': 9, 'location': 'Oficina'},
      ],
      'personal': [
        {'emoji': 'üòä', 'text': 'Llamada sorpresa de un viejo amigo', 'intensity': 7, 'location': 'Casa'},
        {'emoji': 'üå±', 'text': 'Mi planta finalmente tiene una nueva hoja', 'intensity': 5, 'location': 'Casa'},
        {'emoji': 'üìö', 'text': 'Termin√© un libro muy interesante', 'intensity': 6, 'location': 'Parque'},
        {'emoji': 'üéµ', 'text': 'Descubr√≠ una canci√≥n perfecta para programar', 'intensity': 6, 'location': 'Casa'},
      ],
      'salud': [
        {'emoji': 'üí™', 'text': 'Nuevo record personal en el gym', 'intensity': 8, 'location': 'Gimnasio'},
        {'emoji': 'üßò', 'text': 'Meditaci√≥n especialmente relajante', 'intensity': 7, 'location': 'Casa'},
        {'emoji': 'ü•ó', 'text': 'Comida saludable y deliciosa', 'intensity': 6, 'location': 'Restaurante'},
        {'emoji': 'üò¥', 'text': 'Despert√© naturalmente sin alarma', 'intensity': 7, 'location': 'Casa'},
      ],
    };

    final negativeMoments = {
      'trabajo': [
        {'emoji': 'üò§', 'text': 'Reuni√≥n que podr√≠a haber sido un email', 'intensity': 4, 'location': 'Oficina'},
        {'emoji': 'üêõ', 'text': 'Bug misterioso que no logro resolver', 'intensity': 6, 'location': 'Casa'},
        {'emoji': '‚è∞', 'text': 'Deadline muy ajustado causando estr√©s', 'intensity': 7, 'location': 'Oficina'},
        {'emoji': 'üíª', 'text': 'Sistema ca√≠do justo cuando m√°s lo necesitaba', 'intensity': 5, 'location': 'Oficina'},
      ],
      'personal': [
        {'emoji': 'üåßÔ∏è', 'text': 'Lluvia inesperada sin paraguas', 'intensity': 3, 'location': 'Calle'},
        {'emoji': 'üì±', 'text': 'Bater√≠a del m√≥vil muri√≥ en momento cr√≠tico', 'intensity': 4, 'location': 'Transporte'},
        {'emoji': 'üöå', 'text': 'Perd√≠ el autob√∫s por 30 segundos', 'intensity': 4, 'location': 'Parada'},
        {'emoji': '‚òï', 'text': 'Se acab√≥ el caf√© justo cuando lo necesitaba', 'intensity': 5, 'location': 'Casa'},
      ],
      'salud': [
        {'emoji': 'üò¥', 'text': 'Noche de sue√±o irregular', 'intensity': 5, 'location': 'Casa'},
        {'emoji': 'ü§ï', 'text': 'Dolor de espalda por mala postura', 'intensity': 4, 'location': 'Oficina'},
        {'emoji': 'üòµ', 'text': 'Dolor de cabeza por demasiada pantalla', 'intensity': 5, 'location': 'Casa'},
      ],
    };

    final neutralMoments = {
      'trabajo': [
        {'emoji': 'üíº', 'text': 'D√≠a normal de desarrollo', 'intensity': 5, 'location': 'Oficina'},
        {'emoji': 'üìä', 'text': 'Review de c√≥digo rutinaria', 'intensity': 5, 'location': 'Casa'},
      ],
      'personal': [
        {'emoji': 'üö∂', 'text': 'Paseo tranquilo por el barrio', 'intensity': 5, 'location': 'Barrio'},
        {'emoji': 'üõí', 'text': 'Compras semanales en el super', 'intensity': 5, 'location': 'Supermercado'},
      ],
    };

    Map<String, List<Map<String, dynamic>>> momentsMap;

    switch (type) {
      case 'positive':
        momentsMap = positiveMoments;
        break;
      case 'negative':
        momentsMap = negativeMoments;
        break;
      default:
        momentsMap = neutralMoments;
    }

    final categoryMoments = momentsMap[category] ?? momentsMap['personal']!;
    final selectedMoment = categoryMoments[random.nextInt(categoryMoments.length)];

    return {
      'emoji': selectedMoment['emoji'],
      'text': selectedMoment['text'],
      'intensity': selectedMoment['intensity'],
      'location': selectedMoment['location'],
    };
  }

  // M√©todos helper adicionales
  double _getSeasonalFactor(DateTime date) {
    // Factor estacional simple
    final month = date.month;
    if (month >= 6 && month <= 8) return 0.3; // Verano
    if (month >= 12 || month <= 2) return -0.2; // Invierno
    return 0.0; // Primavera/Oto√±o
  }

  String _generateGratitudeItems(double mood, math.Random random) {
    final items = [
      'Salud y energ√≠a para enfrentar el d√≠a',
      'Familia que me apoya incondicionalmente',
      'Trabajo que me permite crecer',
      'Amigos que hacen la vida m√°s divertida',
      'Oportunidad de aprender cosas nuevas',
      'Hogar c√≥modo donde descansar',
      'Comida deliciosa en la mesa',
      'Tecnolog√≠a que facilita mi trabajo',
      'Momento presente y tranquilidad',
      'Capacidad de reflexionar y mejorar',
    ];

    final count = mood > 7 ? 3 : mood > 4 ? 2 : 1;
    final selected = <String>[];

    for (int i = 0; i < count; i++) {
      final item = items[random.nextInt(items.length)];
      if (!selected.contains(item)) selected.add(item);
    }

    return selected.join(', ');
  }

  // ‚úÖ M√âTODO PARA AI COACH
  Future<Map<String, dynamic>> getWeeklyDataForAI(int userId) async {
    try {
      final db = await database;
      final endDate = DateTime.now();
      final startDate = endDate.subtract(const Duration(days: 7));

      // Obtener entradas de la semana
      final entriesQuery = '''
      SELECT entry_date, free_reflection, mood_score, energy_level,
             stress_level, worth_it, sleep_hours, meditation_minutes
      FROM daily_entries
      WHERE user_id = ? AND entry_date >= ? AND entry_date <= ?
      ORDER BY entry_date DESC
    ''';

      final entries = await db.rawQuery(entriesQuery, [
        userId,
        startDate.toIso8601String().split('T')[0],
        endDate.toIso8601String().split('T')[0],
      ]);

      // Obtener momentos de la semana
      final momentsQuery = '''
      SELECT entry_date, type, emoji, text, category
      FROM interactive_moments
      WHERE user_id = ? AND entry_date >= ? AND entry_date <= ?
      ORDER BY timestamp DESC
    ''';

      final moments = await db.rawQuery(momentsQuery, [
        userId,
        startDate.toIso8601String().split('T')[0],
        endDate.toIso8601String().split('T')[0],
      ]);

      return {
        'entries': entries,
        'moments': moments,
        'period': {
          'start': startDate.toIso8601String(),
          'end': endDate.toIso8601String(),
        }
      };

    } catch (e) {
      _logger.e('‚ùå Error obteniendo datos semanales para IA: $e');
      return {'entries': [], 'moments': [], 'period': {}};
    }
  }

  // ============================================================================
  // üöÄ ULTRA-SOPHISTICATED ANALYTICS - MACHINE LEARNING INSPIRED METHODS
  // ============================================================================

  /// Advanced Time Series Analysis with Seasonal Decomposition
  Future<Map<String, dynamic>> getAdvancedTimeSeriesAnalysis(int userId, {int days = 90}) async {
    try {
      final db = await database;
      final endDate = DateTime.now();
      final startDate = endDate.subtract(Duration(days: days));

      // Get comprehensive time series data
      final timeSeriesData = await db.rawQuery('''
        SELECT 
          entry_date,
          mood_score,
          energy_level,
          stress_level,
          sleep_quality,
          physical_activity,
          meditation_minutes,
          strftime('%w', entry_date) as day_of_week,
          strftime('%d', entry_date) as day_of_month,
          (julianday(entry_date) - julianday(?)) as days_since_start
        FROM daily_entries
        WHERE user_id = ? AND entry_date BETWEEN ? AND ?
        ORDER BY entry_date ASC
      ''', [startDate.toIso8601String().split('T')[0], userId, 
             startDate.toIso8601String().split('T')[0], 
             endDate.toIso8601String().split('T')[0]]);

      if (timeSeriesData.length < 14) {
        return {'error': 'Insufficient data for time series analysis', 'required_days': 14};
      }

      // Perform seasonal decomposition
      final seasonalAnalysis = _performSeasonalDecomposition(timeSeriesData);
      
      // Detect anomalies using statistical methods
      final anomalies = _detectMoodAnomalies(timeSeriesData);
      
      // Calculate advanced trend metrics
      final trendMetrics = _calculateAdvancedTrends(timeSeriesData);
      
      // Identify cyclical patterns
      final cyclicalPatterns = _identifyCyclicalPatterns(timeSeriesData);
      
      // Calculate emotional volatility index
      final volatilityIndex = _calculateEmotionalVolatilityIndex(timeSeriesData);

      return {
        'seasonal_analysis': seasonalAnalysis,
        'anomalies': anomalies,
        'trend_metrics': trendMetrics,
        'cyclical_patterns': cyclicalPatterns,
        'volatility_index': volatilityIndex,
        'data_quality_score': _calculateSimpleDataQuality(timeSeriesData),
        'analysis_period': {
          'days': days,
          'data_points': timeSeriesData.length,
          'coverage': timeSeriesData.length / days,
        }
      };

    } catch (e) {
      _logger.e('‚ùå Error in advanced time series analysis: $e');
      return {'error': e.toString()};
    }
  }

  /// Machine Learning-Inspired Pattern Recognition
  Future<Map<String, dynamic>> getMLInspiredPatternAnalysis(int userId) async {
    try {
      final db = await database;

      // Get comprehensive data for pattern analysis
      final patternData = await db.rawQuery('''
        SELECT 
          de.entry_date,
          de.mood_score,
          de.energy_level,
          de.stress_level,
          de.sleep_quality,
          de.physical_activity,
          de.meditation_minutes,
          de.social_interaction,
          COUNT(im.id) as daily_moments_count,
          AVG(CASE WHEN im.type = 'positive' THEN im.intensity ELSE 0 END) as positive_intensity_avg,
          AVG(CASE WHEN im.type = 'negative' THEN im.intensity ELSE 0 END) as negative_intensity_avg,
          strftime('%w', de.entry_date) as weekday
        FROM daily_entries de
        LEFT JOIN interactive_moments im ON de.user_id = im.user_id AND de.entry_date = im.entry_date
        WHERE de.user_id = ? AND de.entry_date >= date('now', '-120 days')
        GROUP BY de.entry_date
        ORDER BY de.entry_date ASC
      ''', [userId]);

      if (patternData.length < 30) {
        return {'error': 'Insufficient data for ML pattern analysis', 'required_days': 30};
      }

      // Cluster analysis (K-means inspired grouping)
      final emotionalClusters = _performEmotionalClustering(patternData);
      
      // Feature importance analysis
      final featureImportance = _calculateFeatureImportance(patternData);
      
      // Behavioral pattern classification
      final behavioralPatterns = _classifyBehavioralPatterns(patternData);
      
      // Predictive feature extraction
      final predictiveFeatures = _extractPredictiveFeatures(patternData);
      
      // Emotion regulation effectiveness analysis
      final regulationEffectiveness = _analyzeEmotionRegulation(patternData);

      return {
        'emotional_clusters': emotionalClusters,
        'feature_importance': featureImportance,
        'behavioral_patterns': behavioralPatterns,
        'predictive_features': predictiveFeatures,
        'regulation_effectiveness': regulationEffectiveness,
        'pattern_confidence': _calculatePatternConfidence(patternData),
        'recommendations': _generateMLInspiredRecommendations(emotionalClusters, featureImportance),
      };

    } catch (e) {
      _logger.e('‚ùå Error in ML pattern analysis: $e');
      return {'error': e.toString()};
    }
  }

  /// Advanced Causal Inference Analysis
  Future<Map<String, dynamic>> getCausalInferenceAnalysis(int userId) async {
    try {
      final db = await database;

      // Get multi-factor data for causal analysis
      final causalData = await db.rawQuery('''
        SELECT 
          entry_date,
          mood_score,
          energy_level,
          stress_level,
          sleep_quality,
          sleep_hours,
          physical_activity,
          exercise_minutes,
          meditation_minutes,
          social_interaction,
          screen_time_hours,
          weather_mood_impact,
          LAG(mood_score, 1) OVER (ORDER BY entry_date) as prev_mood,
          LAG(stress_level, 1) OVER (ORDER BY entry_date) as prev_stress,
          LAG(sleep_quality, 1) OVER (ORDER BY entry_date) as prev_sleep
        FROM daily_entries
        WHERE user_id = ? AND entry_date >= date('now', '-90 days')
        ORDER BY entry_date ASC
      ''', [userId]);

      if (causalData.length < 21) {
        return {'error': 'Insufficient data for causal analysis', 'required_days': 21};
      }

      // Granger causality-inspired analysis
      final causalRelationships = _performCausalAnalysis(causalData);
      
      // Intervention impact analysis
      final interventionImpacts = _analyzeInterventionImpacts(causalData);
      
      // Mediator analysis (what factors mediate mood changes)
      final mediatorAnalysis = _analyzeMediatingFactors(causalData);
      
      // Optimal intervention timing
      final optimalTiming = _calculateOptimalInterventionTiming(causalData);

      return {
        'causal_relationships': causalRelationships,
        'intervention_impacts': interventionImpacts,
        'mediator_analysis': mediatorAnalysis,
        'optimal_timing': optimalTiming,
        'causal_strength_overall': _calculateOverallCausalStrength(causalRelationships),
        'actionable_insights': _generateCausalActionableInsights(causalRelationships, interventionImpacts),
      };

    } catch (e) {
      _logger.e('‚ùå Error in causal inference analysis: $e');
      return {'error': e.toString()};
    }
  }

  /// Ultra-Advanced Predictive Modeling with Multiple Algorithms
  Future<Map<String, dynamic>> getUltraAdvancedPrediction(int userId, {int forecastDays = 7}) async {
    try {
      final db = await database;

      // Get comprehensive historical data
      final historicalData = await db.rawQuery('''
        SELECT 
          entry_date,
          mood_score,
          energy_level,
          stress_level,
          sleep_quality,
          physical_activity,
          meditation_minutes,
          social_interaction,
          strftime('%w', entry_date) as weekday,
          (julianday('now') - julianday(entry_date)) as days_ago
        FROM daily_entries
        WHERE user_id = ? AND entry_date >= date('now', '-180 days')
        ORDER BY entry_date ASC
      ''', [userId]);

      if (historicalData.length < 30) {
        return {'error': 'Insufficient data for advanced prediction', 'required_days': 30};
      }

      // Multiple prediction algorithms
      final linearRegressionPrediction = _performLinearRegressionPrediction(historicalData, forecastDays);
      final exponentialSmoothingPrediction = _performExponentialSmoothingPrediction(historicalData, forecastDays);
      final seasonalPrediction = _performSeasonalPrediction(historicalData, forecastDays);
      final ensemblePrediction = _createEnsemblePrediction([
        linearRegressionPrediction,
        exponentialSmoothingPrediction,
        seasonalPrediction
      ]);

      // Risk assessment
      final riskAssessment = _performRiskAssessment(historicalData, ensemblePrediction);
      
      // Confidence intervals
      final confidenceIntervals = _calculatePredictionConfidenceIntervals(historicalData, ensemblePrediction);
      
      // Scenario analysis
      final scenarioAnalysis = _performScenarioAnalysis(historicalData, forecastDays);

      return {
        'ensemble_prediction': ensemblePrediction,
        'individual_predictions': {
          'linear_regression': linearRegressionPrediction,
          'exponential_smoothing': exponentialSmoothingPrediction,
          'seasonal': seasonalPrediction,
        },
        'risk_assessment': riskAssessment,
        'confidence_intervals': confidenceIntervals,
        'scenario_analysis': scenarioAnalysis,
        'prediction_accuracy_score': _calculateHistoricalPredictionAccuracy(historicalData),
        'recommended_actions': _generatePredictiveRecommendations(ensemblePrediction, riskAssessment),
      };

    } catch (e) {
      _logger.e('‚ùå Error in ultra-advanced prediction: $e');
      return {'error': e.toString()};
    }
  }

  // ============================================================================
  // üßÆ ULTRA-SOPHISTICATED ANALYTICS HELPER METHODS
  // ============================================================================

  /// Seasonal Decomposition Analysis
  Map<String, dynamic> _performSeasonalDecomposition(List<Map<String, dynamic>> data) {
    final moodSeries = data.map((d) => (d['mood_score'] as int? ?? 5).toDouble()).toList();
    
    // Decompose into trend, seasonal, and residual components
    final trendComponent = _calculateMovingAverage(moodSeries, 7);
    final seasonalComponent = _extractSeasonalComponent(data);
    final residualComponent = _calculateResidualComponent(moodSeries, trendComponent, seasonalComponent);
    
    return {
      'trend_strength': _calculateTrendStrength(trendComponent),
      'seasonal_strength': _calculateSeasonalStrength(seasonalComponent),
      'residual_variance': _calculateVariance(residualComponent),
      'dominant_cycle': _findDominantCycle(seasonalComponent),
      'trend_direction': _determineTrendDirection(trendComponent),
      'seasonal_patterns': _extractSeasonalPatterns(data),
    };
  }

  /// Advanced Anomaly Detection
  List<Map<String, dynamic>> _detectMoodAnomalies(List<Map<String, dynamic>> data) {
    final anomalies = <Map<String, dynamic>>[];
    final moodSeries = data.map((d) => (d['mood_score'] as int? ?? 5).toDouble()).toList();
    
    // Statistical anomaly detection using IQR and z-score
    final mean = moodSeries.reduce((a, b) => a + b) / moodSeries.length;
    final stdDev = math.sqrt(moodSeries.map((x) => math.pow(x - mean, 2)).reduce((a, b) => a + b) / moodSeries.length);
    
    for (int i = 0; i < data.length; i++) {
      final moodScore = (data[i]['mood_score'] as int? ?? 5).toDouble();
      final zScore = (moodScore - mean) / stdDev;
      
      if (zScore.abs() > 2.5) { // Outlier threshold
        anomalies.add({
          'date': data[i]['entry_date'],
          'type': zScore > 0 ? 'positive_anomaly' : 'negative_anomaly',
          'severity': zScore.abs(),
          'mood_score': moodScore,
          'z_score': zScore,
          'description': _getAnomalyDescription(zScore, moodScore),
        });
      }
    }
    
    return anomalies;
  }

  /// K-means inspired emotional clustering
  Map<String, dynamic> _performEmotionalClustering(List<Map<String, dynamic>> data) {
    // Extract features for clustering
    final features = data.map((d) => [
      (d['mood_score'] as int? ?? 5).toDouble(),
      (d['energy_level'] as int? ?? 5).toDouble(),
      (d['stress_level'] as int? ?? 5).toDouble(),
      (d['sleep_quality'] as int? ?? 5).toDouble(),
      (d['physical_activity'] as int? ?? 5).toDouble(),
    ]).toList();
    
    // Perform k-means clustering (simplified implementation)
    final clusters = _kMeansClustering(features, 4); // 4 emotional states
    
    final clusterDescriptions = [
      'High Wellbeing - Thriving',
      'Moderate Wellbeing - Stable', 
      'Low Wellbeing - Struggling',
      'Mixed Patterns - Variable'
    ];
    
    return {
      'cluster_assignments': clusters['assignments'],
      'cluster_centers': clusters['centers'],
      'cluster_descriptions': clusterDescriptions,
      'cluster_distribution': _calculateClusterDistribution(clusters['assignments']),
      'dominant_cluster': _findDominantCluster(clusters['assignments']),
      'cluster_transitions': _analyzeClusterTransitions(clusters['assignments'], data),
    };
  }

  /// Feature Importance Analysis
  Map<String, dynamic> _calculateFeatureImportance(List<Map<String, dynamic>> data) {
    final moodScores = data.map((d) => (d['mood_score'] as int? ?? 5).toDouble()).toList();
    
    final features = {
      'energy_level': data.map((d) => (d['energy_level'] as int? ?? 5).toDouble()).toList(),
      'stress_level': data.map((d) => (d['stress_level'] as int? ?? 5).toDouble()).toList(),
      'sleep_quality': data.map((d) => (d['sleep_quality'] as int? ?? 5).toDouble()).toList(),
      'physical_activity': data.map((d) => (d['physical_activity'] as int? ?? 5).toDouble()).toList(),
      'meditation_minutes': data.map((d) => (d['meditation_minutes'] as int? ?? 0).toDouble()).toList(),
      'social_interaction': data.map((d) => (d['social_interaction'] as int? ?? 5).toDouble()).toList(),
    };
    
    final importance = <String, double>{};
    
    for (final entry in features.entries) {
      final correlation = _calculatePearsonCorrelation(moodScores, entry.value);
      importance[entry.key] = correlation.abs();
    }
    
    // Sort by importance
    final sortedImportance = Map.fromEntries(
      importance.entries.toList()..sort((a, b) => b.value.compareTo(a.value))
    );
    
    return {
      'feature_importance': sortedImportance,
      'top_factors': sortedImportance.keys.take(3).toList(),
      'importance_scores': sortedImportance.values.toList(),
      'total_explained_variance': sortedImportance.values.reduce((a, b) => a + b),
    };
  }

  /// Causal Analysis (Granger Causality inspired)
  Map<String, dynamic> _performCausalAnalysis(List<Map<String, dynamic>> data) {
    final causalRelationships = <String, Map<String, dynamic>>{};
    
    final factors = ['sleep_quality', 'physical_activity', 'meditation_minutes', 'social_interaction'];
    final moodScores = data.map((d) => (d['mood_score'] as int? ?? 5).toDouble()).toList();
    
    for (final factor in factors) {
      final factorValues = data.map((d) => (d[factor] as num? ?? 0).toDouble()).toList();
      
      // Calculate lagged correlation (simplified Granger causality)
      final currentCorrelation = _calculatePearsonCorrelation(moodScores, factorValues);
      final laggedCorrelation = _calculateLaggedCorrelation(moodScores, factorValues, 1);
      
      final causalStrength = (laggedCorrelation.abs() - currentCorrelation.abs()).clamp(0.0, 1.0);
      
      causalRelationships[factor] = {
        'causal_strength': causalStrength,
        'direction': laggedCorrelation > 0 ? 'positive' : 'negative',
        'confidence': _calculateCausalConfidence(laggedCorrelation, data.length),
        'lag_effect': laggedCorrelation,
        'immediate_effect': currentCorrelation,
      };
    }
    
    return causalRelationships;
  }

  /// Multiple Prediction Algorithm Implementations
  Map<String, dynamic> _performLinearRegressionPrediction(List<Map<String, dynamic>> data, int forecastDays) {
    final moodSeries = data.map((d) => (d['mood_score'] as int? ?? 5).toDouble()).toList();
    final xValues = List.generate(moodSeries.length, (i) => i.toDouble());
    
    // Calculate linear regression coefficients
    final regression = _calculateLinearRegression(xValues, moodSeries);
    
    final predictions = <Map<String, dynamic>>[];
    for (int i = 0; i < forecastDays; i++) {
      final futureX = moodSeries.length + i;
      final predictedMood = (regression['slope']! * futureX + regression['intercept']!).clamp(1.0, 10.0);
      
      predictions.add({
        'day': i + 1,
        'predicted_mood': predictedMood,
        'confidence': _calculatePredictionConfidence(regression['r_squared']!, i),
        'date': DateTime.now().add(Duration(days: i + 1)).toIso8601String().split('T')[0],
      });
    }
    
    return {
      'method': 'linear_regression',
      'predictions': predictions,
      'model_accuracy': regression['r_squared'],
      'trend_slope': regression['slope'],
    };
  }

  Map<String, dynamic> _performExponentialSmoothingPrediction(List<Map<String, dynamic>> data, int forecastDays) {
    final moodSeries = data.map((d) => (d['mood_score'] as int? ?? 5).toDouble()).toList();
    
    // Exponential smoothing with alpha = 0.3
    const alpha = 0.3;
    final smoothed = <double>[moodSeries.first];
    
    for (int i = 1; i < moodSeries.length; i++) {
      final smoothedValue = alpha * moodSeries[i] + (1 - alpha) * smoothed.last;
      smoothed.add(smoothedValue);
    }
    
    final predictions = <Map<String, dynamic>>[];
    final lastSmoothed = smoothed.last;
    
    for (int i = 0; i < forecastDays; i++) {
      predictions.add({
        'day': i + 1,
        'predicted_mood': lastSmoothed.clamp(1.0, 10.0),
        'confidence': _calculateExponentialSmoothingConfidence(smoothed, i),
        'date': DateTime.now().add(Duration(days: i + 1)).toIso8601String().split('T')[0],
      });
    }
    
    return {
      'method': 'exponential_smoothing',
      'predictions': predictions,
      'smoothing_parameter': alpha,
      'last_smoothed_value': lastSmoothed,
    };
  }

  /// Ensemble Prediction Combining Multiple Models
  Map<String, dynamic> _createEnsemblePrediction(List<Map<String, dynamic>> predictions) {
    final ensemblePredictions = <Map<String, dynamic>>[];
    final forecastDays = predictions.first['predictions'].length;
    
    for (int day = 0; day < forecastDays; day++) {
      double weightedSum = 0.0;
      double totalWeight = 0.0;
      double maxConfidence = 0.0;
      
      for (final prediction in predictions) {
        final dayPrediction = prediction['predictions'][day];
        final mood = dayPrediction['predicted_mood'] as double;
        final confidence = dayPrediction['confidence'] as double;
        
        weightedSum += mood * confidence;
        totalWeight += confidence;
        maxConfidence = math.max(maxConfidence, confidence);
      }
      
      final ensembleMood = totalWeight > 0 ? weightedSum / totalWeight : 5.0;
      
      ensemblePredictions.add({
        'day': day + 1,
        'predicted_mood': ensembleMood.clamp(1.0, 10.0),
        'confidence': maxConfidence * 0.9, // Slightly lower confidence for ensemble
        'date': DateTime.now().add(Duration(days: day + 1)).toIso8601String().split('T')[0],
        'prediction_range': _calculatePredictionRange(predictions, day),
      });
    }
    
    return {
      'method': 'ensemble',
      'predictions': ensemblePredictions,
      'component_methods': predictions.map((p) => p['method']).toList(),
      'ensemble_confidence': ensemblePredictions.map((p) => p['confidence']).reduce((a, b) => a + b) / ensemblePredictions.length,
    };
  }

  // ============================================================================
  // üî¢ MATHEMATICAL AND STATISTICAL HELPER METHODS
  // ============================================================================

  List<double> _calculateMovingAverage(List<double> series, int window) {
    final result = <double>[];
    for (int i = 0; i < series.length; i++) {
      final start = math.max(0, i - window ~/ 2);
      final end = math.min(series.length, i + window ~/ 2 + 1);
      final segment = series.sublist(start, end);
      result.add(segment.reduce((a, b) => a + b) / segment.length);
    }
    return result;
  }

  double _calculatePearsonCorrelation(List<double> x, List<double> y) {
    if (x.length != y.length || x.isEmpty) return 0.0;
    
    final n = x.length;
    final sumX = x.reduce((a, b) => a + b);
    final sumY = y.reduce((a, b) => a + b);
    final sumXY = List.generate(n, (i) => x[i] * y[i]).reduce((a, b) => a + b);
    final sumX2 = x.map((v) => v * v).reduce((a, b) => a + b);
    final sumY2 = y.map((v) => v * v).reduce((a, b) => a + b);
    
    final numerator = n * sumXY - sumX * sumY;
    final denominator = math.sqrt((n * sumX2 - sumX * sumX) * (n * sumY2 - sumY * sumY));
    
    return denominator != 0 ? numerator / denominator : 0.0;
  }

  Map<String, double> _calculateLinearRegression(List<double> x, List<double> y) {
    final n = x.length;
    final sumX = x.reduce((a, b) => a + b);
    final sumY = y.reduce((a, b) => a + b);
    final sumXY = List.generate(n, (i) => x[i] * y[i]).reduce((a, b) => a + b);
    final sumX2 = x.map((v) => v * v).reduce((a, b) => a + b);
    
    final slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
    final intercept = (sumY - slope * sumX) / n;
    
    // Calculate R-squared
    final yMean = sumY / n;
    final ssTotal = y.map((v) => math.pow(v - yMean, 2)).reduce((a, b) => a + b);
    final ssResidual = List.generate(n, (i) => math.pow(y[i] - (slope * x[i] + intercept), 2)).reduce((a, b) => a + b);
    final rSquared = 1 - (ssResidual / ssTotal);
    
    return {
      'slope': slope,
      'intercept': intercept,
      'r_squared': rSquared.clamp(0.0, 1.0),
    };
  }

  Map<String, dynamic> _kMeansClustering(List<List<double>> data, int k) {
    final random = math.Random(42); // Fixed seed for reproducibility
    final features = data.first.length;
    
    // Initialize centroids randomly
    var centroids = List.generate(k, (_) => 
      List.generate(features, (_) => random.nextDouble() * 10));
    
    var assignments = List<int>.filled(data.length, 0);
    var previousAssignments = <int>[];
    
    // Iterate until convergence (max 50 iterations)
    for (int iteration = 0; iteration < 50; iteration++) {
      previousAssignments = List.from(assignments);
      
      // Assign points to nearest centroid
      for (int i = 0; i < data.length; i++) {
        double minDistance = double.infinity;
        int bestCluster = 0;
        
        for (int j = 0; j < k; j++) {
          final distance = _euclideanDistance(data[i], centroids[j]);
          if (distance < minDistance) {
            minDistance = distance;
            bestCluster = j;
          }
        }
        assignments[i] = bestCluster;
      }
      
      // Update centroids
      for (int j = 0; j < k; j++) {
        final clusterPoints = <List<double>>[];
        for (int i = 0; i < data.length; i++) {
          if (assignments[i] == j) {
            clusterPoints.add(data[i]);
          }
        }
        
        if (clusterPoints.isNotEmpty) {
          for (int f = 0; f < features; f++) {
            centroids[j][f] = clusterPoints.map((p) => p[f]).reduce((a, b) => a + b) / clusterPoints.length;
          }
        }
      }
      
      // Check for convergence
      if (_listsEqual(assignments, previousAssignments)) break;
    }
    
    return {
      'assignments': assignments,
      'centers': centroids,
    };
  }

  double _euclideanDistance(List<double> a, List<double> b) {
    double sum = 0.0;
    for (int i = 0; i < a.length; i++) {
      sum += math.pow(a[i] - b[i], 2);
    }
    return math.sqrt(sum);
  }

  bool _listsEqual(List<int> a, List<int> b) {
    if (a.length != b.length) return false;
    for (int i = 0; i < a.length; i++) {
      if (a[i] != b[i]) return false;
    }
    return true;
  }

  double _calculateVariance(List<double> values) {
    if (values.isEmpty) return 0.0;
    final mean = values.reduce((a, b) => a + b) / values.length;
    return values.map((v) => math.pow(v - mean, 2)).reduce((a, b) => a + b) / values.length;
  }

  // Additional sophisticated helper methods would continue here...
  // (Due to length constraints, implementing core methods first)

  String _getAnomalyDescription(double zScore, double moodScore) {
    if (zScore > 2.5) {
      return 'Significantly higher mood than usual (${moodScore.toStringAsFixed(1)}/10)';
    } else {
      return 'Significantly lower mood than usual (${moodScore.toStringAsFixed(1)}/10)';
    }
  }

  double _calculatePredictionConfidence(double accuracy, int daysAhead) {
    return (accuracy * math.exp(-daysAhead * 0.1)).clamp(0.0, 1.0);
  }

  double _calculateExponentialSmoothingConfidence(List<double> smoothed, int daysAhead) {
    final variance = _calculateVariance(smoothed);
    return (1.0 - variance / 10.0 - daysAhead * 0.05).clamp(0.0, 1.0);
  }

  Map<String, double> _calculatePredictionRange(List<Map<String, dynamic>> predictions, int dayIndex) {
    final dayPredictions = predictions.map((p) => p['predictions'][dayIndex]['predicted_mood'] as double).toList();
    dayPredictions.sort();
    
    return {
      'min': dayPredictions.first,
      'max': dayPredictions.last,
      'median': dayPredictions[dayPredictions.length ~/ 2],
      'std_dev': math.sqrt(_calculateVariance(dayPredictions)),
    };
  }

  // Placeholder implementations for remaining methods
  List<double> _extractSeasonalComponent(List<Map<String, dynamic>> data) => [];
  List<double> _calculateResidualComponent(List<double> original, List<double> trend, List<double> seasonal) => [];
  double _calculateTrendStrength(List<double> trend) => 0.5;
  double _calculateSeasonalStrength(List<double> seasonal) => 0.3;
  String _findDominantCycle(List<double> seasonal) => 'weekly';
  String _determineTrendDirection(List<double> trend) => 'stable';
  Map<String, dynamic> _extractSeasonalPatterns(List<Map<String, dynamic>> data) => {};
  Map<String, int> _calculateClusterDistribution(List<int> assignments) => {};
  int _findDominantCluster(List<int> assignments) => 0;
  List<Map<String, dynamic>> _analyzeClusterTransitions(List<int> assignments, List<Map<String, dynamic>> data) => [];
  Map<String, dynamic> _calculateAdvancedTrends(List<Map<String, dynamic>> data) => {};
  Map<String, dynamic> _identifyCyclicalPatterns(List<Map<String, dynamic>> data) => {};
  double _calculateEmotionalVolatilityIndex(List<Map<String, dynamic>> data) => 0.5;
  double _calculateSimpleDataQuality(List<Map<String, dynamic>> data) => data.isNotEmpty ? 0.8 : 0.0;
  Map<String, dynamic> _classifyBehavioralPatterns(List<Map<String, dynamic>> data) => {};
  Map<String, dynamic> _extractPredictiveFeatures(List<Map<String, dynamic>> data) => {};
  Map<String, dynamic> _analyzeEmotionRegulation(List<Map<String, dynamic>> data) => {};
  double _calculatePatternConfidence(List<Map<String, dynamic>> data) => 0.7;
  List<String> _generateMLInspiredRecommendations(Map<String, dynamic> clusters, Map<String, dynamic> importance) => [];
  Map<String, dynamic> _analyzeInterventionImpacts(List<Map<String, dynamic>> data) => {};
  Map<String, dynamic> _analyzeMediatingFactors(List<Map<String, dynamic>> data) => {};
  Map<String, dynamic> _calculateOptimalInterventionTiming(List<Map<String, dynamic>> data) => {};
  double _calculateOverallCausalStrength(Map<String, dynamic> relationships) => 0.6;
  List<String> _generateCausalActionableInsights(Map<String, dynamic> relationships, Map<String, dynamic> impacts) => [];
  Map<String, dynamic> _performSeasonalPrediction(List<Map<String, dynamic>> data, int forecastDays) => {};
  Map<String, dynamic> _performRiskAssessment(List<Map<String, dynamic>> data, Map<String, dynamic> prediction) => {};
  Map<String, dynamic> _calculatePredictionConfidenceIntervals(List<Map<String, dynamic>> data, Map<String, dynamic> prediction) => {};
  Map<String, dynamic> _performScenarioAnalysis(List<Map<String, dynamic>> data, int forecastDays) => {};
  double _calculateHistoricalPredictionAccuracy(List<Map<String, dynamic>> data) => 0.75;
  List<String> _generatePredictiveRecommendations(Map<String, dynamic> prediction, Map<String, dynamic> risk) => [];
  double _calculateLaggedCorrelation(List<double> x, List<double> y, int lag) => 0.0;
  double _calculateCausalConfidence(double correlation, int sampleSize) => 0.8;

  // ============================================================================
  // UTILIDADES Y HELPERS
  // ============================================================================

  String _hashPassword(String password) {
    final bytes = utf8.encode('${password}reflect_salt_2024');
    final digest = sha256.convert(bytes);
    return digest.toString();
  }

  bool _verifyPassword(String password, String hash) {
    return _hashPassword(password) == hash;
  }

  Future<void> clearUserData(int userId) async {
    try {
      final db = await database;
      await db.transaction((txn) async {
        await txn.delete('daily_entries', where: 'user_id = ?', whereArgs: [userId]);
        await txn.delete('interactive_moments', where: 'user_id = ?', whereArgs: [userId]);
        await txn.delete('tags', where: 'user_id = ?', whereArgs: [userId]);
        await txn.delete('user_goals', where: 'user_id = ?', whereArgs: [userId]); // ‚úÖ A√ëADIDO
      });
      _logger.i('üóëÔ∏è Datos del usuario $userId eliminados');
    } catch (e) {
      _logger.e('‚ùå Error eliminando datos del usuario: $e');
    }
  }

  Future<void> optimizeDatabase() async {
    try {
      final db = await database;
      await db.execute('VACUUM');
      await db.execute('ANALYZE');
      _logger.i('üîß Base de datos optimizada');
    } catch (e) {
      _logger.e('‚ùå Error optimizando BD: $e');
    }
  }

  Future<void> close() async {
    final db = _database;
    if (db != null) {
      await db.close();
      _database = null;
      _logger.i('üîí Base de datos cerrada');
    }
  }

  // ‚úÖ VERIFICACI√ìN DE SALUD DE BD PARA APK
  Future<bool> checkDatabaseHealth() async {
    try {
      final db = await database;
      final result = await db.rawQuery('SELECT 1');
      return result.isNotEmpty;
    } catch (e) {
      _logger.e('‚ùå Base de datos no saludable: $e');
      return false;
    }
  }

  // ‚úÖ DIAGN√ìSTICO COMPLETO DE BD PARA DEPURACI√ìN
  Future<Map<String, dynamic>> getDatabaseDiagnostics() async {
    final diagnostics = <String, dynamic>{};
    
    try {
      // Basic connectivity test
      final db = await database;
      diagnostics['database_accessible'] = true;
      
      // Get database file information
      final dbPath = db.path;
      diagnostics['database_path'] = dbPath;
      
      try {
        final dbFile = File(dbPath);
        diagnostics['file_exists'] = await dbFile.exists();
        if (await dbFile.exists()) {
          final stat = await dbFile.stat();
          diagnostics['file_size'] = stat.size;
          diagnostics['last_modified'] = stat.modified.toIso8601String();
        }
      } catch (e) {
        diagnostics['file_info_error'] = e.toString();
      }
      
      // Test basic operations
      try {
        await db.rawQuery('SELECT 1');
        diagnostics['basic_query'] = 'SUCCESS';
      } catch (e) {
        diagnostics['basic_query'] = 'FAILED: $e';
      }
      
      // Check table existence
      final tables = ['users', 'daily_entries', 'interactive_moments', 'user_goals'];
      for (final table in tables) {
        try {
          final count = await db.rawQuery('SELECT COUNT(*) as count FROM $table');
          diagnostics['table_$table'] = count.first['count'];
        } catch (e) {
          diagnostics['table_$table'] = 'ERROR: $e';
        }
      }
      
      // Test write capability
      try {
        await db.execute('CREATE TABLE IF NOT EXISTS test_write (id INTEGER PRIMARY KEY)');
        await db.insert('test_write', {'id': DateTime.now().millisecondsSinceEpoch});
        await db.delete('test_write', where: '1=1');
        await db.execute('DROP TABLE IF EXISTS test_write');
        diagnostics['write_test'] = 'SUCCESS';
      } catch (e) {
        diagnostics['write_test'] = 'FAILED: $e';
      }
      
      // Check database settings
      try {
        final journalMode = await db.rawQuery('PRAGMA journal_mode');
        diagnostics['journal_mode'] = journalMode.first.values.first;
        
        final syncMode = await db.rawQuery('PRAGMA synchronous');
        diagnostics['synchronous'] = syncMode.first.values.first;
        
        final foreignKeys = await db.rawQuery('PRAGMA foreign_keys');
        diagnostics['foreign_keys'] = foreignKeys.first.values.first;
      } catch (e) {
        diagnostics['pragma_error'] = e.toString();
      }
      
      // Device and environment info
      diagnostics['platform'] = Platform.operatingSystem;
      diagnostics['platform_version'] = Platform.operatingSystemVersion;
      
    } catch (e) {
      diagnostics['database_accessible'] = false;
      diagnostics['connection_error'] = e.toString();
    }
    
    diagnostics['timestamp'] = DateTime.now().toIso8601String();
    return diagnostics;
  }

  // ‚úÖ M√âTODO PARA DEBUGEAR PROBLEMAS EN M√ìVIL
  Future<void> debugDatabaseState() async {
    _logger.i('üîç === DIAGN√ìSTICO COMPLETO DE BASE DE DATOS ===');
    
    final diagnostics = await getDatabaseDiagnostics();
    
    for (final entry in diagnostics.entries) {
      _logger.i('${entry.key}: ${entry.value}');
      debugPrint('${entry.key}: ${entry.value}');
    }
    
    _logger.i('üîç === FIN DEL DIAGN√ìSTICO ===');
  }

  // ‚úÖ M√âTODO PARA FORZAR RECREACI√ìN DE BD EN CASO DE CORRUPCI√ìN
  Future<bool> recreateDatabaseIfCorrupted() async {
    try {
      _logger.w('üîÑ Intentando recrear base de datos...');
      
      // Close current database
      if (_database != null) {
        await _database!.close();
        _database = null;
      }
      
      // Get database paths and delete corrupted files
      final possiblePaths = await _getDatabasePaths();
      for (final path in possiblePaths) {
        try {
          final file = File(path);
          if (await file.exists()) {
            await file.delete();
            _logger.i('üóëÔ∏è Archivo eliminado: $path');
          }
        } catch (e) {
          _logger.w('‚ö†Ô∏è No se pudo eliminar $path: $e');
        }
      }
      
      // Reinitialize database
      final db = await database;
      await _testDatabaseWrite(db);
      
      _logger.i('‚úÖ Base de datos recreada exitosamente');
      return true;
      
    } catch (e) {
      _logger.e('‚ùå Error recreando base de datos: $e');
      return false;
    }
  }

  // ‚úÖ M√âTODO DE PRUEBA COMPLETO PARA VALIDAR FUNCIONAMIENTO EN M√ìVIL
  Future<Map<String, dynamic>> performComprehensiveTest() async {
    final testResults = <String, dynamic>{};
    testResults['timestamp'] = DateTime.now().toIso8601String();
    
    try {
      _logger.i('üß™ === INICIANDO PRUEBA COMPLETA DE BASE DE DATOS ===');
      
      // 1. Test database connection
      try {
        final db = await database;
        testResults['database_connection'] = 'SUCCESS';
        testResults['database_path'] = db.path;
      } catch (e) {
        testResults['database_connection'] = 'FAILED: $e';
        return testResults;
      }
      
      // 2. Test user creation
      try {
        final testUser = await createUser(
          email: 'test_${DateTime.now().millisecondsSinceEpoch}@test.com',
          password: 'testpass123',
          name: 'Test User Mobile',
        );
        testResults['user_creation'] = testUser != null ? 'SUCCESS' : 'FAILED';
        if (testUser != null) {
          testResults['test_user_id'] = testUser.id;
          
          // 3. Test daily entry save
          final testEntry = OptimizedDailyEntryModel.create(
            userId: testUser.id,
            entryDate: DateTime.now(),
            freeReflection: 'Test entry for mobile validation',
            moodScore: 8,
            energyLevel: 7,
            stressLevel: 3,
            worthIt: true,
          );
          
          final entryId = await saveDailyEntry(testEntry);
          testResults['daily_entry_save'] = entryId != null ? 'SUCCESS' : 'FAILED';
          
          // 4. Test moment save
          final testMoment = OptimizedInteractiveMomentModel.create(
            userId: testUser.id,
            emoji: '‚úÖ',
            text: 'Test moment for mobile validation',
            type: 'positive',
            intensity: 8,
          );
          
          final momentId = await saveInteractiveMoment(testUser.id, testMoment);
          testResults['moment_save'] = momentId != null ? 'SUCCESS' : 'FAILED';
          
          // 5. Test goal creation
          final goalId = await createGoalSafe(
            userId: testUser.id,
            title: 'Test Goal Mobile',
            description: 'Testing goal creation on mobile',
            type: 'consistency',
            targetValue: 7.0,
          );
          testResults['goal_creation'] = goalId != null ? 'SUCCESS' : 'FAILED';
          
          // 6. Test data retrieval
          final entries = await getDailyEntries(userId: testUser.id, limit: 1);
          testResults['data_retrieval'] = entries.isNotEmpty ? 'SUCCESS' : 'FAILED';
          
          // 7. Cleanup test data
          try {
            await clearUserData(testUser.id);
            final db = await database;
            await db.delete('users', where: 'id = ?', whereArgs: [testUser.id]);
            testResults['cleanup'] = 'SUCCESS';
          } catch (e) {
            testResults['cleanup'] = 'FAILED: $e';
          }
        }
      } catch (e) {
        testResults['user_creation'] = 'FAILED: $e';
      }
      
      // 8. Overall result
      final failedTests = testResults.values.where((v) => v.toString().startsWith('FAILED')).length;
      testResults['overall_result'] = failedTests == 0 ? 'ALL_TESTS_PASSED' : 'SOME_TESTS_FAILED';
      testResults['failed_count'] = failedTests;
      
      _logger.i('üß™ === PRUEBA COMPLETA FINALIZADA ===');
      _logger.i('Resultado: ${testResults['overall_result']}');
      
      return testResults;
      
    } catch (e) {
      testResults['critical_error'] = e.toString();
      testResults['overall_result'] = 'CRITICAL_FAILURE';
      _logger.e('‚ùå Error cr√≠tico en prueba: $e');
      return testResults;
    }
  }
  // Fix these methods in your OptimizedDatabaseService

  /// Obtener objetivos por tipo
  // lib/data/services/optimized_database_service.dart

  /// Obtener objetivos por tipo
  Future<List<GoalModel>> getGoalsByType(int userId, GoalType type) async {
    try {
      final db = await database;
      final results = await db.query(
        'user_goals',
        where: 'user_id = ? AND type = ?',
        // CORRECT: Use .name to get the simple string 'consistency', 'mood', etc.
        whereArgs: [userId, type.name],
        orderBy: 'created_at DESC',
      );

      // This assumes GoalModel.fromDatabase can correctly parse the map
      return results.map((row) => GoalModel.fromDatabase(row)).toList();
    } catch (e) {
      _logger.e('Error getting goals by type: $e');
      throw Exception('Error getting goals by type: $e');
    }
  }

  /// Obtener objetivos por estado
  Future<List<GoalModel>> getGoalsByStatus(int userId, GoalStatus status) async {
    try {
      final db = await database;
      final results = await db.query(
        'user_goals',
        where: 'user_id = ? AND status = ?',
        // CORRECT: Use .name to get the simple string 'active', 'completed', etc.
        whereArgs: [userId, status.name],
        orderBy: 'created_at DESC',
      );

      // This assumes GoalModel.fromDatabase can correctly parse the map
      return results.map((row) => GoalModel.fromDatabase(row)).toList();
    } catch (e) {
      _logger.e('Error getting goals by status: $e');
      throw Exception('Error getting goals by status: $e');
    }
  }
  
  // ============================================================================
  // üîó REMAINING INTELLIGENT ANALYTICS HELPER METHODS
  // ============================================================================
  
  /// Analyze best performance days
  Future<Map<String, dynamic>> _analyzeBestPerformanceDays(Database db, int userId, DateTime start, DateTime end) async {
    final performanceData = await db.rawQuery('''
      SELECT 
        entry_date,
        mood_score,
        energy_level,
        stress_level,
        sleep_quality,
        physical_activity,
        strftime('%w', entry_date) as day_of_week,
        (mood_score + energy_level + (10 - stress_level)) / 3.0 as performance_score
      FROM daily_entries 
      WHERE user_id = ? AND entry_date BETWEEN ? AND ? 
        AND mood_score IS NOT NULL 
        AND energy_level IS NOT NULL 
        AND stress_level IS NOT NULL
      ORDER BY performance_score DESC
      LIMIT 10
    ''', [userId, start.toIso8601String().split('T')[0], end.toIso8601String().split('T')[0]]);
    
    if (performanceData.length < 3) {
      return {'status': 'insufficient_data'};
    }
    
    // Analyze patterns in best days
    final bestDays = performanceData.take(5).toList();
    final commonFactors = <String, dynamic>{};
    
    // Day of week analysis
    final dayFrequency = <String, int>{};
    for (final day in bestDays) {
      final dayOfWeek = day['day_of_week'].toString();
      dayFrequency[dayOfWeek] = (dayFrequency[dayOfWeek] ?? 0) + 1;
    }
    
    commonFactors['best_days_of_week'] = dayFrequency;
    commonFactors['average_sleep_quality'] = bestDays
        .where((d) => d['sleep_quality'] != null)
        .map((d) => (d['sleep_quality'] as num).toDouble())
        .fold(0.0, (a, b) => a + b) / bestDays.length;
    
    commonFactors['average_physical_activity'] = bestDays
        .where((d) => d['physical_activity'] != null)
        .map((d) => (d['physical_activity'] as num).toDouble())
        .fold(0.0, (a, b) => a + b) / bestDays.length;
    
    return {
      'best_performance_days': bestDays,
      'common_success_factors': commonFactors,
      'insights': _generateBestDayInsights(commonFactors),
    };
  }
  
  /// Analyze recent trends
  Future<Map<String, dynamic>> _analyzeRecentTrends(Database db, int userId, int days) async {
    final recent = days ~/ 3; // Last third of the period
    final endDate = DateTime.now();
    final recentStart = endDate.subtract(Duration(days: recent));
    
    final recentData = await db.rawQuery('''
      SELECT AVG(mood_score) as recent_mood, AVG(energy_level) as recent_energy, AVG(stress_level) as recent_stress
      FROM daily_entries 
      WHERE user_id = ? AND entry_date >= ?
    ''', [userId, recentStart.toIso8601String().split('T')[0]]);
    
    final olderStart = endDate.subtract(Duration(days: days));
    final olderEnd = recentStart;
    
    final olderData = await db.rawQuery('''
      SELECT AVG(mood_score) as older_mood, AVG(energy_level) as older_energy, AVG(stress_level) as older_stress
      FROM daily_entries 
      WHERE user_id = ? AND entry_date BETWEEN ? AND ?
    ''', [userId, olderStart.toIso8601String().split('T')[0], olderEnd.toIso8601String().split('T')[0]]);
    
    if (recentData.isEmpty || olderData.isEmpty) {
      return {'status': 'insufficient_data'};
    }
    
    final recentMood = (recentData.first['recent_mood'] as double?) ?? 5.0;
    final olderMood = (olderData.first['older_mood'] as double?) ?? 5.0;
    final recentStress = (recentData.first['recent_stress'] as double?) ?? 5.0;
    final recentEnergy = (recentData.first['recent_energy'] as double?) ?? 5.0;
    final olderEnergy = (olderData.first['older_energy'] as double?) ?? 5.0;
    
    return {
      'declining_mood': recentMood < olderMood - 0.5,
      'high_stress': recentStress >= 6.5,
      'low_energy': recentEnergy < 5.0,
      'improving_trend': recentMood > olderMood + 0.5 && recentEnergy > olderEnergy + 0.5,
      'mood_change': recentMood - olderMood,
      'energy_change': recentEnergy - olderEnergy,
    };
  }
  
  /// Calculate correlation between two variables
  Future<Map<String, dynamic>> _calculateCorrelation(Database db, int userId, String var1, String var2, DateTime start, DateTime end) async {
    final data = await db.rawQuery('''
      SELECT $var1, $var2
      FROM daily_entries 
      WHERE user_id = ? AND entry_date BETWEEN ? AND ? 
        AND $var1 IS NOT NULL AND $var2 IS NOT NULL
    ''', [userId, start.toIso8601String().split('T')[0], end.toIso8601String().split('T')[0]]);
    
    if (data.length < 5) {
      return {'correlation': 0.0, 'significance': 'insufficient_data'};
    }
    
    final x = data.map((e) => (e[var1] as num).toDouble()).toList();
    final y = data.map((e) => (e[var2] as num).toDouble()).toList();
    
    final n = x.length;
    final meanX = x.reduce((a, b) => a + b) / n;
    final meanY = y.reduce((a, b) => a + b) / n;
    
    double numerator = 0.0;
    double denomX = 0.0;
    double denomY = 0.0;
    
    for (int i = 0; i < n; i++) {
      final dx = x[i] - meanX;
      final dy = y[i] - meanY;
      numerator += dx * dy;
      denomX += dx * dx;
      denomY += dy * dy;
    }
    
    final correlation = numerator / math.sqrt(denomX * denomY);
    
    String significance;
    final absCorr = correlation.abs();
    if (absCorr > 0.7) {
      significance = 'strong';
    } else if (absCorr > 0.4) {
      significance = 'moderate';
    } else if (absCorr > 0.2) {
      significance = 'weak';
    } else {
      significance = 'negligible';
    }
    
    return {
      'correlation': correlation,
      'significance': significance,
      'sample_size': n,
    };
  }
  
  /// Calculate trend direction for a list of values
  double _calculateTrend(List<double> values) {
    if (values.length < 2) return 0.0;
    
    double sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0;
    final n = values.length;
    
    for (int i = 0; i < n; i++) {
      final x = i.toDouble();
      final y = values[i];
      sumX += x;
      sumY += y;
      sumXY += x * y;
      sumX2 += x * x;
    }
    
    return (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
  }
  
  /// Generate insights from emotional patterns
  List<String> _generatePatternInsights(List<Map<String, dynamic>> weeklyPatterns) {
    final insights = <String>[];
    
    if (weeklyPatterns.isNotEmpty) {
      // Find best and worst days - create mutable copy first
      final sortablePatterns = List<Map<String, dynamic>>.from(weeklyPatterns);
      sortablePatterns.sort((a, b) => (b['avg_mood'] as double).compareTo(a['avg_mood'] as double));
      final bestDay = sortablePatterns.first['day_of_week'];
      final worstDay = sortablePatterns.last['day_of_week'];
      
      insights.add('Tu mejor d√≠a de la semana suele ser $bestDay');
      insights.add('Considera planificar actividades especiales para mejorar tu $worstDay');
      
      // Check for Monday blues
      final mondayData = weeklyPatterns.firstWhere(
        (p) => p['day_of_week'] == 'Monday', 
        orElse: () => {'avg_mood': 5.0}
      );
      if ((mondayData['avg_mood'] as double) < 5.0) {
        insights.add('Pareces experimentar el "blues del lunes". Considera prepararte el domingo para una mejor semana');
      }
    }
    
    return insights;
  }
  
  /// Generate insights from correlations
  List<String> _generateCorrelationInsights(Map<String, dynamic> correlations) {
    final insights = <String>[];
    
    final sleepMood = correlations['sleep_mood_correlation'] as Map<String, dynamic>?;
    if (sleepMood != null && (sleepMood['correlation'] as double) > 0.4) {
      insights.add('Tu calidad de sue√±o tiene un impacto significativo en tu estado de √°nimo');
    }
    
    final exerciseEnergy = correlations['exercise_energy_correlation'] as Map<String, dynamic>?;
    if (exerciseEnergy != null && (exerciseEnergy['correlation'] as double) > 0.3) {
      insights.add('El ejercicio regular mejora notablemente tus niveles de energ√≠a');
    }
    
    final socialMood = correlations['social_mood_correlation'] as Map<String, dynamic>?;
    if (socialMood != null && (socialMood['correlation'] as double) > 0.3) {
      insights.add('Las interacciones sociales tienen un efecto positivo en tu bienestar');
    }
    
    return insights;
  }
  
  /// Generate insights from best performance days
  List<String> _generateBestDayInsights(Map<String, dynamic> factors) {
    final insights = <String>[];
    
    final avgSleep = factors['average_sleep_quality'] as double?;
    if (avgSleep != null && avgSleep > 7.0) {
      insights.add('Tus mejores d√≠as coinciden con una buena calidad de sue√±o (${avgSleep.toStringAsFixed(1)}/10)');
    }
    
    final avgActivity = factors['average_physical_activity'] as double?;
    if (avgActivity != null && avgActivity > 6.0) {
      insights.add('La actividad f√≠sica parece ser un factor clave en tus mejores d√≠as');
    }
    
    return insights;
  }
  
  /// Get monthly emotional patterns for longer-term users
  Future<List<Map<String, dynamic>>> _getMonthlyEmotionalPatterns(Database db, int userId) async {
    try {
      return await db.rawQuery('''
        SELECT 
          strftime('%Y-%m', entry_date) as month,
          AVG(mood_score) as avg_mood,
          AVG(energy_level) as avg_energy,
          AVG(stress_level) as avg_stress,
          COUNT(*) as entries_count
        FROM daily_entries 
        WHERE user_id = ? AND entry_date >= date('now', '-12 months')
        GROUP BY strftime('%Y-%m', entry_date)
        ORDER BY month DESC
        LIMIT 12
      ''', [userId]);
    } catch (e) {
      return [];
    }
  }
  
  /// Calculate emotional stability index
  Future<double> _calculateEmotionalStability(Database db, int userId, DateTime start, DateTime end) async {
    try {
      final data = await db.rawQuery('''
        SELECT mood_score, energy_level, stress_level
        FROM daily_entries 
        WHERE user_id = ? AND entry_date BETWEEN ? AND ?
          AND mood_score IS NOT NULL AND energy_level IS NOT NULL AND stress_level IS NOT NULL
      ''', [userId, start.toIso8601String().split('T')[0], end.toIso8601String().split('T')[0]]);
      
      if (data.length < 5) return 0.5;
      
      // Calculate variance for each metric
      final moods = data.map((e) => (e['mood_score'] as int).toDouble()).toList();
      final energies = data.map((e) => (e['energy_level'] as int).toDouble()).toList();
      final stresses = data.map((e) => (e['stress_level'] as int).toDouble()).toList();
      
      final moodVariance = _calculateVariance(moods);
      final energyVariance = _calculateVariance(energies);
      final stressVariance = _calculateVariance(stresses);
      
      // Lower variance = higher stability
      final avgVariance = (moodVariance + energyVariance + stressVariance) / 3.0;
      return (1.0 - (avgVariance / 10.0)).clamp(0.0, 1.0);
    } catch (e) {
      return 0.5;
    }
  }
  
  // ============================================================================
  // üßπ DATA CLEANUP METHODS FOR TESTING
  // ============================================================================
  
  /// Delete all daily entries for a specific user
  Future<void> deleteDailyEntriesForUser(int userId) async {
    try {
      final db = await database;
      await db.delete('daily_entries', where: 'user_id = ?', whereArgs: [userId]);
      _logger.i('‚úÖ Daily entries deleted for user $userId');
    } catch (e) {
      _logger.e('‚ùå Error deleting daily entries for user $userId: $e');
      rethrow;
    }
  }
  
  /// Delete all interactive moments for a specific user
  Future<void> deleteInteractiveMomentsForUser(int userId) async {
    try {
      final db = await database;
      await db.delete('interactive_moments', where: 'user_id = ?', whereArgs: [userId]);
      _logger.i('‚úÖ Interactive moments deleted for user $userId');
    } catch (e) {
      _logger.e('‚ùå Error deleting interactive moments for user $userId: $e');
      rethrow;
    }
  }
  
  /// Delete all goals for a specific user
  Future<void> deleteGoalsForUser(int userId) async {
    try {
      final db = await database;
      await db.delete('user_goals', where: 'user_id = ?', whereArgs: [userId]);
      _logger.i('‚úÖ Goals deleted for user $userId');
    } catch (e) {
      _logger.e('‚ùå Error deleting goals for user $userId: $e');
      rethrow;
    }
  }
  
  /// Delete all tags for a specific user
  Future<void> deleteTagsForUser(int userId) async {
    try {
      final db = await database;
      await db.delete('tags', where: 'user_id = ?', whereArgs: [userId]);
      _logger.i('‚úÖ Tags deleted for user $userId');
    } catch (e) {
      _logger.e('‚ùå Error deleting tags for user $userId: $e');
      rethrow;
    }
  }
  
  /// Delete all test data for a specific user (comprehensive cleanup)
  Future<void> deleteAllTestDataForUser(int userId) async {
    try {
      final db = await database;
      await db.transaction((txn) async {
        // Delete in order to avoid foreign key constraints
        await txn.delete('daily_entries', where: 'user_id = ?', whereArgs: [userId]);
        await txn.delete('interactive_moments', where: 'user_id = ?', whereArgs: [userId]);
        await txn.delete('user_goals', where: 'user_id = ?', whereArgs: [userId]);
        await txn.delete('tags', where: 'user_id = ?', whereArgs: [userId]);
        await txn.delete('personalized_challenges', where: 'user_id = ?', whereArgs: [userId]);
      });
      _logger.i('‚úÖ All test data deleted for user $userId');
    } catch (e) {
      _logger.e('‚ùå Error deleting all test data for user $userId: $e');
      rethrow;
    }
  }
  
  /// Get data statistics for a user (for testing purposes)
  Future<Map<String, int>> getDataStatsForUser(int userId) async {
    try {
      final db = await database;
      
      final dailyEntriesCount = Sqflite.firstIntValue(
        await db.rawQuery('SELECT COUNT(*) FROM daily_entries WHERE user_id = ?', [userId])
      ) ?? 0;
      
      final momentsCount = Sqflite.firstIntValue(
        await db.rawQuery('SELECT COUNT(*) FROM interactive_moments WHERE user_id = ?', [userId])
      ) ?? 0;
      
      final goalsCount = Sqflite.firstIntValue(
        await db.rawQuery('SELECT COUNT(*) FROM user_goals WHERE user_id = ?', [userId])
      ) ?? 0;
      
      final tagsCount = Sqflite.firstIntValue(
        await db.rawQuery('SELECT COUNT(*) FROM tags WHERE user_id = ?', [userId])
      ) ?? 0;
      
      return {
        'daily_entries': dailyEntriesCount,
        'interactive_moments': momentsCount,
        'user_goals': goalsCount,
        'tags': tagsCount,
      };
    } catch (e) {
      _logger.e('‚ùå Error getting data stats for user $userId: $e');
      return {
        'daily_entries': 0,
        'interactive_moments': 0,
        'user_goals': 0,
        'tags': 0,
      };
    }
  }

  /// Check if any users exist in the database
  Future<bool> hasAnyUsers() async {
    try {
      final db = await database;
      final result = await db.rawQuery('SELECT COUNT(*) as count FROM users');
      final count = Sqflite.firstIntValue(result) ?? 0;
      _logger.i('üìä Total users in database: $count');
      return count > 0;
    } catch (e) {
      _logger.e('‚ùå Error checking if users exist: $e');
      return false;
    }
  }
  
  /// Get the first user from the database (for single profile per device)
  Future<OptimizedUserModel?> getFirstUser() async {
    try {
      final db = await database;
      final result = await db.query(
        'users',
        limit: 1,
        orderBy: 'id ASC',
      );
      
      if (result.isNotEmpty) {
        final user = OptimizedUserModel.fromDatabase(result.first);
        _logger.i('üë§ Retrieved first user: ${user.name}');
        return user;
      }
      
      return null;
    } catch (e) {
      _logger.e('‚ùå Error getting first user: $e');
      return null;
    }
  }

  /// Clear all users from database (for testing first-time user flow)
  Future<void> clearAllUsers() async {
    try {
      final db = await database;
      await db.delete('users');
      _logger.i('üßπ All users cleared from database for testing');
    } catch (e) {
      _logger.e('‚ùå Error clearing users: $e');
    }
  }

}

// ============================================================================
// CLASE HELPER PARA PER√çODOS DE VIDA
// ============================================================================

class _LifePeriod {
  final String name;
  final int startDay;
  final int endDay;
  final double avgMood;
  final double avgEnergy;
  final double avgStress;

  _LifePeriod(this.name, this.startDay, this.endDay, this.avgMood,
      this.avgEnergy, this.avgStress);
}