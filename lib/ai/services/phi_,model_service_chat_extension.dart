// lib/ai/services/phi_model_service_chat_extension.dart
// ============================================================================
// EXTENSI√ìN DEL SERVICIO DE IA PARA CHAT CONVERSACIONAL
// ============================================================================

import 'package:flutter/foundation.dart';
import 'phi_model_service_genai_complete.dart';
import 'genai_platform_interface.dart';

/// Extensi√≥n del servicio de IA para manejar chat conversacional
extension ChatExtension on PhiModelServiceGenAI {

  /// Genera respuesta de chat usando la IA real
  Future<String> generateChatResponse({
    required String userMessage,
    required String conversationHistory,
    required String userName,
  }) async {
    if (!isInitialized) {
      throw Exception('El servicio de IA no est√° inicializado');
    }

    debugPrint('üó£Ô∏è Generando respuesta de chat...');
    debugPrint('üë§ Usuario: $userName');
    debugPrint('üí¨ Mensaje: ${userMessage.substring(0, userMessage.length > 50 ? 50 : userMessage.length)}...');
    debugPrint('üìú Historial: ${conversationHistory.length} caracteres');

    try {
      // Crear prompt espec√≠fico para chat
      final chatPrompt = _buildChatPrompt(
        userMessage: userMessage,
        conversationHistory: conversationHistory,
        userName: userName,
      );

      String response;

      if (isGenAIAvailable) {
        // Usar GenAI nativo
        response = await _generateChatWithNativeGenAI(chatPrompt);
      } else {
        // Si GenAI no est√° disponible, fallar completamente
        throw Exception('GenAI no est√° disponible para generar respuestas de chat');
      }

      debugPrint('‚úÖ Respuesta generada: ${response.length} caracteres');
      return response;

    } catch (e) {
      debugPrint('‚ùå Error generando respuesta de chat: $e');
      rethrow; // Re-lanzar error sin fallback
    }
  }

  /// Construye el prompt espec√≠fico para chat conversacional
  String _buildChatPrompt({
    required String userMessage,
    required String conversationHistory,
    required String userName,
  }) {
    return '''
Eres un Coach de IA especializado en bienestar y desarrollo personal. Tu nombre es "Coach IA" y tu rol es:

PERSONALIDAD:
- Emp√°tico, comprensivo y motivador
- Profesional pero c√°lido y accesible
- Enfocado en el bienestar integral de la persona
- Propositivo y orientado a soluciones

ESPECIALIDADES:
- Bienestar emocional y mental
- Gesti√≥n del estr√©s y ansiedad
- Mejora de h√°bitos saludables
- Desarrollo personal y autocuidado
- An√°lisis de patrones de comportamiento

ESTILO DE COMUNICACI√ìN:
- Respuestas naturales y conversacionales
- Preguntas reflexivas cuando sea apropiado
- Consejos pr√°cticos y aplicables
- Validaci√≥n emocional
- Longitud apropiada (ni muy corto ni muy largo)

${conversationHistory.isNotEmpty ? '''
CONTEXTO DE LA CONVERSACI√ìN:
$conversationHistory
''' : ''}

MENSAJE ACTUAL DEL USUARIO ($userName):
$userMessage

INSTRUCCIONES:
1. Responde como Coach IA manteniendo coherencia con la conversaci√≥n anterior
2. Si es un saludo inicial, pres√©ntate brevemente y pregunta c√≥mo puedes ayudar
3. Si el usuario menciona problemas espec√≠ficos, ofrece apoyo y estrategias concretas
4. Si pide an√°lisis de patrones, sugiere que revises sus reflexiones y datos
5. Mant√©n un tono profesional pero c√°lido
6. No inventes informaci√≥n sobre el usuario que no tengas
7. Si necesitas m√°s informaci√≥n para ayudar mejor, pregunta espec√≠ficamente

Responde ahora como Coach IA:
''';
  }

  /// Genera respuesta usando GenAI nativo para chat
  Future<String> _generateChatWithNativeGenAI(String prompt) async {
    debugPrint('üöÄ Generando respuesta de chat con GenAI nativo...');

    final response = await GenAIPlatformInterface.generateText(
      prompt,
      maxTokens: 300, // Respuestas de chat m√°s concisas
      temperature: 0.8, // M√°s creatividad para conversaci√≥n natural
      topP: 0.9,
    );

    if (response == null || response.isEmpty) {
      throw Exception('GenAI no devolvi√≥ respuesta v√°lida para el chat');
    }

    return _cleanupChatResponse(response);
  }

  /// Limpia la respuesta de chat
  String _cleanupChatResponse(String response) {
    // Remover tokens especiales del modelo
    String cleaned = response
        .replaceAll('<|assistant|>', '')
        .replaceAll('<|end|>', '')
        .replaceAll('<|user|>', '')
        .replaceAll('<|system|>', '')
        .replaceAll('Coach IA:', '') // Remover prefijo si aparece
        .replaceAll('Respuesta:', ''); // Remover otros prefijos comunes

    // Limpiar espacios extra y l√≠neas vac√≠as
    cleaned = cleaned
        .split('\n')
        .map((line) => line.trim())
        .where((line) => line.isNotEmpty)
        .join('\n')
        .trim();

    // Si la respuesta est√° vac√≠a despu√©s de la limpieza, generar error
    if (cleaned.isEmpty) {
      throw Exception('La IA gener√≥ una respuesta vac√≠a');
    }

    // Si la respuesta es muy corta (menos de 10 caracteres), probablemente es un error
    if (cleaned.length < 10) {
      throw Exception('La IA gener√≥ una respuesta demasiado corta: "$cleaned"');
    }

    // Si la respuesta es muy larga (m√°s de 1000 caracteres), truncar
    if (cleaned.length > 1000) {
      cleaned = cleaned.substring(0, 1000) + '...';
      debugPrint('‚ö†Ô∏è Respuesta truncada por ser muy larga');
    }

    return cleaned;
  }

  /// Verifica si el servicio puede manejar chat
  bool get canHandleChat => isInitialized && isGenAIAvailable;

  /// Obtiene informaci√≥n del estado del chat
  Map<String, dynamic> getChatCapabilities() {
    return {
      'chat_available': canHandleChat,
      'ai_initialized': isInitialized,
      'genai_available': isGenAIAvailable,
      'can_generate_responses': canHandleChat,
      'error_if_unavailable': !canHandleChat ? 'IA no disponible para chat' : null,
    };
  }
}