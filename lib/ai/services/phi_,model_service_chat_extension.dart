// lib/ai/services/phi_model_service_chat_extension.dart
// ============================================================================
// EXTENSI√ìN DEL SERVICIO DE IA PARA CHAT CONVERSACIONAL GENERAL
// ============================================================================

import 'package:flutter/foundation.dart';
import 'phi_model_service_genai_complete.dart';
import 'genai_platform_interface.dart';

/// Extensi√≥n del servicio de IA para manejar chat conversacional general
extension ChatExtension on PhiModelServiceGenAI {

  /// Genera respuesta de chat usando la IA real - MODIFICADO: Conversaci√≥n general
  Future<String> generateChatResponse({
    required String userMessage,
    required String conversationHistory,
    required String userName,
    String? emotionalContext,
  }) async {
    if (!isInitialized) {
      throw Exception('El servicio de IA no est√° inicializado');
    }

    debugPrint('üó£Ô∏è Generando respuesta de chat conversacional...');
    debugPrint('üë§ Usuario: $userName');
    debugPrint('üí¨ Mensaje: ${userMessage.substring(0, userMessage.length > 50 ? 50 : userMessage.length)}...');
    debugPrint('üìú Historial: ${conversationHistory.length} caracteres');
    debugPrint('üí≠ Contexto emocional: ${emotionalContext?.length ?? 0} caracteres');

    try {
      // Crear prompt espec√≠fico para chat general
      final chatPrompt = _buildGeneralChatPrompt(
        userMessage: userMessage,
        conversationHistory: conversationHistory,
        userName: userName,
        emotionalContext: emotionalContext,
      );

      String response;

      if (isGenAIAvailable) {
        // Usar GenAI nativo
        response = await _generateChatWithNativeGenAI(chatPrompt);
      } else {
        // Si GenAI no est√° disponible, fallar completamente
        throw Exception('GenAI no est√° disponible para generar respuestas de chat');
      }

      debugPrint('‚úÖ Respuesta generada: ${response.length} caracteres');
      return response;

    } catch (e) {
      debugPrint('‚ùå Error generando respuesta de chat: $e');
      rethrow; // Re-lanzar error sin fallback
    }
  }

  /// Construye el prompt espec√≠fico para chat conversacional general - MODIFICADO
  String _buildGeneralChatPrompt({
    required String userMessage,
    required String conversationHistory,
    required String userName,
    String? emotionalContext,
  }) {
    return '''
Eres un asistente de IA conversacional inteligente y emp√°tico. Tu personalidad y caracter√≠sticas son:

PERSONALIDAD PRINCIPAL:
- Emp√°tico, comprensivo y genuinamente interesado en ayudar
- Conversacional y natural, como un buen amigo que escucha
- Inteligente pero accesible, sin ser condescendiente
- Propositivo y orientado a soluciones pr√°cticas
- Adaptable al estilo de comunicaci√≥n del usuario

CAPACIDADES PRINCIPALES:
- Conversar sobre cualquier tema de manera natural e informativa
- Analizar y validar emociones del usuario con sensibilidad
- Proponer soluciones pr√°cticas y realistas a problemas
- Ofrecer perspectivas diferentes y √∫tiles
- Hacer preguntas reflexivas que ayuden al usuario a pensar
- Proporcionar apoyo emocional cuando sea necesario

ESTILO DE COMUNICACI√ìN:
- Respuestas naturales y conversacionales (no rob√≥ticas)
- Longitud apropiada: ni muy corto ni excesivamente largo
- Uso de emojis ocasionales para expresar calidez (pero sin exceso)
- Preguntas de seguimiento cuando sea apropiado
- Validaci√≥n emocional antes de dar consejos
- Lenguaje claro y directo, evitando jerga t√©cnica innecesaria

ESPECIALIDADES EN SOLUCIONES:
- Problemas interpersonales y de comunicaci√≥n
- Gesti√≥n del tiempo y productividad
- Toma de decisiones y an√°lisis de opciones
- Manejo del estr√©s y emociones
- Desarrollo personal y autoconocimiento
- Resoluci√≥n creativa de problemas
- Apoyo en situaciones dif√≠ciles

${emotionalContext?.isNotEmpty == true ? '''
CONTEXTO EMOCIONAL Y PREFERENCIAS DEL USUARIO:
$emotionalContext

Usa esta informaci√≥n para personalizar tu respuesta y demostrar que recuerdas aspectos importantes de conversaciones anteriores.
''' : ''}

${conversationHistory.isNotEmpty ? '''
HISTORIAL DE LA CONVERSACI√ìN ACTUAL:
$conversationHistory

Mant√©n coherencia con el flujo de la conversaci√≥n y haz referencia a puntos anteriores cuando sea relevante.
''' : ''}

MENSAJE ACTUAL DEL USUARIO ($userName):
$userMessage

INSTRUCCIONES ESPEC√çFICAS PARA TU RESPUESTA:

1. AN√ÅLISIS EMOCIONAL:
   - Identifica las emociones presentes en el mensaje del usuario
   - Valida esas emociones como naturales y comprensibles
   - Si detectas malestar emocional, ab√≥rdalo con sensibilidad antes de dar soluciones

2. RESPUESTA PRINCIPAL:
   - Responde directamente a lo que el usuario est√° preguntando o expresando
   - Si es una pregunta, proporciona informaci√≥n √∫til y completa
   - Si es un problema, ofrece 2-3 soluciones pr√°cticas y espec√≠ficas
   - Si es una expresi√≥n emocional, valida y explora con preguntas reflexivas

3. PROPUESTA DE SOLUCIONES (cuando aplique):
   - Soluciones pr√°cticas y realizables
   - Pasos concretos que el usuario puede seguir
   - Alternativas si la primera opci√≥n no funciona
   - Consideraci√≥n de las limitaciones y recursos del usuario

4. SEGUIMIENTO:
   - Hacer una pregunta de seguimiento cuando sea apropiado
   - Ofrecer profundizar en temas que parezcan importantes
   - Sugerir pr√≥ximos pasos si es relevante

5. TONO Y ESTILO:
   - Mant√©n un equilibrio entre profesional y amigable
   - S√© aut√©ntico y evita respuestas que suenen a plantilla
   - Adapta tu nivel de formalidad al estilo del usuario
   - Demuestra inter√©s genuino en ayudar

TEMAS QUE PUEDES ABORDAR:
- Relaciones interpersonales y familiares
- Trabajo, estudios y carrera profesional
- Salud mental y bienestar emocional
- Productividad y organizaci√≥n personal
- Hobbies, intereses y desarrollo personal
- Tecnolog√≠a y herramientas √∫tiles
- Creatividad y resoluci√≥n de problemas
- Cualquier otro tema que el usuario traiga

Recuerda: Tu objetivo es ser un compa√±ero de conversaci√≥n √∫til, emp√°tico y que realmente ayude al usuario a sentirse mejor y encontrar soluciones a lo que necesita.

GENERA UNA RESPUESTA NATURAL Y √öTIL:''';
  }

  /// Genera respuesta usando GenAI nativo - MODIFICADO: Mejor manejo de errores
  Future<String> _generateChatWithNativeGenAI(String prompt) async {
    try {
      debugPrint('ü§ñ Usando GenAI nativo para generar respuesta...');

      final response = await GenAIPlatformInterface.generateText(
        prompt,
        maxTokens: 300, // Respuestas de chat m√°s concisas
        temperature: 0.8, // M√°s creatividad para conversaci√≥n natural
        topP: 0.9,
      );

      if (response == null || response.isEmpty) {
        throw Exception('GenAI devolvi√≥ una respuesta vac√≠a');
      }

      // Limpiar y validar la respuesta
      final cleanedResponse = _cleanResponse(response);

      debugPrint('‚úÖ Respuesta GenAI generada exitosamente');
      return cleanedResponse;

    } catch (e) {
      debugPrint('‚ùå Error en GenAI nativo: $e');
      throw Exception('Error generando respuesta con GenAI: $e');
    }
  }

  /// Limpia y valida la respuesta de la IA - NUEVO
  String _cleanResponse(String response) {
    // Eliminar posibles prefijos innecesarios y tokens especiales
    String cleaned = response
        .replaceAll('<|assistant|>', '')
        .replaceAll('<|end|>', '')
        .replaceAll('<|user|>', '')
        .replaceAll('<|system|>', '')
        .replaceFirst(RegExp(r'^(Respuesta:|Respuesta del asistente:|IA:|Asistente:)\s*'), '')
        .trim();

    // Limpiar espacios extra y l√≠neas vac√≠as
    cleaned = cleaned
        .split('\n')
        .map((line) => line.trim())
        .where((line) => line.isNotEmpty)
        .join('\n')
        .trim();

    // Asegurar que la respuesta no est√© vac√≠a
    if (cleaned.isEmpty) {
      return 'Lo siento, tuve un problema generando mi respuesta. ¬øPodr√≠as reformular tu pregunta?';
    }

    // Limitar longitud m√°xima para evitar respuestas excesivamente largas
    if (cleaned.length > 2000) {
      cleaned = cleaned.substring(0, 1950) + '...';
    }

    return cleaned;
  }

  /// Generar respuesta de emergencia cuando falla todo - NUEVO
  String generateEmergencyResponse(String userMessage) {
    final lowerMessage = userMessage.toLowerCase();

    // Respuestas espec√≠ficas seg√∫n el contenido del mensaje
    if (lowerMessage.contains(RegExp(r'\b(triste|deprimido|mal|horrible)\b'))) {
      return "Siento mucho que te sientas as√≠. Aunque mi sistema est√° teniendo dificultades t√©cnicas en este momento, quiero que sepas que es completamente normal tener d√≠as dif√≠ciles. ¬øTe ayudar√≠a si hablamos sobre lo que te est√° pasando?";
    }

    if (lowerMessage.contains(RegExp(r'\b(ayuda|help|socorro)\b'))) {
      return "Entiendo que necesitas ayuda. Aunque mi sistema de IA est√° experimentando problemas, estoy aqu√≠ para escucharte. ¬øPuedes contarme m√°s espec√≠ficamente con qu√© necesitas apoyo?";
    }

    if (lowerMessage.contains(RegExp(r'\b(gracias|thank you)\b'))) {
      return "¬°De nada! Me alegra poder ayudarte, aunque sea de forma limitada en este momento. ¬øHay algo m√°s en lo que pueda apoyarte?";
    }

    if (lowerMessage.contains('?')) {
      return "Esa es una buena pregunta. Lamentablemente, mi sistema de IA est√° teniendo problemas t√©cnicos y no puedo darte la respuesta completa que mereces. ¬øPodr√≠as darme m√°s contexto para intentar ayudarte de otra manera?";
    }

    // Respuesta general emp√°tica
    return "Gracias por compartir eso conmigo. Mi sistema de IA est√° experimentando dificultades t√©cnicas, pero quiero que sepas que estoy aqu√≠ para escucharte. ¬øPuedes contarme un poco m√°s sobre lo que tienes en mente?";
  }
}