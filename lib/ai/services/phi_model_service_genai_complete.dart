// lib/ai/services/phi_model_service_genai_complete.dart
// VERSI√ìN ACTUALIZADA PARA GENERAR AN√ÅLISIS RICO

import 'dart:io';
import 'package:flutter/foundation.dart';

import '../models/ai_response_model.dart';
import '../prompts/wellness_coach_prompts.dart';
import 'model_downloader.dart';
import 'genai_platform_interface.dart';

// ‚úÖ IMPORTAR EL NUEVO SERVICIO DE AN√ÅLISIS INTERACTIVO
import 'interactive_ai_analysis_service.dart';

class PhiModelServiceGenAI {
  static PhiModelServiceGenAI? _instance;
  static PhiModelServiceGenAI get instance => _instance ??= PhiModelServiceGenAI._();

  PhiModelServiceGenAI._();

  bool _isInitialized = false;
  bool _isGenAIAvailable = false;
  String _modelDirectory = '';

  bool get isInitialized => _isInitialized;
  bool get isGenAIAvailable => _isGenAIAvailable;

  /// Inicializa el servicio GenAI completo
  Future<bool> initialize({
    required Function(String) onStatusUpdate,
    required Function(double) onProgress,
  }) async {
    if (_isInitialized) return true;

    try {
      onStatusUpdate('Verificando capacidades de IA...');

      // Verificar si GenAI est√° disponible en la plataforma
      _isGenAIAvailable = await GenAIPlatformInterface.isGenAIAvailable();
      debugPrint('üîç GenAI disponible: $_isGenAIAvailable');

      // Descargar/verificar archivos del modelo
      final downloader = ModelDownloader();
      onStatusUpdate('Verificando archivos del modelo...');

      if (!await downloader.isModelDownloaded()) {
        onStatusUpdate('Descargando modelo Phi-3.5 (esto puede tomar unos minutos)...');
        await downloader.downloadModel(
          onProgress: onProgress,
          onStatusUpdate: onStatusUpdate,
        );
      }

      // Obtener directorio del modelo
      _modelDirectory = await downloader.getModelDirectory();
      onStatusUpdate('Archivos del modelo verificados');

      if (_isGenAIAvailable) {
        // Inicializar GenAI nativo
        onStatusUpdate('Inicializando motor de IA nativo...');
        final initSuccess = await GenAIPlatformInterface.initializeModel(_modelDirectory);

        if (!initSuccess) {
          onStatusUpdate('Error inicializando GenAI, usando modo compatible...');
          _isGenAIAvailable = false;
        } else {
          onStatusUpdate('Motor de IA nativo inicializado correctamente');
        }
      } else {
        onStatusUpdate('Usando modo compatible de IA...');
      }

      // Verificar funcionamiento con una prueba
      onStatusUpdate('Verificando funcionamiento de la IA...');
      await _testAIFunctionality();

      _isInitialized = true;
      onStatusUpdate(_isGenAIAvailable ?
      'IA Phi-3.5 lista (modo nativo)' :
      'IA lista (modo compatible)');

      return true;

    } catch (e) {
      onStatusUpdate('Error inicializando IA: $e');
      debugPrint('‚ùå Error inicializando PhiModelServiceGenAI: $e');
      _isInitialized = false;
      return false;
    }
  }

  /// ‚úÖ M√âTODO ACTUALIZADO: Genera resumen semanal RICO usando el nuevo sistema INTERACTIVO
  Future<AIResponseModel?> generateWeeklySummary({
    required List<Map<String, dynamic>> weeklyEntries,
    required List<Map<String, dynamic>> weeklyMoments,
    required String userName,
  }) async {
    if (!_isInitialized) {
      throw Exception('El servicio GenAI no est√° inicializado.');
    }

    try {
      debugPrint('ü§ñ Generando an√°lisis semanal INTERACTIVO...');
      debugPrint('üìä Datos: ${weeklyEntries.length} entradas, ${weeklyMoments.length} momentos');

      // ‚úÖ NUEVO: Usar el servicio de an√°lisis interactivo que cita datos espec√≠ficos
      final interactiveAnalysis = await InteractiveAIAnalysisService.generatePersonalizedAnalysis(
        weeklyEntries: weeklyEntries,
        weeklyMoments: weeklyMoments,
        userName: userName,
      );

      debugPrint('‚úÖ An√°lisis INTERACTIVO generado: ${interactiveAnalysis.summary.length} caracteres');
      debugPrint('üìà Datos espec√≠ficos citados: wellnessScore=${interactiveAnalysis.wellnessScore}');

      return interactiveAnalysis;

    } catch (e) {
      debugPrint('‚ùå Error generando an√°lisis interactivo: $e');

      // ‚úÖ FALLBACK: Si falla el an√°lisis interactivo, usar versi√≥n b√°sica mejorada
      try {
        debugPrint('üîÑ Usando fallback b√°sico mejorado...');
        return await _generateBasicEnhancedFallback(weeklyEntries, weeklyMoments, userName);
      } catch (fallbackError) {
        debugPrint('‚ùå Error en fallback b√°sico: $fallbackError');
        return null;
      }
    }
  }

  /// ‚úÖ NUEVO: Fallback b√°sico pero que usa el modelo expandido
  Future<AIResponseModel> _generateBasicEnhancedFallback(
      List<Map<String, dynamic>> weeklyEntries,
      List<Map<String, dynamic>> weeklyMoments,
      String userName,
      ) async {

    if (weeklyEntries.isEmpty) {
      return AIResponseModel.fromRichAnalysis(
        summary: '''Esta semana tomaste un descanso de las reflexiones, y eso tambi√©n es valioso. A veces necesitamos espacio para simplemente vivir el momento.

Los per√≠odos sin registro pueden indicar inmersi√≥n completa en el presente. El descanso de la autoobservaci√≥n tambi√©n es una forma de autocuidado.''',
        insights: [
          'Los per√≠odos sin registro pueden indicar inmersi√≥n completa en el presente',
          'El descanso de la autoobservaci√≥n tambi√©n es una forma de autocuidado',
          'La pausa consciente puede ofrecer perspectiva renovada'
        ],
        suggestions: [
          'Considera una reflexi√≥n breve de 30 segundos antes de dormir',
          'Una sola palabra o emoji puede ser suficiente para mantener la conexi√≥n',
          'La constancia importa m√°s que la perfecci√≥n'
        ],
        wellnessScore: 5.0,
        nextWeekFocus: 'Retoma gradualmente tu pr√°ctica reflexiva sin presi√≥n',
        celebrationMoments: [
          'Tu capacidad de autocuidado al tomar descansos conscientes'
        ],
      );
    }

    // Calcular m√©tricas b√°sicas
    final moodScores = weeklyEntries.map((e) => (e['mood_score'] as num?)?.toDouble() ?? 5.0).toList();
    final energyLevels = weeklyEntries.map((e) => (e['energy_level'] as num?)?.toDouble() ?? 5.0).toList();
    final stressLevels = weeklyEntries.map((e) => (e['stress_level'] as num?)?.toDouble() ?? 5.0).toList();

    final avgMood = moodScores.reduce((a, b) => a + b) / moodScores.length;
    final avgEnergy = energyLevels.reduce((a, b) => a + b) / energyLevels.length;
    final avgStress = stressLevels.reduce((a, b) => a + b) / stressLevels.length;

    // Calcular puntuaci√≥n de bienestar
    final wellnessScore = (avgMood * 0.4 + avgEnergy * 0.3 + (10 - avgStress) * 0.3);

    return AIResponseModel.fromRichAnalysis(
      summary: '''Esta semana registraste ${weeklyEntries.length} reflexiones con un estado de √°nimo promedio de ${avgMood.toStringAsFixed(1)}/10.

Tu compromiso con la reflexi√≥n muestra madurez emocional. El patr√≥n semanal indica ${avgMood >= 7 ? 'un per√≠odo positivo' : avgMood >= 5 ? 'equilibrio emocional' : 'algunos desaf√≠os que muestran fortaleza'}. La consistencia en tu pr√°ctica refleja dedicaci√≥n al crecimiento.''',
      insights: [
        'Tu compromiso con la reflexi√≥n muestra madurez emocional',
        'El patr√≥n semanal indica ${avgMood >= 7 ? 'un per√≠odo positivo' : avgMood >= 5 ? 'equilibrio emocional' : 'algunos desaf√≠os que muestran fortaleza'}',
        'La consistencia en tu pr√°ctica refleja dedicaci√≥n al crecimiento',
        'Tu nivel de energ√≠a promedio (${avgEnergy.toStringAsFixed(1)}/10) ${avgEnergy >= 7 ? 'muestra vitalidad' : 'indica oportunidades de mejora'}',
      ],
      suggestions: [
        'Contin√∫a con tu pr√°ctica reflexiva actual',
        avgMood < 6 ? 'Considera actividades que hist√≥ricamente mejoran tu √°nimo' : 'Mant√©n las estrategias que est√°n funcionando bien',
        'Celebra tu compromiso con el autoconocimiento',
        avgEnergy < 6 ? 'Eval√∫a tus patrones de sue√±o y actividad f√≠sica' : 'Tu energ√≠a est√° en buen nivel',
      ],
      wellnessScore: wellnessScore,
      weeklyMetrics: {
        'daysWithReflections': weeklyEntries.length,
        'averageMood': avgMood,
        'averageEnergy': avgEnergy,
        'averageStress': avgStress,
      },
      highlightedMoment: 'Tu dedicaci√≥n a la reflexi√≥n personal es admirable - cada entrada es un acto de amor propio',
      celebrationMoments: [
        'Tu compromiso constante con el autoconocimiento',
        'La valent√≠a de mantener la pr√°ctica reflexiva',
        weeklyEntries.length >= 5 ? 'Excelente consistencia esta semana' : 'Cada reflexi√≥n cuenta y es valiosa',
      ],
      nextWeekFocus: 'Contin√∫a cultivando tu pr√°ctica de autoconocimiento con la misma dedicaci√≥n',
      correlations: avgMood > 6 && avgEnergy > 6 ? {'mood_energy': 0.75} : null,
    );
  }

  /// Construye prompt optimizado para Phi-3.5
  String _buildOptimizedPrompt(
      List<Map<String, dynamic>> weeklyEntries,
      List<Map<String, dynamic>> weeklyMoments,
      String userName,
      ) {
    final systemPrompt = '''Eres un coach de bienestar emp√°tico y perspicaz. Tu trabajo es analizar los datos de bienestar de una persona y proporcionar insights valiosos y recomendaciones personalizadas. Mant√©n un tono c√°lido, profesional y alentador.''';

    final userData = _formatUserDataForAI(weeklyEntries, weeklyMoments, userName);

    final userPrompt = '''Analiza los datos de bienestar de $userName de esta semana y genera un resumen que incluya:

1. **RESUMEN SEMANAL**: Observaciones clave sobre patrones y tendencias
2. **INSIGHTS PROFUNDOS**: Conexiones entre diferentes aspectos del bienestar
3. **RECOMENDACIONES PERSONALIZADAS**: Sugerencias espec√≠ficas y accionables

Datos de la semana:
$userData

Formato la respuesta de manera clara y estructurada, usando un lenguaje cercano y motivador.''';

    // Formato para Phi-3.5
    return '''<|system|>$systemPrompt<|end|>
<|user|>$userPrompt<|end|>
<|assistant|>''';
  }

  /// Formatea datos del usuario para el prompt de IA
  String _formatUserDataForAI(
      List<Map<String, dynamic>> weeklyEntries,
      List<Map<String, dynamic>> weeklyMoments,
      String userName,
      ) {
    final buffer = StringBuffer();

    if (weeklyEntries.isEmpty && weeklyMoments.isEmpty) {
      buffer.writeln('No hay datos registrados esta semana.');
      return buffer.toString();
    }

    // Resumen de entradas diarias
    if (weeklyEntries.isNotEmpty) {
      buffer.writeln('REFLEXIONES DIARIAS:');

      final moodScores = weeklyEntries.map((e) => e['mood_score'] as num? ?? 5).toList();
      final avgMood = moodScores.reduce((a, b) => a + b) / moodScores.length;

      buffer.writeln('- Total de d√≠as con reflexiones: ${weeklyEntries.length}');
      buffer.writeln('- Estado de √°nimo promedio: ${avgMood.toStringAsFixed(1)}/10');

      if (weeklyEntries.any((e) => e['energy_level'] != null)) {
        final energyLevels = weeklyEntries.map((e) => e['energy_level'] as num? ?? 5).toList();
        final avgEnergy = energyLevels.reduce((a, b) => a + b) / energyLevels.length;
        buffer.writeln('- Nivel de energ√≠a promedio: ${avgEnergy.toStringAsFixed(1)}/10');
      }

      if (weeklyEntries.any((e) => e['stress_level'] != null)) {
        final stressLevels = weeklyEntries.map((e) => e['stress_level'] as num? ?? 5).toList();
        final avgStress = stressLevels.reduce((a, b) => a + b) / stressLevels.length;
        buffer.writeln('- Nivel de estr√©s promedio: ${avgStress.toStringAsFixed(1)}/10');
      }

      // Seleccionar reflexiones m√°s significativas
      final significantReflections = weeklyEntries
          .where((e) => (e['free_reflection'] as String? ?? '').length > 20)
          .take(3)
          .map((e) => e['free_reflection'] as String)
          .toList();

      if (significantReflections.isNotEmpty) {
        buffer.writeln('\nREFLEXIONES DESTACADAS:');
        for (int i = 0; i < significantReflections.length; i++) {
          buffer.writeln('${i + 1}. "${significantReflections[i]}"');
        }
      }
    }

    // Momentos especiales
    if (weeklyMoments.isNotEmpty) {
      buffer.writeln('\nMOMENTOS ESPECIALES:');
      buffer.writeln('- Total de momentos registrados: ${weeklyMoments.length}');

      final momentDescriptions = weeklyMoments
          .map((m) => m['description'] as String? ?? '')
          .where((d) => d.isNotEmpty)
          .take(3)
          .toList();

      if (momentDescriptions.isNotEmpty) {
        buffer.writeln('MOMENTOS DESTACADOS:');
        for (int i = 0; i < momentDescriptions.length; i++) {
          buffer.writeln('${i + 1}. "${momentDescriptions[i]}"');
        }
      }
    }

    return buffer.toString();
  }

  /// Genera respuesta usando GenAI nativo
  Future<String> _generateWithNativeGenAI(String prompt) async {
    debugPrint('üöÄ Usando GenAI nativo para generaci√≥n...');

    final response = await GenAIPlatformInterface.generateText(
      prompt,
      maxTokens: 512,
      temperature: 0.7,
      topP: 0.9,
    );

    if (response == null || response.isEmpty) {
      throw Exception('GenAI no devolvi√≥ respuesta v√°lida');
    }

    return _cleanupGenAIResponse(response);
  }

  /// Genera respuesta usando an√°lisis inteligente (fallback)
  Future<String> _generateWithIntelligentAnalysis(
      String prompt,
      List<Map<String, dynamic>> weeklyEntries,
      List<Map<String, dynamic>> weeklyMoments,
      String userName,
      ) async {
    debugPrint('üß† Usando an√°lisis inteligente como fallback...');

    // Simular tiempo de procesamiento de IA
    await Future.delayed(const Duration(seconds: 3));

    return _generateIntelligentResponse(weeklyEntries, weeklyMoments, userName);
  }

  /// Limpia y formatea la respuesta de GenAI
  String _cleanupGenAIResponse(String response) {
    // Remover tokens especiales que puedan aparecer
    String cleaned = response
        .replaceAll('<|assistant|>', '')
        .replaceAll('<|end|>', '')
        .replaceAll('<|user|>', '')
        .replaceAll('<|system|>', '');

    // Limpiar espacios extra y l√≠neas vac√≠as
    cleaned = cleaned
        .split('\n')
        .map((line) => line.trim())
        .where((line) => line.isNotEmpty)
        .join('\n');

    return cleaned.trim();
  }

  /// Genera respuesta inteligente basada en an√°lisis de datos
  String _generateIntelligentResponse(
      List<Map<String, dynamic>> weeklyEntries,
      List<Map<String, dynamic>> weeklyMoments,
      String userName,
      ) {
    if (weeklyEntries.isEmpty && weeklyMoments.isEmpty) {
      return '''**¬°Hola $userName!**

**OBSERVACI√ìN CLAVE:**
Esta semana no registraste reflexiones en tu diario, y eso tambi√©n nos dice algo valioso.

**INSIGHT PROFUNDO:**
Los per√≠odos sin registro suelen coincidir con semanas muy ocupadas o momentos de transici√≥n. Esto es completamente normal y parte del ritmo natural de la vida.

**RECOMENDACI√ìN PERSONALIZADA:**
Prueba la "reflexi√≥n de 30 segundos": antes de dormir, preg√∫ntate simplemente "¬øC√≥mo me sent√≠ hoy?" No necesitas escribir un p√°rrafo; incluso una palabra o emoji cuenta.

Recuerda: la constancia importa m√°s que la perfecci√≥n. ¬°Nos vemos la pr√≥xima semana! üåü''';
    }

    // An√°lisis detallado con datos reales
    final analyzer = WeeklyDataAnalyzer(weeklyEntries, weeklyMoments, userName);
    return analyzer.generateComprehensiveAnalysis();
  }

  /// Prueba la funcionalidad de la IA
  Future<void> _testAIFunctionality() async {
    try {
      if (_isGenAIAvailable) {
        final testPrompt = '<|system|>Responde brevemente<|end|><|user|>Test<|end|><|assistant|>';
        final testResponse = await GenAIPlatformInterface.generateText(
          testPrompt,
          maxTokens: 50,
          temperature: 0.1,
        );

        if (testResponse == null || testResponse.isEmpty) {
          debugPrint('‚ö†Ô∏è Test de GenAI fall√≥, switching to fallback');
          _isGenAIAvailable = false;
        } else {
          debugPrint('‚úÖ Test de GenAI exitoso: $testResponse');
        }
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è Error en test de IA: $e');
      _isGenAIAvailable = false;
    }
  }

  void dispose() {
    if (_isGenAIAvailable) {
      GenAIPlatformInterface.disposeModel();
    }
    _isInitialized = false;
  }
}

/// ‚úÖ MANTENER: Analizador inteligente de datos semanales (versi√≥n b√°sica)
class WeeklyDataAnalyzer {
  final List<Map<String, dynamic>> entries;
  final List<Map<String, dynamic>> moments;
  final String userName;

  WeeklyDataAnalyzer(this.entries, this.moments, this.userName);

  String generateComprehensiveAnalysis() {
    final stats = _calculateDetailedStats();
    final patterns = _identifyBehavioralPatterns();
    final insights = _generateDeepInsights(stats, patterns);
    final recommendations = _generatePersonalizedRecommendations(stats, patterns);

    return '''**¬°Hola $userName!**

**RESUMEN SEMANAL:**
${_generateWeeklySummary(stats)}

**INSIGHTS PROFUNDOS:**
${insights.map((insight) => '‚Ä¢ $insight').join('\n')}

**RECOMENDACIONES PERSONALIZADAS:**
${recommendations.map((rec) => '‚Ä¢ $rec').join('\n')}

**REFLEXI√ìN FINAL:**
${_generatePersonalReflection(stats)}

¬°Tu dedicaci√≥n al autoconocimiento es inspiradora! Cada reflexi√≥n te acerca m√°s a la mejor versi√≥n de ti mismo. üåü''';
  }

  Map<String, dynamic> _calculateDetailedStats() {
    if (entries.isEmpty) return {'hasData': false};

    final moodScores = entries.map((e) => (e['mood_score'] as num?)?.toDouble() ?? 5.0).toList();
    final energyLevels = entries.map((e) => (e['energy_level'] as num?)?.toDouble() ?? 5.0).toList();
    final stressLevels = entries.map((e) => (e['stress_level'] as num?)?.toDouble() ?? 5.0).toList();

    return {
      'hasData': true,
      'totalEntries': entries.length,
      'totalMoments': moments.length,
      'avgMood': moodScores.reduce((a, b) => a + b) / moodScores.length,
      'avgEnergy': energyLevels.reduce((a, b) => a + b) / energyLevels.length,
      'avgStress': stressLevels.reduce((a, b) => a + b) / stressLevels.length,
      'moodTrend': _calculateTrend(moodScores),
      'energyTrend': _calculateTrend(energyLevels),
      'stressTrend': _calculateTrend(stressLevels),
      'consistency': entries.length >= 5 ? 'alta' : entries.length >= 3 ? 'media' : 'baja',
    };
  }

  String _calculateTrend(List<double> values) {
    if (values.length < 3) return 'estable';

    final firstHalf = values.take(values.length ~/ 2).toList();
    final secondHalf = values.skip(values.length ~/ 2).toList();

    final firstAvg = firstHalf.reduce((a, b) => a + b) / firstHalf.length;
    final secondAvg = secondHalf.reduce((a, b) => a + b) / secondHalf.length;

    final difference = secondAvg - firstAvg;

    if (difference > 0.8) return 'mejorando significativamente';
    if (difference > 0.3) return 'mejorando';
    if (difference < -0.8) return 'declinando significativamente';
    if (difference < -0.3) return 'declinando';
    return 'estable';
  }

  List<String> _identifyBehavioralPatterns() {
    final patterns = <String>[];

    // An√°lisis de contenido textual
    final allText = entries
        .map((e) => (e['free_reflection'] as String? ?? '').toLowerCase())
        .join(' ');

    final workKeywords = ['trabajo', 'laboral', 'oficina', 'reuni√≥n', 'proyecto'];
    final familyKeywords = ['familia', 'casa', 'hogar', 'padres', 'hijos'];
    final healthKeywords = ['ejercicio', 'deporte', 'gym', 'caminar', 'correr'];
    final stressKeywords = ['estr√©s', 'estresado', 'ansiedad', 'presi√≥n', 'agobiado'];

    if (_containsKeywords(allText, workKeywords)) {
      patterns.add('El √°mbito laboral tiene un impacto significativo en tu bienestar');
    }

    if (_containsKeywords(allText, familyKeywords)) {
      patterns.add('La vida familiar es una fuente importante de reflexi√≥n para ti');
    }

    if (_containsKeywords(allText, healthKeywords)) {
      patterns.add('La actividad f√≠sica aparece como un tema relevante en tu semana');
    }

    if (_containsKeywords(allText, stressKeywords)) {
      patterns.add('Has experimentado momentos de estr√©s que vale la pena atender');
    }

    return patterns.isNotEmpty ? patterns : ['Tus reflexiones muestran una perspectiva equilibrada y madura'];
  }

  bool _containsKeywords(String text, List<String> keywords) {
    return keywords.any((keyword) => text.contains(keyword));
  }

  List<String> _generateDeepInsights(Map<String, dynamic> stats, List<String> patterns) {
    final insights = <String>[];

    if (!stats['hasData']) {
      insights.add('La pausa en el registro puede ser una oportunidad para reflexionar sobre tus h√°bitos actuales');
      return insights;
    }

    final avgMood = stats['avgMood'] as double;
    final avgEnergy = stats['avgEnergy'] as double;
    final avgStress = stats['avgStress'] as double;
    final moodTrend = stats['moodTrend'] as String;

    // Insight sobre correlaci√≥n mood-energy
    if ((avgMood - avgEnergy).abs() < 1.0) {
      insights.add('Tu estado de √°nimo y nivel de energ√≠a est√°n bien sincronizados, indicando un buen equilibrio interno');
    } else if (avgMood > avgEnergy + 1.5) {
      insights.add('Mantienes una actitud positiva incluso cuando tu energ√≠a est√° baja - esto demuestra una gran resiliencia emocional');
    }

    // Insight sobre manejo del estr√©s
    if (avgStress > 7 && avgMood > 6) {
      insights.add('Tu capacidad para mantener buen √°nimo bajo presi√≥n es notable y sugiere habilidades s√≥lidas de afrontamiento');
    } else if (avgStress > 6 && avgMood < 5) {
      insights.add('El estr√©s parece estar afectando tu bienestar general - es importante abordar las fuentes de presi√≥n');
    }

    // Insight sobre tendencias
    if (moodTrend.contains('mejorando')) {
      insights.add('La tendencia ascendente en tu estado de √°nimo sugiere que las estrategias que est√°s usando est√°n funcionando');
    }

    // Insight sobre consistencia
    if (stats['consistency'] == 'alta') {
      insights.add('Tu constancia en la autorreflexi√≥n es excepcional y seguramente est√° contribuyendo a tu autoconocimiento');
    }

    return insights.isNotEmpty ? insights : ['Tus reflexiones muestran un compromiso genuino con el crecimiento personal'];
  }

  List<String> _generatePersonalizedRecommendations(Map<String, dynamic> stats, List<String> patterns) {
    final recommendations = <String>[];

    if (!stats['hasData']) {
      recommendations.add('Considera retomar gradualmente tu pr√°ctica de reflexi√≥n con sesiones breves de 1-2 minutos');
      return recommendations;
    }

    final avgMood = stats['avgMood'] as double;
    final avgEnergy = stats['avgEnergy'] as double;
    final avgStress = stats['avgStress'] as double;

    if (avgMood < 6) {
      recommendations.add('Identifica y programa m√°s actividades que hist√≥ricamente han mejorado tu estado de √°nimo');
    }

    if (avgEnergy < 6) {
      recommendations.add('Eval√∫a tus patrones de sue√±o, alimentaci√≥n y actividad f√≠sica para optimizar tus niveles de energ√≠a');
    }

    if (avgStress > 7) {
      recommendations.add('Considera implementar t√©cnicas de manejo del estr√©s como respiraci√≥n profunda o meditaci√≥n breve');
    }

    if (stats['consistency'] == 'baja') {
      recommendations.add('Intenta establecer un horario fijo para la reflexi√≥n, aunque sea solo 30 segundos al d√≠a');
    }

    return recommendations.isNotEmpty ? recommendations : ['Contin√∫a con tu excelente pr√°ctica de autorreflexi√≥n'];
  }

  String _generateWeeklySummary(Map<String, dynamic> stats) {
    if (!stats['hasData']) {
      return 'Esta semana tomaste un descanso de las reflexiones. Los per√≠odos sin registro son tambi√©n parte natural del proceso de autoconocimiento.';
    }

    final totalEntries = stats['totalEntries'] as int;
    final avgMood = stats['avgMood'] as double;
    final consistency = stats['consistency'] as String;

    return 'Registraste $totalEntries reflexiones esta semana con un estado de √°nimo promedio de ${avgMood.toStringAsFixed(1)}/10. Tu nivel de consistencia fue $consistency, lo que ${consistency == 'alta' ? 'demuestra un excelente compromiso' : 'muestra tu dedicaci√≥n al crecimiento'} con el autoconocimiento.';
  }

  String _generatePersonalReflection(Map<String, dynamic> stats) {
    if (!stats['hasData']) {
      return 'Recuerda que tanto los per√≠odos de reflexi√≥n activa como los de pausa consciente son valiosos para tu desarrollo personal.';
    }

    final moodTrend = stats['moodTrend'] as String;
    if (moodTrend.contains('mejorando')) {
      return 'La tendencia positiva en tu bienestar es una se√±al esperanzadora. Contin√∫a cultivando las pr√°cticas que est√°n funcionando para ti.';
    } else {
      return 'Cada reflexi√≥n que compartes es un paso valioso hacia un mayor autoconocimiento y crecimiento personal.';
    }
  }
}